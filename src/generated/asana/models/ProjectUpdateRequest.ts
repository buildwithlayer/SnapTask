/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { ProjectBaseAllOfCurrentStatus } from './ProjectBaseAllOfCurrentStatus.js';
import {
    ProjectBaseAllOfCurrentStatusFromJSON,
    ProjectBaseAllOfCurrentStatusFromJSONTyped,
    ProjectBaseAllOfCurrentStatusToJSON,
    ProjectBaseAllOfCurrentStatusToJSONTyped,
} from './ProjectBaseAllOfCurrentStatus.js';
import type { CustomFieldSettingResponse } from './CustomFieldSettingResponse.js';
import {
    CustomFieldSettingResponseFromJSON,
    CustomFieldSettingResponseFromJSONTyped,
    CustomFieldSettingResponseToJSON,
    CustomFieldSettingResponseToJSONTyped,
} from './CustomFieldSettingResponse.js';
import type { ProjectBaseAllOfCurrentStatusUpdate } from './ProjectBaseAllOfCurrentStatusUpdate.js';
import {
    ProjectBaseAllOfCurrentStatusUpdateFromJSON,
    ProjectBaseAllOfCurrentStatusUpdateFromJSONTyped,
    ProjectBaseAllOfCurrentStatusUpdateToJSON,
    ProjectBaseAllOfCurrentStatusUpdateToJSONTyped,
} from './ProjectBaseAllOfCurrentStatusUpdate.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';

/**
 * 
 * @export
 * @interface ProjectUpdateRequest
 */
export interface ProjectUpdateRequest {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    readonly resourceType?: string;
    /**
     * Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    name?: string;
    /**
     * True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
     * @type {boolean}
     * @memberof ProjectUpdateRequest
     */
    archived?: boolean;
    /**
     * Color of the project.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    color?: ProjectUpdateRequestColorEnum | null;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof ProjectUpdateRequest
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {ProjectBaseAllOfCurrentStatus}
     * @memberof ProjectUpdateRequest
     */
    currentStatus?: ProjectBaseAllOfCurrentStatus;
    /**
     * 
     * @type {ProjectBaseAllOfCurrentStatusUpdate}
     * @memberof ProjectUpdateRequest
     */
    currentStatusUpdate?: ProjectBaseAllOfCurrentStatusUpdate;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>custom_fields:read</code></p>
     * 
     * Array of Custom Field Settings (in compact form).
     * @type {Array<CustomFieldSettingResponse>}
     * @memberof ProjectUpdateRequest
     */
    readonly customFieldSettings?: Array<CustomFieldSettingResponse>;
    /**
     * The default view (list, board, calendar, or timeline) of a project.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    defaultView?: ProjectUpdateRequestDefaultViewEnum;
    /**
     * *Deprecated: new integrations should prefer the `due_on` field.*
     * @type {Date}
     * @memberof ProjectUpdateRequest
     */
    dueDate?: Date | null;
    /**
     * The day on which this project is due. This takes a date with format YYYY-MM-DD.
     * @type {Date}
     * @memberof ProjectUpdateRequest
     */
    dueOn?: Date | null;
    /**
     * [Opt In](/docs/inputoutput-options). The notes of the project with formatting as HTML.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    htmlNotes?: string;
    /**
     * Array of users who are members of this project.
     * @type {Array<UserCompact>}
     * @memberof ProjectUpdateRequest
     */
    readonly members?: Array<UserCompact>;
    /**
     * The time at which this project was last modified.
     * *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
     * @type {Date}
     * @memberof ProjectUpdateRequest
     */
    readonly modifiedAt?: Date;
    /**
     * Free-form textual information associated with the project (ie., its description).
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    notes?: string;
    /**
     * *Deprecated:* new integrations use `privacy_setting` instead.
     * @type {boolean}
     * @memberof ProjectUpdateRequest
     * @deprecated
     */
    _public?: boolean;
    /**
     * The privacy setting of the project. *Note: Administrators in your organization may restrict the values of `privacy_setting`.*
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    privacySetting?: ProjectUpdateRequestPrivacySettingEnum;
    /**
     * The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
     * @type {Date}
     * @memberof ProjectUpdateRequest
     */
    startOn?: Date | null;
    /**
     * The default access for users or teams who join or are added as members to the project.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    defaultAccessLevel?: ProjectUpdateRequestDefaultAccessLevelEnum;
    /**
     * The minimum access level needed for project members to modify this project's workflow and appearance.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    minimumAccessLevelForCustomization?: ProjectUpdateRequestMinimumAccessLevelForCustomizationEnum;
    /**
     * The minimum access level needed for project members to share the project and manage project memberships.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    minimumAccessLevelForSharing?: ProjectUpdateRequestMinimumAccessLevelForSharingEnum;
    /**
     * An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, or object (depending on the custom field type). See the [custom fields guide](/docs/custom-fields-guide) for details on creating and updating custom field values.
     * @type {{ [key: string]: string; }}
     * @memberof ProjectUpdateRequest
     */
    customFields?: { [key: string]: string; };
    /**
     * *Create-only*. Comma separated string of users. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    followers?: string;
    /**
     * The current owner of the project, may be null.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    owner?: string | null;
    /**
     * The team that this project is shared with.
     * @type {string}
     * @memberof ProjectUpdateRequest
     */
    team?: string;
}


/**
 * @export
 */
export const ProjectUpdateRequestColorEnum = {
    DarkPink: 'dark-pink',
    DarkGreen: 'dark-green',
    DarkBlue: 'dark-blue',
    DarkRed: 'dark-red',
    DarkTeal: 'dark-teal',
    DarkBrown: 'dark-brown',
    DarkOrange: 'dark-orange',
    DarkPurple: 'dark-purple',
    DarkWarmGray: 'dark-warm-gray',
    LightPink: 'light-pink',
    LightGreen: 'light-green',
    LightBlue: 'light-blue',
    LightRed: 'light-red',
    LightTeal: 'light-teal',
    LightBrown: 'light-brown',
    LightOrange: 'light-orange',
    LightPurple: 'light-purple',
    LightWarmGray: 'light-warm-gray',
    None: 'none'
} as const;
export type ProjectUpdateRequestColorEnum = typeof ProjectUpdateRequestColorEnum[keyof typeof ProjectUpdateRequestColorEnum];

/**
 * @export
 */
export const ProjectUpdateRequestDefaultViewEnum = {
    List: 'list',
    Board: 'board',
    Calendar: 'calendar',
    Timeline: 'timeline'
} as const;
export type ProjectUpdateRequestDefaultViewEnum = typeof ProjectUpdateRequestDefaultViewEnum[keyof typeof ProjectUpdateRequestDefaultViewEnum];

/**
 * @export
 */
export const ProjectUpdateRequestPrivacySettingEnum = {
    PublicToWorkspace: 'public_to_workspace',
    PrivateToTeam: 'private_to_team',
    Private: 'private'
} as const;
export type ProjectUpdateRequestPrivacySettingEnum = typeof ProjectUpdateRequestPrivacySettingEnum[keyof typeof ProjectUpdateRequestPrivacySettingEnum];

/**
 * @export
 */
export const ProjectUpdateRequestDefaultAccessLevelEnum = {
    Admin: 'admin',
    Editor: 'editor',
    Commenter: 'commenter',
    Viewer: 'viewer'
} as const;
export type ProjectUpdateRequestDefaultAccessLevelEnum = typeof ProjectUpdateRequestDefaultAccessLevelEnum[keyof typeof ProjectUpdateRequestDefaultAccessLevelEnum];

/**
 * @export
 */
export const ProjectUpdateRequestMinimumAccessLevelForCustomizationEnum = {
    Admin: 'admin',
    Editor: 'editor'
} as const;
export type ProjectUpdateRequestMinimumAccessLevelForCustomizationEnum = typeof ProjectUpdateRequestMinimumAccessLevelForCustomizationEnum[keyof typeof ProjectUpdateRequestMinimumAccessLevelForCustomizationEnum];

/**
 * @export
 */
export const ProjectUpdateRequestMinimumAccessLevelForSharingEnum = {
    Admin: 'admin',
    Editor: 'editor'
} as const;
export type ProjectUpdateRequestMinimumAccessLevelForSharingEnum = typeof ProjectUpdateRequestMinimumAccessLevelForSharingEnum[keyof typeof ProjectUpdateRequestMinimumAccessLevelForSharingEnum];


/**
 * Check if a given object implements the ProjectUpdateRequest interface.
 */
export function instanceOfProjectUpdateRequest(value: object): value is ProjectUpdateRequest {
    return true;
}

export function ProjectUpdateRequestFromJSON(json: any): ProjectUpdateRequest {
    return ProjectUpdateRequestFromJSONTyped(json, false);
}

export function ProjectUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'archived': json['archived'] == null ? undefined : json['archived'],
        'color': json['color'] == null ? undefined : json['color'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'currentStatus': json['current_status'] == null ? undefined : ProjectBaseAllOfCurrentStatusFromJSON(json['current_status']),
        'currentStatusUpdate': json['current_status_update'] == null ? undefined : ProjectBaseAllOfCurrentStatusUpdateFromJSON(json['current_status_update']),
        'customFieldSettings': json['custom_field_settings'] == null ? undefined : ((json['custom_field_settings'] as Array<any>).map(CustomFieldSettingResponseFromJSON)),
        'defaultView': json['default_view'] == null ? undefined : json['default_view'],
        'dueDate': json['due_date'] == null ? undefined : (new Date(json['due_date'])),
        'dueOn': json['due_on'] == null ? undefined : (new Date(json['due_on'])),
        'htmlNotes': json['html_notes'] == null ? undefined : json['html_notes'],
        'members': json['members'] == null ? undefined : ((json['members'] as Array<any>).map(UserCompactFromJSON)),
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'notes': json['notes'] == null ? undefined : json['notes'],
        '_public': json['public'] == null ? undefined : json['public'],
        'privacySetting': json['privacy_setting'] == null ? undefined : json['privacy_setting'],
        'startOn': json['start_on'] == null ? undefined : (new Date(json['start_on'])),
        'defaultAccessLevel': json['default_access_level'] == null ? undefined : json['default_access_level'],
        'minimumAccessLevelForCustomization': json['minimum_access_level_for_customization'] == null ? undefined : json['minimum_access_level_for_customization'],
        'minimumAccessLevelForSharing': json['minimum_access_level_for_sharing'] == null ? undefined : json['minimum_access_level_for_sharing'],
        'customFields': json['custom_fields'] == null ? undefined : json['custom_fields'],
        'followers': json['followers'] == null ? undefined : json['followers'],
        'owner': json['owner'] == null ? undefined : json['owner'],
        'team': json['team'] == null ? undefined : json['team'],
    };
}

export function ProjectUpdateRequestToJSON(json: any): ProjectUpdateRequest {
    return ProjectUpdateRequestToJSONTyped(json, false);
}

export function ProjectUpdateRequestToJSONTyped(value?: Omit<ProjectUpdateRequest, 'gid'|'resource_type'|'created_at'|'custom_field_settings'|'members'|'modified_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'archived': value['archived'],
        'color': value['color'],
        'current_status': ProjectBaseAllOfCurrentStatusToJSON(value['currentStatus']),
        'current_status_update': ProjectBaseAllOfCurrentStatusUpdateToJSON(value['currentStatusUpdate']),
        'default_view': value['defaultView'],
        'due_date': value['dueDate'] === null ? null : ((value['dueDate'] as any)?.toISOString().substring(0,10)),
        'due_on': value['dueOn'] === null ? null : ((value['dueOn'] as any)?.toISOString().substring(0,10)),
        'html_notes': value['htmlNotes'],
        'notes': value['notes'],
        'public': value['_public'],
        'privacy_setting': value['privacySetting'],
        'start_on': value['startOn'] === null ? null : ((value['startOn'] as any)?.toISOString().substring(0,10)),
        'default_access_level': value['defaultAccessLevel'],
        'minimum_access_level_for_customization': value['minimumAccessLevelForCustomization'],
        'minimum_access_level_for_sharing': value['minimumAccessLevelForSharing'],
        'custom_fields': value['customFields'],
        'followers': value['followers'],
        'owner': value['owner'],
        'team': value['team'],
    };
}

