/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface PortfolioBase
 */
export interface PortfolioBase {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof PortfolioBase
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof PortfolioBase
     */
    readonly resourceType?: string;
    /**
     * The name of the portfolio.
     * @type {string}
     * @memberof PortfolioBase
     */
    name?: string;
    /**
     * [Opt In](/docs/inputoutput-options). True if the portfolio is archived, false if not. Archived portfolios do not show in the UI by default and may be treated differently for queries.
     * @type {boolean}
     * @memberof PortfolioBase
     */
    archived?: boolean;
    /**
     * Color of the portfolio.
     * @type {string}
     * @memberof PortfolioBase
     */
    color?: PortfolioBaseColorEnum;
}


/**
 * @export
 */
export const PortfolioBaseColorEnum = {
    DarkPink: 'dark-pink',
    DarkGreen: 'dark-green',
    DarkBlue: 'dark-blue',
    DarkRed: 'dark-red',
    DarkTeal: 'dark-teal',
    DarkBrown: 'dark-brown',
    DarkOrange: 'dark-orange',
    DarkPurple: 'dark-purple',
    DarkWarmGray: 'dark-warm-gray',
    LightPink: 'light-pink',
    LightGreen: 'light-green',
    LightBlue: 'light-blue',
    LightRed: 'light-red',
    LightTeal: 'light-teal',
    LightBrown: 'light-brown',
    LightOrange: 'light-orange',
    LightPurple: 'light-purple',
    LightWarmGray: 'light-warm-gray'
} as const;
export type PortfolioBaseColorEnum = typeof PortfolioBaseColorEnum[keyof typeof PortfolioBaseColorEnum];


/**
 * Check if a given object implements the PortfolioBase interface.
 */
export function instanceOfPortfolioBase(value: object): value is PortfolioBase {
    return true;
}

export function PortfolioBaseFromJSON(json: any): PortfolioBase {
    return PortfolioBaseFromJSONTyped(json, false);
}

export function PortfolioBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortfolioBase {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'archived': json['archived'] == null ? undefined : json['archived'],
        'color': json['color'] == null ? undefined : json['color'],
    };
}

export function PortfolioBaseToJSON(json: any): PortfolioBase {
    return PortfolioBaseToJSONTyped(json, false);
}

export function PortfolioBaseToJSONTyped(value?: Omit<PortfolioBase, 'gid'|'resource_type'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'archived': value['archived'],
        'color': value['color'],
    };
}

