/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface GoalUpdateRequest
 */
export interface GoalUpdateRequest {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    readonly resourceType?: string;
    /**
     * The name of the goal.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    name?: string;
    /**
     * The notes of the goal with formatting as HTML.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    htmlNotes?: string;
    /**
     * Free-form textual information associated with the goal (i.e. its description).
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    notes?: string;
    /**
     * The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    dueOn?: string | null;
    /**
     * The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    startOn?: string | null;
    /**
     * *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
     * @type {boolean}
     * @memberof GoalUpdateRequest
     */
    isWorkspaceLevel?: boolean;
    /**
     * True if the goal is liked by the authorized user, false if not.
     * @type {boolean}
     * @memberof GoalUpdateRequest
     */
    liked?: boolean;
    /**
     * *Conditional*. This property is only present when the `workspace` provided is an organization.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    team?: string | null;
    /**
     * The `gid` of a workspace.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    workspace?: string;
    /**
     * The `gid` of a time period.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    timePeriod?: string | null;
    /**
     * The `gid` of a user.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    owner?: string | null;
    /**
     * The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
     * *Note* you can only write to this property if `metric` is set.
     * @type {string}
     * @memberof GoalUpdateRequest
     */
    status?: string | null;
}

/**
 * Check if a given object implements the GoalUpdateRequest interface.
 */
export function instanceOfGoalUpdateRequest(value: object): value is GoalUpdateRequest {
    return true;
}

export function GoalUpdateRequestFromJSON(json: any): GoalUpdateRequest {
    return GoalUpdateRequestFromJSONTyped(json, false);
}

export function GoalUpdateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoalUpdateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'htmlNotes': json['html_notes'] == null ? undefined : json['html_notes'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'dueOn': json['due_on'] == null ? undefined : json['due_on'],
        'startOn': json['start_on'] == null ? undefined : json['start_on'],
        'isWorkspaceLevel': json['is_workspace_level'] == null ? undefined : json['is_workspace_level'],
        'liked': json['liked'] == null ? undefined : json['liked'],
        'team': json['team'] == null ? undefined : json['team'],
        'workspace': json['workspace'] == null ? undefined : json['workspace'],
        'timePeriod': json['time_period'] == null ? undefined : json['time_period'],
        'owner': json['owner'] == null ? undefined : json['owner'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function GoalUpdateRequestToJSON(json: any): GoalUpdateRequest {
    return GoalUpdateRequestToJSONTyped(json, false);
}

export function GoalUpdateRequestToJSONTyped(value?: Omit<GoalUpdateRequest, 'gid'|'resource_type'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'html_notes': value['htmlNotes'],
        'notes': value['notes'],
        'due_on': value['dueOn'],
        'start_on': value['startOn'],
        'is_workspace_level': value['isWorkspaceLevel'],
        'liked': value['liked'],
        'team': value['team'],
        'workspace': value['workspace'],
        'time_period': value['timePeriod'],
        'owner': value['owner'],
        'status': value['status'],
    };
}

