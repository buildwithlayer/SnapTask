/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * The context from which this event originated.
 * @export
 * @interface AuditLogEventContext
 */
export interface AuditLogEventContext {
    /**
     * The type of context.
     * Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
     * @type {string}
     * @memberof AuditLogEventContext
     */
    contextType?: AuditLogEventContextContextTypeEnum;
    /**
     * The authentication method used in the context of an API request.
     * Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
     * @type {string}
     * @memberof AuditLogEventContext
     */
    apiAuthenticationMethod?: AuditLogEventContextApiAuthenticationMethodEnum;
    /**
     * The IP address of the client that initiated the event, if applicable.
     * @type {string}
     * @memberof AuditLogEventContext
     */
    clientIpAddress?: string;
    /**
     * The user agent of the client that initiated the event, if applicable.
     * @type {string}
     * @memberof AuditLogEventContext
     */
    userAgent?: string;
    /**
     * The name of the OAuth App that initiated the event.
     * Only present if the `api_authentication_method` is `oauth`.
     * @type {string}
     * @memberof AuditLogEventContext
     */
    oauthAppName?: string;
    /**
     * The name of the automation rule that initiated the event.
     * @type {string}
     * @memberof AuditLogEventContext
     */
    ruleName?: string;
    /**
     * The ID of the user who requested a change via support.
     * @type {number}
     * @memberof AuditLogEventContext
     */
    onBehalfOfUserId?: number;
}


/**
 * @export
 */
export const AuditLogEventContextContextTypeEnum = {
    Web: 'web',
    Desktop: 'desktop',
    Mobile: 'mobile',
    AsanaSupport: 'asana_support',
    Asana: 'asana',
    Email: 'email',
    Api: 'api'
} as const;
export type AuditLogEventContextContextTypeEnum = typeof AuditLogEventContextContextTypeEnum[keyof typeof AuditLogEventContextContextTypeEnum];

/**
 * @export
 */
export const AuditLogEventContextApiAuthenticationMethodEnum = {
    Cookie: 'cookie',
    Oauth: 'oauth',
    PersonalAccessToken: 'personal_access_token',
    ServiceAccount: 'service_account'
} as const;
export type AuditLogEventContextApiAuthenticationMethodEnum = typeof AuditLogEventContextApiAuthenticationMethodEnum[keyof typeof AuditLogEventContextApiAuthenticationMethodEnum];


/**
 * Check if a given object implements the AuditLogEventContext interface.
 */
export function instanceOfAuditLogEventContext(value: object): value is AuditLogEventContext {
    return true;
}

export function AuditLogEventContextFromJSON(json: any): AuditLogEventContext {
    return AuditLogEventContextFromJSONTyped(json, false);
}

export function AuditLogEventContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLogEventContext {
    if (json == null) {
        return json;
    }
    return {
        
        'contextType': json['context_type'] == null ? undefined : json['context_type'],
        'apiAuthenticationMethod': json['api_authentication_method'] == null ? undefined : json['api_authentication_method'],
        'clientIpAddress': json['client_ip_address'] == null ? undefined : json['client_ip_address'],
        'userAgent': json['user_agent'] == null ? undefined : json['user_agent'],
        'oauthAppName': json['oauth_app_name'] == null ? undefined : json['oauth_app_name'],
        'ruleName': json['rule_name'] == null ? undefined : json['rule_name'],
        'onBehalfOfUserId': json['on_behalf_of_user_id'] == null ? undefined : json['on_behalf_of_user_id'],
    };
}

export function AuditLogEventContextToJSON(json: any): AuditLogEventContext {
    return AuditLogEventContextToJSONTyped(json, false);
}

export function AuditLogEventContextToJSONTyped(value?: AuditLogEventContext | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'context_type': value['contextType'],
        'api_authentication_method': value['apiAuthenticationMethod'],
        'client_ip_address': value['clientIpAddress'],
        'user_agent': value['userAgent'],
        'oauth_app_name': value['oauthAppName'],
        'rule_name': value['ruleName'],
        'on_behalf_of_user_id': value['onBehalfOfUserId'],
    };
}

