/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface EnumOptionInsertRequest
 */
export interface EnumOptionInsertRequest {
    /**
     * The gid of the enum option to relocate.
     * @type {string}
     * @memberof EnumOptionInsertRequest
     */
    enumOption: string;
    /**
     * An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
     * @type {string}
     * @memberof EnumOptionInsertRequest
     */
    beforeEnumOption?: string;
    /**
     * An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
     * @type {string}
     * @memberof EnumOptionInsertRequest
     */
    afterEnumOption?: string;
}

/**
 * Check if a given object implements the EnumOptionInsertRequest interface.
 */
export function instanceOfEnumOptionInsertRequest(value: object): value is EnumOptionInsertRequest {
    if (!('enumOption' in value) || value['enumOption'] === undefined) return false;
    return true;
}

export function EnumOptionInsertRequestFromJSON(json: any): EnumOptionInsertRequest {
    return EnumOptionInsertRequestFromJSONTyped(json, false);
}

export function EnumOptionInsertRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnumOptionInsertRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'enumOption': json['enum_option'],
        'beforeEnumOption': json['before_enum_option'] == null ? undefined : json['before_enum_option'],
        'afterEnumOption': json['after_enum_option'] == null ? undefined : json['after_enum_option'],
    };
}

export function EnumOptionInsertRequestToJSON(json: any): EnumOptionInsertRequest {
    return EnumOptionInsertRequestToJSONTyped(json, false);
}

export function EnumOptionInsertRequestToJSONTyped(value?: EnumOptionInsertRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'enum_option': value['enumOption'],
        'before_enum_option': value['beforeEnumOption'],
        'after_enum_option': value['afterEnumOption'],
    };
}

