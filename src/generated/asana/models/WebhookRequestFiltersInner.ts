/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * A set of filters to specify a whitelist for what types of events will be delivered.
 * @export
 * @interface WebhookRequestFiltersInner
 */
export interface WebhookRequestFiltersInner {
    /**
     * The type of the resource which created the event when modified; for example, to filter to changes on regular tasks this field should be set to `task`.
     * @type {string}
     * @memberof WebhookRequestFiltersInner
     */
    resourceType?: string;
    /**
     * The resource subtype of the resource that the filter applies to. This should be set to the same value as is returned on the `resource_subtype` field on the resources themselves.
     * @type {string}
     * @memberof WebhookRequestFiltersInner
     */
    resourceSubtype?: string;
    /**
     * The type of change on the **resource** to pass through the filter. For more information refer to `Event.action` in the [event](/reference/events) schema. This can be one of `changed`, `added`, `removed`, `deleted`, and `undeleted` depending on the nature of what has occurred on the resource.
     * @type {string}
     * @memberof WebhookRequestFiltersInner
     */
    action?: string;
    /**
     * *Conditional.* A whitelist of fields for events which will pass the filter when the resource is changed. These can be any combination of the fields on the resources themselves. This field is only valid for `action` of type `changed`
     * *Note: Subscriptions created on higher-level resources such as a Workspace, Team, or Portfolio do not support fields.*
     * @type {Array<string>}
     * @memberof WebhookRequestFiltersInner
     */
    fields?: Array<string>;
}

/**
 * Check if a given object implements the WebhookRequestFiltersInner interface.
 */
export function instanceOfWebhookRequestFiltersInner(value: object): value is WebhookRequestFiltersInner {
    return true;
}

export function WebhookRequestFiltersInnerFromJSON(json: any): WebhookRequestFiltersInner {
    return WebhookRequestFiltersInnerFromJSONTyped(json, false);
}

export function WebhookRequestFiltersInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookRequestFiltersInner {
    if (json == null) {
        return json;
    }
    return {
        
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'action': json['action'] == null ? undefined : json['action'],
        'fields': json['fields'] == null ? undefined : json['fields'],
    };
}

export function WebhookRequestFiltersInnerToJSON(json: any): WebhookRequestFiltersInner {
    return WebhookRequestFiltersInnerToJSONTyped(json, false);
}

export function WebhookRequestFiltersInnerToJSONTyped(value?: WebhookRequestFiltersInner | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resource_type': value['resourceType'],
        'resource_subtype': value['resourceSubtype'],
        'action': value['action'],
        'fields': value['fields'],
    };
}

