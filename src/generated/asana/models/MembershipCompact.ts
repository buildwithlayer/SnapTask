/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GoalMembershipCompact } from './GoalMembershipCompact.js';
import {
    GoalMembershipCompactFromJSON,
    GoalMembershipCompactFromJSONTyped,
    GoalMembershipCompactToJSON,
    GoalMembershipCompactToJSONTyped,
} from './GoalMembershipCompact.js';
import type { CustomFieldMembershipCompact } from './CustomFieldMembershipCompact.js';
import {
    CustomFieldMembershipCompactFromJSON,
    CustomFieldMembershipCompactFromJSONTyped,
    CustomFieldMembershipCompactToJSON,
    CustomFieldMembershipCompactToJSONTyped,
} from './CustomFieldMembershipCompact.js';
import type { ProjectMembershipCompactResponse } from './ProjectMembershipCompactResponse.js';
import {
    ProjectMembershipCompactResponseFromJSON,
    ProjectMembershipCompactResponseFromJSONTyped,
    ProjectMembershipCompactResponseToJSON,
    ProjectMembershipCompactResponseToJSONTyped,
} from './ProjectMembershipCompactResponse.js';
import type { PortfolioMembershipCompactResponse } from './PortfolioMembershipCompactResponse.js';
import {
    PortfolioMembershipCompactResponseFromJSON,
    PortfolioMembershipCompactResponseFromJSONTyped,
    PortfolioMembershipCompactResponseToJSON,
    PortfolioMembershipCompactResponseToJSONTyped,
} from './PortfolioMembershipCompactResponse.js';
import type { GoalMembershipBaseGoal } from './GoalMembershipBaseGoal.js';
import {
    GoalMembershipBaseGoalFromJSON,
    GoalMembershipBaseGoalFromJSONTyped,
    GoalMembershipBaseGoalToJSON,
    GoalMembershipBaseGoalToJSONTyped,
} from './GoalMembershipBaseGoal.js';
import type { MemberCompact } from './MemberCompact.js';
import {
    MemberCompactFromJSON,
    MemberCompactFromJSONTyped,
    MemberCompactToJSON,
    MemberCompactToJSONTyped,
} from './MemberCompact.js';
import type { CustomFieldCompact } from './CustomFieldCompact.js';
import {
    CustomFieldCompactFromJSON,
    CustomFieldCompactFromJSONTyped,
    CustomFieldCompactToJSON,
    CustomFieldCompactToJSONTyped,
} from './CustomFieldCompact.js';

/**
 * 
 * @export
 * @interface MembershipCompact
 */
export interface MembershipCompact {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof MembershipCompact
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof MembershipCompact
     */
    readonly resourceType?: string;
    /**
     * Type of the membership.
     * @type {string}
     * @memberof MembershipCompact
     */
    resourceSubtype?: string;
    /**
     * 
     * @type {MemberCompact}
     * @memberof MembershipCompact
     */
    member?: MemberCompact;
    /**
     * 
     * @type {CustomFieldCompact}
     * @memberof MembershipCompact
     */
    parent?: CustomFieldCompact;
    /**
     * *Deprecated: Describes if the member is a commenter or editor in goal.*
     * @type {string}
     * @memberof MembershipCompact
     * @deprecated
     */
    role?: MembershipCompactRoleEnum;
    /**
     * Whether the member has admin, editor, or user access to the custom field.
     * @type {string}
     * @memberof MembershipCompact
     */
    readonly accessLevel?: MembershipCompactAccessLevelEnum;
    /**
     * 
     * @type {GoalMembershipBaseGoal}
     * @memberof MembershipCompact
     */
    goal?: GoalMembershipBaseGoal;
    /**
     * *Deprecated: new integrations should prefer the `role` field.* Describes if the member is comment only in goal.
     * @type {boolean}
     * @memberof MembershipCompact
     * @deprecated
     */
    readonly isCommenter?: boolean;
    /**
     * *Deprecated: new integrations should prefer the `role` field.* Describes if the member is editor in goal.
     * @type {boolean}
     * @memberof MembershipCompact
     * @deprecated
     */
    readonly isEditor?: boolean;
}


/**
 * @export
 */
export const MembershipCompactRoleEnum = {
    Commenter: 'commenter',
    Editor: 'editor'
} as const;
export type MembershipCompactRoleEnum = typeof MembershipCompactRoleEnum[keyof typeof MembershipCompactRoleEnum];

/**
 * @export
 */
export const MembershipCompactAccessLevelEnum = {
    Admin: 'admin',
    Editor: 'editor',
    User: 'user'
} as const;
export type MembershipCompactAccessLevelEnum = typeof MembershipCompactAccessLevelEnum[keyof typeof MembershipCompactAccessLevelEnum];


/**
 * Check if a given object implements the MembershipCompact interface.
 */
export function instanceOfMembershipCompact(value: object): value is MembershipCompact {
    return true;
}

export function MembershipCompactFromJSON(json: any): MembershipCompact {
    return MembershipCompactFromJSONTyped(json, false);
}

export function MembershipCompactFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipCompact {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'member': json['member'] == null ? undefined : MemberCompactFromJSON(json['member']),
        'parent': json['parent'] == null ? undefined : CustomFieldCompactFromJSON(json['parent']),
        'role': json['role'] == null ? undefined : json['role'],
        'accessLevel': json['access_level'] == null ? undefined : json['access_level'],
        'goal': json['goal'] == null ? undefined : GoalMembershipBaseGoalFromJSON(json['goal']),
        'isCommenter': json['is_commenter'] == null ? undefined : json['is_commenter'],
        'isEditor': json['is_editor'] == null ? undefined : json['is_editor'],
    };
}

export function MembershipCompactToJSON(json: any): MembershipCompact {
    return MembershipCompactToJSONTyped(json, false);
}

export function MembershipCompactToJSONTyped(value?: Omit<MembershipCompact, 'gid'|'resource_type'|'access_level'|'is_commenter'|'is_editor'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resource_subtype': value['resourceSubtype'],
        'member': MemberCompactToJSON(value['member']),
        'parent': CustomFieldCompactToJSON(value['parent']),
        'role': value['role'],
        'goal': GoalMembershipBaseGoalToJSON(value['goal']),
    };
}

