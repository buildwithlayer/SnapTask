/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { Like } from './Like.js';
import {
    LikeFromJSON,
    LikeFromJSONTyped,
    LikeToJSON,
    LikeToJSONTyped,
} from './Like.js';
import type { TaskBaseAllOfExternal } from './TaskBaseAllOfExternal.js';
import {
    TaskBaseAllOfExternalFromJSON,
    TaskBaseAllOfExternalFromJSONTyped,
    TaskBaseAllOfExternalToJSON,
    TaskBaseAllOfExternalToJSONTyped,
} from './TaskBaseAllOfExternal.js';
import type { TaskCompactCreatedBy } from './TaskCompactCreatedBy.js';
import {
    TaskCompactCreatedByFromJSON,
    TaskCompactCreatedByFromJSONTyped,
    TaskCompactCreatedByToJSON,
    TaskCompactCreatedByToJSONTyped,
} from './TaskCompactCreatedBy.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';
import type { AsanaResource } from './AsanaResource.js';
import {
    AsanaResourceFromJSON,
    AsanaResourceFromJSONTyped,
    AsanaResourceToJSON,
    AsanaResourceToJSONTyped,
} from './AsanaResource.js';
import type { TaskBaseAllOfMemberships } from './TaskBaseAllOfMemberships.js';
import {
    TaskBaseAllOfMembershipsFromJSON,
    TaskBaseAllOfMembershipsFromJSONTyped,
    TaskBaseAllOfMembershipsToJSON,
    TaskBaseAllOfMembershipsToJSONTyped,
} from './TaskBaseAllOfMemberships.js';

/**
 * 
 * @export
 * @interface TaskRequest
 */
export interface TaskRequest {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof TaskRequest
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof TaskRequest
     */
    readonly resourceType?: string;
    /**
     * Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
     * @type {string}
     * @memberof TaskRequest
     */
    name?: string;
    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     * The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
     * @type {string}
     * @memberof TaskRequest
     */
    resourceSubtype?: TaskRequestResourceSubtypeEnum;
    /**
     * 
     * @type {TaskCompactCreatedBy}
     * @memberof TaskRequest
     */
    createdBy?: TaskCompactCreatedBy;
    /**
     * *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
     * @type {string}
     * @memberof TaskRequest
     */
    approvalStatus?: TaskRequestApprovalStatusEnum;
    /**
     * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
     * @type {string}
     * @memberof TaskRequest
     */
    assigneeStatus?: TaskRequestAssigneeStatusEnum;
    /**
     * True if the task is currently marked complete, false if not.
     * @type {boolean}
     * @memberof TaskRequest
     */
    completed?: boolean;
    /**
     * The time at which this task was completed, or null if the task is incomplete.
     * @type {Date}
     * @memberof TaskRequest
     */
    readonly completedAt?: Date | null;
    /**
     * 
     * @type {UserCompact}
     * @memberof TaskRequest
     */
    readonly completedBy?: UserCompact | null;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof TaskRequest
     */
    readonly createdAt?: Date;
    /**
     * [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
     * @type {Array<AsanaResource>}
     * @memberof TaskRequest
     */
    readonly dependencies?: Array<AsanaResource>;
    /**
     * [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
     * @type {Array<AsanaResource>}
     * @memberof TaskRequest
     */
    readonly dependents?: Array<AsanaResource>;
    /**
     * The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
     * @type {Date}
     * @memberof TaskRequest
     */
    dueAt?: Date | null;
    /**
     * The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.
     * @type {Date}
     * @memberof TaskRequest
     */
    dueOn?: Date | null;
    /**
     * 
     * @type {TaskBaseAllOfExternal}
     * @memberof TaskRequest
     */
    external?: TaskBaseAllOfExternal;
    /**
     * [Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.
     * @type {string}
     * @memberof TaskRequest
     */
    htmlNotes?: string;
    /**
     * *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
     * @type {boolean}
     * @memberof TaskRequest
     */
    readonly hearted?: boolean;
    /**
     * *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
     * @type {Array<Like>}
     * @memberof TaskRequest
     */
    readonly hearts?: Array<Like>;
    /**
     * [Opt In](/docs/inputoutput-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/reference/sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.
     * @type {boolean}
     * @memberof TaskRequest
     */
    readonly isRenderedAsSeparator?: boolean;
    /**
     * True if the task is liked by the authorized user, false if not.
     * @type {boolean}
     * @memberof TaskRequest
     */
    liked?: boolean;
    /**
     * Array of likes for users who have liked this task.
     * @type {Array<Like>}
     * @memberof TaskRequest
     */
    readonly likes?: Array<Like>;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>projects:read</code>, <code>project_sections:read</code></p>
     * 
     * *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.
     * @type {Array<TaskBaseAllOfMemberships>}
     * @memberof TaskRequest
     */
    readonly memberships?: Array<TaskBaseAllOfMemberships>;
    /**
     * The time at which this task was last modified.
     * 
     * The following conditions will change `modified_at`:
     * 
     * - story is created on a task
     * - story is trashed on a task
     * - attachment is trashed on a task
     * - task is assigned or unassigned
     * - custom field value is changed
     * - the task itself is trashed
     * - Or if any of the following fields are updated:
     *   - completed
     *   - name
     *   - due_date
     *   - description
     *   - attachments
     *   - items
     *   - schedule_status
     * 
     * The following conditions will _not_ change `modified_at`:
     * 
     * - moving to a new container (project, portfolio, etc)
     * - comments being added to the task (but the stories they generate
     *   _will_ affect `modified_at`)
     * @type {Date}
     * @memberof TaskRequest
     */
    readonly modifiedAt?: Date;
    /**
     * Free-form textual information associated with the task (i.e. its description).
     * @type {string}
     * @memberof TaskRequest
     */
    notes?: string;
    /**
     * *Deprecated - please use likes instead* The number of users who have hearted this task.
     * @type {number}
     * @memberof TaskRequest
     */
    readonly numHearts?: number;
    /**
     * The number of users who have liked this task.
     * @type {number}
     * @memberof TaskRequest
     */
    readonly numLikes?: number;
    /**
     * [Opt In](/docs/inputoutput-options). The number of subtasks on this task.
     * 
     * @type {number}
     * @memberof TaskRequest
     */
    readonly numSubtasks?: number;
    /**
     * Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`.
     * *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*
     * @type {Date}
     * @memberof TaskRequest
     */
    startAt?: Date | null;
    /**
     * The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`.
     * *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
     * @type {Date}
     * @memberof TaskRequest
     */
    startOn?: Date | null;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>time_tracking_entries:read</code></p>
     * 
     * This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
     * @type {number}
     * @memberof TaskRequest
     */
    readonly actualTimeMinutes?: number | null;
    /**
     * Gid of a user.
     * @type {string}
     * @memberof TaskRequest
     */
    assignee?: string | null;
    /**
     * The *assignee section* is a subdivision of a project that groups tasks together in the assignee's "My tasks" list. It can either be a header above a list of tasks in a list view or a column in a board view of "My tasks."
     * The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's "My tasks" list.
     * @type {string}
     * @memberof TaskRequest
     */
    assigneeSection?: string | null;
    /**
     * An object where each key is the GID of a custom field and its corresponding value is either an enum GID, string, number, object, or array (depending on the custom field type). See the [custom fields guide](/docs/custom-fields-guide) for details on creating and updating custom field values.
     * @type {{ [key: string]: string; }}
     * @memberof TaskRequest
     */
    customFields?: { [key: string]: string; };
    /**
     * *Create-Only* An array of strings identifying users. These can either be the string "me", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.
     * @type {Array<string>}
     * @memberof TaskRequest
     */
    followers?: Array<string>;
    /**
     * Gid of a task.
     * @type {string}
     * @memberof TaskRequest
     */
    parent?: string | null;
    /**
     * *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.
     * @type {Array<string>}
     * @memberof TaskRequest
     */
    projects?: Array<string>;
    /**
     * *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.
     * @type {Array<string>}
     * @memberof TaskRequest
     */
    tags?: Array<string>;
    /**
     * Gid of a workspace.
     * @type {string}
     * @memberof TaskRequest
     */
    workspace?: string;
    /**
     * GID or globally-unique identifier of a custom_type.
     * @type {string}
     * @memberof TaskRequest
     */
    customType?: string | null;
    /**
     * GID or globally-unique identifier of a custom_type_status_option
     * @type {string}
     * @memberof TaskRequest
     */
    customTypeStatusOption?: string | null;
}


/**
 * @export
 */
export const TaskRequestResourceSubtypeEnum = {
    DefaultTask: 'default_task',
    Milestone: 'milestone',
    Approval: 'approval'
} as const;
export type TaskRequestResourceSubtypeEnum = typeof TaskRequestResourceSubtypeEnum[keyof typeof TaskRequestResourceSubtypeEnum];

/**
 * @export
 */
export const TaskRequestApprovalStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected',
    ChangesRequested: 'changes_requested'
} as const;
export type TaskRequestApprovalStatusEnum = typeof TaskRequestApprovalStatusEnum[keyof typeof TaskRequestApprovalStatusEnum];

/**
 * @export
 */
export const TaskRequestAssigneeStatusEnum = {
    Today: 'today',
    Upcoming: 'upcoming',
    Later: 'later',
    New: 'new',
    Inbox: 'inbox'
} as const;
export type TaskRequestAssigneeStatusEnum = typeof TaskRequestAssigneeStatusEnum[keyof typeof TaskRequestAssigneeStatusEnum];


/**
 * Check if a given object implements the TaskRequest interface.
 */
export function instanceOfTaskRequest(value: object): value is TaskRequest {
    return true;
}

export function TaskRequestFromJSON(json: any): TaskRequest {
    return TaskRequestFromJSONTyped(json, false);
}

export function TaskRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'createdBy': json['created_by'] == null ? undefined : TaskCompactCreatedByFromJSON(json['created_by']),
        'approvalStatus': json['approval_status'] == null ? undefined : json['approval_status'],
        'assigneeStatus': json['assignee_status'] == null ? undefined : json['assignee_status'],
        'completed': json['completed'] == null ? undefined : json['completed'],
        'completedAt': json['completed_at'] == null ? undefined : (new Date(json['completed_at'])),
        'completedBy': json['completed_by'] == null ? undefined : UserCompactFromJSON(json['completed_by']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'dependencies': json['dependencies'] == null ? undefined : ((json['dependencies'] as Array<any>).map(AsanaResourceFromJSON)),
        'dependents': json['dependents'] == null ? undefined : ((json['dependents'] as Array<any>).map(AsanaResourceFromJSON)),
        'dueAt': json['due_at'] == null ? undefined : (new Date(json['due_at'])),
        'dueOn': json['due_on'] == null ? undefined : (new Date(json['due_on'])),
        'external': json['external'] == null ? undefined : TaskBaseAllOfExternalFromJSON(json['external']),
        'htmlNotes': json['html_notes'] == null ? undefined : json['html_notes'],
        'hearted': json['hearted'] == null ? undefined : json['hearted'],
        'hearts': json['hearts'] == null ? undefined : ((json['hearts'] as Array<any>).map(LikeFromJSON)),
        'isRenderedAsSeparator': json['is_rendered_as_separator'] == null ? undefined : json['is_rendered_as_separator'],
        'liked': json['liked'] == null ? undefined : json['liked'],
        'likes': json['likes'] == null ? undefined : ((json['likes'] as Array<any>).map(LikeFromJSON)),
        'memberships': json['memberships'] == null ? undefined : ((json['memberships'] as Array<any>).map(TaskBaseAllOfMembershipsFromJSON)),
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'notes': json['notes'] == null ? undefined : json['notes'],
        'numHearts': json['num_hearts'] == null ? undefined : json['num_hearts'],
        'numLikes': json['num_likes'] == null ? undefined : json['num_likes'],
        'numSubtasks': json['num_subtasks'] == null ? undefined : json['num_subtasks'],
        'startAt': json['start_at'] == null ? undefined : (new Date(json['start_at'])),
        'startOn': json['start_on'] == null ? undefined : (new Date(json['start_on'])),
        'actualTimeMinutes': json['actual_time_minutes'] == null ? undefined : json['actual_time_minutes'],
        'assignee': json['assignee'] == null ? undefined : json['assignee'],
        'assigneeSection': json['assignee_section'] == null ? undefined : json['assignee_section'],
        'customFields': json['custom_fields'] == null ? undefined : json['custom_fields'],
        'followers': json['followers'] == null ? undefined : json['followers'],
        'parent': json['parent'] == null ? undefined : json['parent'],
        'projects': json['projects'] == null ? undefined : json['projects'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'workspace': json['workspace'] == null ? undefined : json['workspace'],
        'customType': json['custom_type'] == null ? undefined : json['custom_type'],
        'customTypeStatusOption': json['custom_type_status_option'] == null ? undefined : json['custom_type_status_option'],
    };
}

export function TaskRequestToJSON(json: any): TaskRequest {
    return TaskRequestToJSONTyped(json, false);
}

export function TaskRequestToJSONTyped(value?: Omit<TaskRequest, 'gid'|'resource_type'|'completed_at'|'completed_by'|'created_at'|'dependencies'|'dependents'|'hearted'|'hearts'|'is_rendered_as_separator'|'likes'|'memberships'|'modified_at'|'num_hearts'|'num_likes'|'num_subtasks'|'actual_time_minutes'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'resource_subtype': value['resourceSubtype'],
        'created_by': TaskCompactCreatedByToJSON(value['createdBy']),
        'approval_status': value['approvalStatus'],
        'assignee_status': value['assigneeStatus'],
        'completed': value['completed'],
        'due_at': value['dueAt'] === null ? null : ((value['dueAt'] as any)?.toISOString()),
        'due_on': value['dueOn'] === null ? null : ((value['dueOn'] as any)?.toISOString().substring(0,10)),
        'external': TaskBaseAllOfExternalToJSON(value['external']),
        'html_notes': value['htmlNotes'],
        'liked': value['liked'],
        'notes': value['notes'],
        'start_at': value['startAt'] === null ? null : ((value['startAt'] as any)?.toISOString()),
        'start_on': value['startOn'] === null ? null : ((value['startOn'] as any)?.toISOString().substring(0,10)),
        'assignee': value['assignee'],
        'assignee_section': value['assigneeSection'],
        'custom_fields': value['customFields'],
        'followers': value['followers'],
        'parent': value['parent'],
        'projects': value['projects'],
        'tags': value['tags'],
        'workspace': value['workspace'],
        'custom_type': value['customType'],
        'custom_type_status_option': value['customTypeStatusOption'],
    };
}

