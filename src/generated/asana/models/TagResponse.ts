/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { WorkspaceCompact } from './WorkspaceCompact.js';
import {
    WorkspaceCompactFromJSON,
    WorkspaceCompactFromJSONTyped,
    WorkspaceCompactToJSON,
    WorkspaceCompactToJSONTyped,
} from './WorkspaceCompact.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';

/**
 * 
 * @export
 * @interface TagResponse
 */
export interface TagResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof TagResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof TagResponse
     */
    readonly resourceType?: string;
    /**
     * Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
     * @type {string}
     * @memberof TagResponse
     */
    name?: string;
    /**
     * Color of the tag.
     * @type {string}
     * @memberof TagResponse
     */
    color?: TagResponseColorEnum | null;
    /**
     * Free-form textual information associated with the tag (i.e. its description).
     * @type {string}
     * @memberof TagResponse
     */
    notes?: string;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof TagResponse
     */
    readonly createdAt?: Date;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>users:read</code></p>
     * 
     * Array of users following this tag.
     * @type {Array<UserCompact>}
     * @memberof TagResponse
     */
    readonly followers?: Array<UserCompact>;
    /**
     * 
     * @type {WorkspaceCompact}
     * @memberof TagResponse
     */
    workspace?: WorkspaceCompact;
    /**
     * A url that points directly to the object within Asana.
     * @type {string}
     * @memberof TagResponse
     */
    readonly permalinkUrl?: string;
}


/**
 * @export
 */
export const TagResponseColorEnum = {
    DarkPink: 'dark-pink',
    DarkGreen: 'dark-green',
    DarkBlue: 'dark-blue',
    DarkRed: 'dark-red',
    DarkTeal: 'dark-teal',
    DarkBrown: 'dark-brown',
    DarkOrange: 'dark-orange',
    DarkPurple: 'dark-purple',
    DarkWarmGray: 'dark-warm-gray',
    LightPink: 'light-pink',
    LightGreen: 'light-green',
    LightBlue: 'light-blue',
    LightRed: 'light-red',
    LightTeal: 'light-teal',
    LightBrown: 'light-brown',
    LightOrange: 'light-orange',
    LightPurple: 'light-purple',
    LightWarmGray: 'light-warm-gray'
} as const;
export type TagResponseColorEnum = typeof TagResponseColorEnum[keyof typeof TagResponseColorEnum];


/**
 * Check if a given object implements the TagResponse interface.
 */
export function instanceOfTagResponse(value: object): value is TagResponse {
    return true;
}

export function TagResponseFromJSON(json: any): TagResponse {
    return TagResponseFromJSONTyped(json, false);
}

export function TagResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TagResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'color': json['color'] == null ? undefined : json['color'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'followers': json['followers'] == null ? undefined : ((json['followers'] as Array<any>).map(UserCompactFromJSON)),
        'workspace': json['workspace'] == null ? undefined : WorkspaceCompactFromJSON(json['workspace']),
        'permalinkUrl': json['permalink_url'] == null ? undefined : json['permalink_url'],
    };
}

export function TagResponseToJSON(json: any): TagResponse {
    return TagResponseToJSONTyped(json, false);
}

export function TagResponseToJSONTyped(value?: Omit<TagResponse, 'gid'|'resource_type'|'created_at'|'followers'|'permalink_url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'color': value['color'],
        'notes': value['notes'],
        'workspace': WorkspaceCompactToJSON(value['workspace']),
    };
}

