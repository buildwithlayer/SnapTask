/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * A collection of rich text that will be displayed as a preview to another app.
 * 
 * This is read-only except for a small group of whitelisted apps.
 * @export
 * @interface Preview
 */
export interface Preview {
    /**
     * Some fallback text to display if unable to display the full preview.
     * @type {string}
     * @memberof Preview
     */
    fallback?: string;
    /**
     * Text to display in the footer.
     * @type {string}
     * @memberof Preview
     */
    footer?: string;
    /**
     * Text to display in the header.
     * @type {string}
     * @memberof Preview
     */
    header?: string;
    /**
     * Where the header will link to.
     * @type {string}
     * @memberof Preview
     */
    headerLink?: string;
    /**
     * HTML formatted text for the body of the preview.
     * @type {string}
     * @memberof Preview
     */
    htmlText?: string;
    /**
     * Text for the body of the preview.
     * @type {string}
     * @memberof Preview
     */
    text?: string;
    /**
     * Text to display as the title.
     * @type {string}
     * @memberof Preview
     */
    title?: string;
    /**
     * Where to title will link to.
     * @type {string}
     * @memberof Preview
     */
    titleLink?: string;
}

/**
 * Check if a given object implements the Preview interface.
 */
export function instanceOfPreview(value: object): value is Preview {
    return true;
}

export function PreviewFromJSON(json: any): Preview {
    return PreviewFromJSONTyped(json, false);
}

export function PreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): Preview {
    if (json == null) {
        return json;
    }
    return {
        
        'fallback': json['fallback'] == null ? undefined : json['fallback'],
        'footer': json['footer'] == null ? undefined : json['footer'],
        'header': json['header'] == null ? undefined : json['header'],
        'headerLink': json['header_link'] == null ? undefined : json['header_link'],
        'htmlText': json['html_text'] == null ? undefined : json['html_text'],
        'text': json['text'] == null ? undefined : json['text'],
        'title': json['title'] == null ? undefined : json['title'],
        'titleLink': json['title_link'] == null ? undefined : json['title_link'],
    };
}

export function PreviewToJSON(json: any): Preview {
    return PreviewToJSONTyped(json, false);
}

export function PreviewToJSONTyped(value?: Preview | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fallback': value['fallback'],
        'footer': value['footer'],
        'header': value['header'],
        'header_link': value['headerLink'],
        'html_text': value['htmlText'],
        'text': value['text'],
        'title': value['title'],
        'title_link': value['titleLink'],
    };
}

