/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GoalRelationshipCompactSupportingResource } from './GoalRelationshipCompactSupportingResource.js';
import {
    GoalRelationshipCompactSupportingResourceFromJSON,
    GoalRelationshipCompactSupportingResourceFromJSONTyped,
    GoalRelationshipCompactSupportingResourceToJSON,
    GoalRelationshipCompactSupportingResourceToJSONTyped,
} from './GoalRelationshipCompactSupportingResource.js';

/**
 * A *goal relationship* is an object representing the relationship between a goal and another goal, a project, a task, or a portfolio.
 * @export
 * @interface GoalRelationshipCompact
 */
export interface GoalRelationshipCompact {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof GoalRelationshipCompact
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof GoalRelationshipCompact
     */
    readonly resourceType?: string;
    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     * @type {string}
     * @memberof GoalRelationshipCompact
     */
    readonly resourceSubtype?: GoalRelationshipCompactResourceSubtypeEnum;
    /**
     * 
     * @type {GoalRelationshipCompactSupportingResource}
     * @memberof GoalRelationshipCompact
     */
    supportingResource?: GoalRelationshipCompactSupportingResource;
    /**
     * The weight that the supporting resource's progress contributes to the supported goal's progress. This can be 0, 1, or any value in between.
     * @type {number}
     * @memberof GoalRelationshipCompact
     */
    contributionWeight?: number;
}


/**
 * @export
 */
export const GoalRelationshipCompactResourceSubtypeEnum = {
    Subgoal: 'subgoal',
    SupportingWork: 'supporting_work'
} as const;
export type GoalRelationshipCompactResourceSubtypeEnum = typeof GoalRelationshipCompactResourceSubtypeEnum[keyof typeof GoalRelationshipCompactResourceSubtypeEnum];


/**
 * Check if a given object implements the GoalRelationshipCompact interface.
 */
export function instanceOfGoalRelationshipCompact(value: object): value is GoalRelationshipCompact {
    return true;
}

export function GoalRelationshipCompactFromJSON(json: any): GoalRelationshipCompact {
    return GoalRelationshipCompactFromJSONTyped(json, false);
}

export function GoalRelationshipCompactFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoalRelationshipCompact {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'supportingResource': json['supporting_resource'] == null ? undefined : GoalRelationshipCompactSupportingResourceFromJSON(json['supporting_resource']),
        'contributionWeight': json['contribution_weight'] == null ? undefined : json['contribution_weight'],
    };
}

export function GoalRelationshipCompactToJSON(json: any): GoalRelationshipCompact {
    return GoalRelationshipCompactToJSONTyped(json, false);
}

export function GoalRelationshipCompactToJSONTyped(value?: Omit<GoalRelationshipCompact, 'gid'|'resource_type'|'resource_subtype'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'supporting_resource': GoalRelationshipCompactSupportingResourceToJSON(value['supportingResource']),
        'contribution_weight': value['contributionWeight'],
    };
}

