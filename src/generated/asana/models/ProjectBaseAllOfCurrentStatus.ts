/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';

/**
 * 
 * @export
 * @interface ProjectBaseAllOfCurrentStatus
 */
export interface ProjectBaseAllOfCurrentStatus {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    readonly resourceType?: string;
    /**
     * The title of the project status update.
     * @type {string}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    title?: string;
    /**
     * The text content of the status update.
     * @type {string}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    text?: string;
    /**
     * [Opt In](/docs/inputoutput-options). The text content of the status update with formatting as HTML.
     * @type {string}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    htmlText?: string;
    /**
     * The color associated with the status update.
     * @type {string}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    color?: ProjectBaseAllOfCurrentStatusColorEnum;
    /**
     * 
     * @type {UserCompact}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    author?: UserCompact;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {UserCompact}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    createdBy?: UserCompact;
    /**
     * The time at which this project status was last modified.
     * *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*
     * @type {Date}
     * @memberof ProjectBaseAllOfCurrentStatus
     */
    readonly modifiedAt?: Date;
}


/**
 * @export
 */
export const ProjectBaseAllOfCurrentStatusColorEnum = {
    Green: 'green',
    Yellow: 'yellow',
    Red: 'red',
    Blue: 'blue',
    Complete: 'complete'
} as const;
export type ProjectBaseAllOfCurrentStatusColorEnum = typeof ProjectBaseAllOfCurrentStatusColorEnum[keyof typeof ProjectBaseAllOfCurrentStatusColorEnum];


/**
 * Check if a given object implements the ProjectBaseAllOfCurrentStatus interface.
 */
export function instanceOfProjectBaseAllOfCurrentStatus(value: object): value is ProjectBaseAllOfCurrentStatus {
    return true;
}

export function ProjectBaseAllOfCurrentStatusFromJSON(json: any): ProjectBaseAllOfCurrentStatus {
    return ProjectBaseAllOfCurrentStatusFromJSONTyped(json, false);
}

export function ProjectBaseAllOfCurrentStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectBaseAllOfCurrentStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'title': json['title'] == null ? undefined : json['title'],
        'text': json['text'] == null ? undefined : json['text'],
        'htmlText': json['html_text'] == null ? undefined : json['html_text'],
        'color': json['color'] == null ? undefined : json['color'],
        'author': json['author'] == null ? undefined : UserCompactFromJSON(json['author']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'createdBy': json['created_by'] == null ? undefined : UserCompactFromJSON(json['created_by']),
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
    };
}

export function ProjectBaseAllOfCurrentStatusToJSON(json: any): ProjectBaseAllOfCurrentStatus {
    return ProjectBaseAllOfCurrentStatusToJSONTyped(json, false);
}

export function ProjectBaseAllOfCurrentStatusToJSONTyped(value?: Omit<ProjectBaseAllOfCurrentStatus, 'gid'|'resource_type'|'created_at'|'modified_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'text': value['text'],
        'html_text': value['htmlText'],
        'color': value['color'],
        'author': UserCompactToJSON(value['author']),
        'created_by': UserCompactToJSON(value['createdBy']),
    };
}

