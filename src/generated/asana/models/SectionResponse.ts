/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { ProjectCompact } from './ProjectCompact.js';
import {
    ProjectCompactFromJSON,
    ProjectCompactFromJSONTyped,
    ProjectCompactToJSON,
    ProjectCompactToJSONTyped,
} from './ProjectCompact.js';

/**
 * 
 * @export
 * @interface SectionResponse
 */
export interface SectionResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof SectionResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof SectionResponse
     */
    readonly resourceType?: string;
    /**
     * The name of the section (i.e. the text displayed as the section header).
     * @type {string}
     * @memberof SectionResponse
     */
    name?: string;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof SectionResponse
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {ProjectCompact}
     * @memberof SectionResponse
     */
    project?: ProjectCompact;
    /**
     * *Deprecated - please use project instead*
     * @type {Array<ProjectCompact>}
     * @memberof SectionResponse
     */
    readonly projects?: Array<ProjectCompact>;
}

/**
 * Check if a given object implements the SectionResponse interface.
 */
export function instanceOfSectionResponse(value: object): value is SectionResponse {
    return true;
}

export function SectionResponseFromJSON(json: any): SectionResponse {
    return SectionResponseFromJSONTyped(json, false);
}

export function SectionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): SectionResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'project': json['project'] == null ? undefined : ProjectCompactFromJSON(json['project']),
        'projects': json['projects'] == null ? undefined : ((json['projects'] as Array<any>).map(ProjectCompactFromJSON)),
    };
}

export function SectionResponseToJSON(json: any): SectionResponse {
    return SectionResponseToJSONTyped(json, false);
}

export function SectionResponseToJSONTyped(value?: Omit<SectionResponse, 'gid'|'resource_type'|'created_at'|'projects'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'project': ProjectCompactToJSON(value['project']),
    };
}

