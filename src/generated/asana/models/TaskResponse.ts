/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { TagCompact } from './TagCompact.js';
import {
    TagCompactFromJSON,
    TagCompactFromJSONTyped,
    TagCompactToJSON,
    TagCompactToJSONTyped,
} from './TagCompact.js';
import type { TaskCompactCreatedBy } from './TaskCompactCreatedBy.js';
import {
    TaskCompactCreatedByFromJSON,
    TaskCompactCreatedByFromJSONTyped,
    TaskCompactCreatedByToJSON,
    TaskCompactCreatedByToJSONTyped,
} from './TaskCompactCreatedBy.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';
import type { AsanaResource } from './AsanaResource.js';
import {
    AsanaResourceFromJSON,
    AsanaResourceFromJSONTyped,
    AsanaResourceToJSON,
    AsanaResourceToJSONTyped,
} from './AsanaResource.js';
import type { TaskResponseAllOfAssigneeSection } from './TaskResponseAllOfAssigneeSection.js';
import {
    TaskResponseAllOfAssigneeSectionFromJSON,
    TaskResponseAllOfAssigneeSectionFromJSONTyped,
    TaskResponseAllOfAssigneeSectionToJSON,
    TaskResponseAllOfAssigneeSectionToJSONTyped,
} from './TaskResponseAllOfAssigneeSection.js';
import type { CustomTypeStatusOptionCompact } from './CustomTypeStatusOptionCompact.js';
import {
    CustomTypeStatusOptionCompactFromJSON,
    CustomTypeStatusOptionCompactFromJSONTyped,
    CustomTypeStatusOptionCompactToJSON,
    CustomTypeStatusOptionCompactToJSONTyped,
} from './CustomTypeStatusOptionCompact.js';
import type { CustomTypeCompact } from './CustomTypeCompact.js';
import {
    CustomTypeCompactFromJSON,
    CustomTypeCompactFromJSONTyped,
    CustomTypeCompactToJSON,
    CustomTypeCompactToJSONTyped,
} from './CustomTypeCompact.js';
import type { Like } from './Like.js';
import {
    LikeFromJSON,
    LikeFromJSONTyped,
    LikeToJSON,
    LikeToJSONTyped,
} from './Like.js';
import type { ProjectCompact } from './ProjectCompact.js';
import {
    ProjectCompactFromJSON,
    ProjectCompactFromJSONTyped,
    ProjectCompactToJSON,
    ProjectCompactToJSONTyped,
} from './ProjectCompact.js';
import type { TaskResponseAllOfWorkspace } from './TaskResponseAllOfWorkspace.js';
import {
    TaskResponseAllOfWorkspaceFromJSON,
    TaskResponseAllOfWorkspaceFromJSONTyped,
    TaskResponseAllOfWorkspaceToJSON,
    TaskResponseAllOfWorkspaceToJSONTyped,
} from './TaskResponseAllOfWorkspace.js';
import type { TaskBaseAllOfExternal } from './TaskBaseAllOfExternal.js';
import {
    TaskBaseAllOfExternalFromJSON,
    TaskBaseAllOfExternalFromJSONTyped,
    TaskBaseAllOfExternalToJSON,
    TaskBaseAllOfExternalToJSONTyped,
} from './TaskBaseAllOfExternal.js';
import type { TaskResponseAllOfParent } from './TaskResponseAllOfParent.js';
import {
    TaskResponseAllOfParentFromJSON,
    TaskResponseAllOfParentFromJSONTyped,
    TaskResponseAllOfParentToJSON,
    TaskResponseAllOfParentToJSONTyped,
} from './TaskResponseAllOfParent.js';
import type { CustomFieldResponse } from './CustomFieldResponse.js';
import {
    CustomFieldResponseFromJSON,
    CustomFieldResponseFromJSONTyped,
    CustomFieldResponseToJSON,
    CustomFieldResponseToJSONTyped,
} from './CustomFieldResponse.js';
import type { TaskBaseAllOfMemberships } from './TaskBaseAllOfMemberships.js';
import {
    TaskBaseAllOfMembershipsFromJSON,
    TaskBaseAllOfMembershipsFromJSONTyped,
    TaskBaseAllOfMembershipsToJSON,
    TaskBaseAllOfMembershipsToJSONTyped,
} from './TaskBaseAllOfMemberships.js';

/**
 * 
 * @export
 * @interface TaskResponse
 */
export interface TaskResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof TaskResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof TaskResponse
     */
    readonly resourceType?: string;
    /**
     * Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
     * @type {string}
     * @memberof TaskResponse
     */
    name?: string;
    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     * The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
     * @type {string}
     * @memberof TaskResponse
     */
    resourceSubtype?: TaskResponseResourceSubtypeEnum;
    /**
     * 
     * @type {TaskCompactCreatedBy}
     * @memberof TaskResponse
     */
    createdBy?: TaskCompactCreatedBy;
    /**
     * *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
     * @type {string}
     * @memberof TaskResponse
     */
    approvalStatus?: TaskResponseApprovalStatusEnum;
    /**
     * *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
     * @type {string}
     * @memberof TaskResponse
     */
    assigneeStatus?: TaskResponseAssigneeStatusEnum;
    /**
     * True if the task is currently marked complete, false if not.
     * @type {boolean}
     * @memberof TaskResponse
     */
    completed?: boolean;
    /**
     * The time at which this task was completed, or null if the task is incomplete.
     * @type {Date}
     * @memberof TaskResponse
     */
    readonly completedAt?: Date | null;
    /**
     * 
     * @type {UserCompact}
     * @memberof TaskResponse
     */
    readonly completedBy?: UserCompact | null;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof TaskResponse
     */
    readonly createdAt?: Date;
    /**
     * [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
     * @type {Array<AsanaResource>}
     * @memberof TaskResponse
     */
    readonly dependencies?: Array<AsanaResource>;
    /**
     * [Opt In](/docs/inputoutput-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
     * @type {Array<AsanaResource>}
     * @memberof TaskResponse
     */
    readonly dependents?: Array<AsanaResource>;
    /**
     * The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
     * @type {Date}
     * @memberof TaskResponse
     */
    dueAt?: Date | null;
    /**
     * The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.
     * @type {Date}
     * @memberof TaskResponse
     */
    dueOn?: Date | null;
    /**
     * 
     * @type {TaskBaseAllOfExternal}
     * @memberof TaskResponse
     */
    external?: TaskBaseAllOfExternal;
    /**
     * [Opt In](/docs/inputoutput-options). The notes of the text with formatting as HTML.
     * @type {string}
     * @memberof TaskResponse
     */
    htmlNotes?: string;
    /**
     * *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
     * @type {boolean}
     * @memberof TaskResponse
     */
    readonly hearted?: boolean;
    /**
     * *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
     * @type {Array<Like>}
     * @memberof TaskResponse
     */
    readonly hearts?: Array<Like>;
    /**
     * [Opt In](/docs/inputoutput-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/reference/sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.
     * @type {boolean}
     * @memberof TaskResponse
     */
    readonly isRenderedAsSeparator?: boolean;
    /**
     * True if the task is liked by the authorized user, false if not.
     * @type {boolean}
     * @memberof TaskResponse
     */
    liked?: boolean;
    /**
     * Array of likes for users who have liked this task.
     * @type {Array<Like>}
     * @memberof TaskResponse
     */
    readonly likes?: Array<Like>;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>projects:read</code>, <code>project_sections:read</code></p>
     * 
     * *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.
     * @type {Array<TaskBaseAllOfMemberships>}
     * @memberof TaskResponse
     */
    readonly memberships?: Array<TaskBaseAllOfMemberships>;
    /**
     * The time at which this task was last modified.
     * 
     * The following conditions will change `modified_at`:
     * 
     * - story is created on a task
     * - story is trashed on a task
     * - attachment is trashed on a task
     * - task is assigned or unassigned
     * - custom field value is changed
     * - the task itself is trashed
     * - Or if any of the following fields are updated:
     *   - completed
     *   - name
     *   - due_date
     *   - description
     *   - attachments
     *   - items
     *   - schedule_status
     * 
     * The following conditions will _not_ change `modified_at`:
     * 
     * - moving to a new container (project, portfolio, etc)
     * - comments being added to the task (but the stories they generate
     *   _will_ affect `modified_at`)
     * @type {Date}
     * @memberof TaskResponse
     */
    readonly modifiedAt?: Date;
    /**
     * Free-form textual information associated with the task (i.e. its description).
     * @type {string}
     * @memberof TaskResponse
     */
    notes?: string;
    /**
     * *Deprecated - please use likes instead* The number of users who have hearted this task.
     * @type {number}
     * @memberof TaskResponse
     */
    readonly numHearts?: number;
    /**
     * The number of users who have liked this task.
     * @type {number}
     * @memberof TaskResponse
     */
    readonly numLikes?: number;
    /**
     * [Opt In](/docs/inputoutput-options). The number of subtasks on this task.
     * 
     * @type {number}
     * @memberof TaskResponse
     */
    readonly numSubtasks?: number;
    /**
     * Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`.
     * *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*
     * @type {Date}
     * @memberof TaskResponse
     */
    startAt?: Date | null;
    /**
     * The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`.
     * *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
     * @type {Date}
     * @memberof TaskResponse
     */
    startOn?: Date | null;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>time_tracking_entries:read</code></p>
     * 
     * This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
     * @type {number}
     * @memberof TaskResponse
     */
    readonly actualTimeMinutes?: number | null;
    /**
     * 
     * @type {UserCompact}
     * @memberof TaskResponse
     */
    assignee?: UserCompact | null;
    /**
     * 
     * @type {TaskResponseAllOfAssigneeSection}
     * @memberof TaskResponse
     */
    assigneeSection?: TaskResponseAllOfAssigneeSection;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>custom_fields:read</code></p>
     * 
     * Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field_gid` endpoint.
     * @type {Array<CustomFieldResponse>}
     * @memberof TaskResponse
     */
    readonly customFields?: Array<CustomFieldResponse>;
    /**
     * 
     * @type {CustomTypeCompact}
     * @memberof TaskResponse
     */
    customType?: CustomTypeCompact | null;
    /**
     * 
     * @type {CustomTypeStatusOptionCompact}
     * @memberof TaskResponse
     */
    customTypeStatusOption?: CustomTypeStatusOptionCompact | null;
    /**
     * Array of users following this task.
     * @type {Array<UserCompact>}
     * @memberof TaskResponse
     */
    readonly followers?: Array<UserCompact>;
    /**
     * 
     * @type {TaskResponseAllOfParent}
     * @memberof TaskResponse
     */
    parent?: TaskResponseAllOfParent;
    /**
     * *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.
     * @type {Array<ProjectCompact>}
     * @memberof TaskResponse
     */
    readonly projects?: Array<ProjectCompact>;
    /**
     * Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.
     * @type {Array<TagCompact>}
     * @memberof TaskResponse
     */
    readonly tags?: Array<TagCompact>;
    /**
     * 
     * @type {TaskResponseAllOfWorkspace}
     * @memberof TaskResponse
     */
    workspace?: TaskResponseAllOfWorkspace;
    /**
     * A url that points directly to the object within Asana.
     * @type {string}
     * @memberof TaskResponse
     */
    readonly permalinkUrl?: string;
}


/**
 * @export
 */
export const TaskResponseResourceSubtypeEnum = {
    DefaultTask: 'default_task',
    Milestone: 'milestone',
    Approval: 'approval'
} as const;
export type TaskResponseResourceSubtypeEnum = typeof TaskResponseResourceSubtypeEnum[keyof typeof TaskResponseResourceSubtypeEnum];

/**
 * @export
 */
export const TaskResponseApprovalStatusEnum = {
    Pending: 'pending',
    Approved: 'approved',
    Rejected: 'rejected',
    ChangesRequested: 'changes_requested'
} as const;
export type TaskResponseApprovalStatusEnum = typeof TaskResponseApprovalStatusEnum[keyof typeof TaskResponseApprovalStatusEnum];

/**
 * @export
 */
export const TaskResponseAssigneeStatusEnum = {
    Today: 'today',
    Upcoming: 'upcoming',
    Later: 'later',
    New: 'new',
    Inbox: 'inbox'
} as const;
export type TaskResponseAssigneeStatusEnum = typeof TaskResponseAssigneeStatusEnum[keyof typeof TaskResponseAssigneeStatusEnum];


/**
 * Check if a given object implements the TaskResponse interface.
 */
export function instanceOfTaskResponse(value: object): value is TaskResponse {
    return true;
}

export function TaskResponseFromJSON(json: any): TaskResponse {
    return TaskResponseFromJSONTyped(json, false);
}

export function TaskResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'createdBy': json['created_by'] == null ? undefined : TaskCompactCreatedByFromJSON(json['created_by']),
        'approvalStatus': json['approval_status'] == null ? undefined : json['approval_status'],
        'assigneeStatus': json['assignee_status'] == null ? undefined : json['assignee_status'],
        'completed': json['completed'] == null ? undefined : json['completed'],
        'completedAt': json['completed_at'] == null ? undefined : (new Date(json['completed_at'])),
        'completedBy': json['completed_by'] == null ? undefined : UserCompactFromJSON(json['completed_by']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'dependencies': json['dependencies'] == null ? undefined : ((json['dependencies'] as Array<any>).map(AsanaResourceFromJSON)),
        'dependents': json['dependents'] == null ? undefined : ((json['dependents'] as Array<any>).map(AsanaResourceFromJSON)),
        'dueAt': json['due_at'] == null ? undefined : (new Date(json['due_at'])),
        'dueOn': json['due_on'] == null ? undefined : (new Date(json['due_on'])),
        'external': json['external'] == null ? undefined : TaskBaseAllOfExternalFromJSON(json['external']),
        'htmlNotes': json['html_notes'] == null ? undefined : json['html_notes'],
        'hearted': json['hearted'] == null ? undefined : json['hearted'],
        'hearts': json['hearts'] == null ? undefined : ((json['hearts'] as Array<any>).map(LikeFromJSON)),
        'isRenderedAsSeparator': json['is_rendered_as_separator'] == null ? undefined : json['is_rendered_as_separator'],
        'liked': json['liked'] == null ? undefined : json['liked'],
        'likes': json['likes'] == null ? undefined : ((json['likes'] as Array<any>).map(LikeFromJSON)),
        'memberships': json['memberships'] == null ? undefined : ((json['memberships'] as Array<any>).map(TaskBaseAllOfMembershipsFromJSON)),
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'notes': json['notes'] == null ? undefined : json['notes'],
        'numHearts': json['num_hearts'] == null ? undefined : json['num_hearts'],
        'numLikes': json['num_likes'] == null ? undefined : json['num_likes'],
        'numSubtasks': json['num_subtasks'] == null ? undefined : json['num_subtasks'],
        'startAt': json['start_at'] == null ? undefined : (new Date(json['start_at'])),
        'startOn': json['start_on'] == null ? undefined : (new Date(json['start_on'])),
        'actualTimeMinutes': json['actual_time_minutes'] == null ? undefined : json['actual_time_minutes'],
        'assignee': json['assignee'] == null ? undefined : UserCompactFromJSON(json['assignee']),
        'assigneeSection': json['assignee_section'] == null ? undefined : TaskResponseAllOfAssigneeSectionFromJSON(json['assignee_section']),
        'customFields': json['custom_fields'] == null ? undefined : ((json['custom_fields'] as Array<any>).map(CustomFieldResponseFromJSON)),
        'customType': json['custom_type'] == null ? undefined : CustomTypeCompactFromJSON(json['custom_type']),
        'customTypeStatusOption': json['custom_type_status_option'] == null ? undefined : CustomTypeStatusOptionCompactFromJSON(json['custom_type_status_option']),
        'followers': json['followers'] == null ? undefined : ((json['followers'] as Array<any>).map(UserCompactFromJSON)),
        'parent': json['parent'] == null ? undefined : TaskResponseAllOfParentFromJSON(json['parent']),
        'projects': json['projects'] == null ? undefined : ((json['projects'] as Array<any>).map(ProjectCompactFromJSON)),
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagCompactFromJSON)),
        'workspace': json['workspace'] == null ? undefined : TaskResponseAllOfWorkspaceFromJSON(json['workspace']),
        'permalinkUrl': json['permalink_url'] == null ? undefined : json['permalink_url'],
    };
}

export function TaskResponseToJSON(json: any): TaskResponse {
    return TaskResponseToJSONTyped(json, false);
}

export function TaskResponseToJSONTyped(value?: Omit<TaskResponse, 'gid'|'resource_type'|'completed_at'|'completed_by'|'created_at'|'dependencies'|'dependents'|'hearted'|'hearts'|'is_rendered_as_separator'|'likes'|'memberships'|'modified_at'|'num_hearts'|'num_likes'|'num_subtasks'|'actual_time_minutes'|'custom_fields'|'followers'|'projects'|'tags'|'permalink_url'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'resource_subtype': value['resourceSubtype'],
        'created_by': TaskCompactCreatedByToJSON(value['createdBy']),
        'approval_status': value['approvalStatus'],
        'assignee_status': value['assigneeStatus'],
        'completed': value['completed'],
        'due_at': value['dueAt'] === null ? null : ((value['dueAt'] as any)?.toISOString()),
        'due_on': value['dueOn'] === null ? null : ((value['dueOn'] as any)?.toISOString().substring(0,10)),
        'external': TaskBaseAllOfExternalToJSON(value['external']),
        'html_notes': value['htmlNotes'],
        'liked': value['liked'],
        'notes': value['notes'],
        'start_at': value['startAt'] === null ? null : ((value['startAt'] as any)?.toISOString()),
        'start_on': value['startOn'] === null ? null : ((value['startOn'] as any)?.toISOString().substring(0,10)),
        'assignee': UserCompactToJSON(value['assignee']),
        'assignee_section': TaskResponseAllOfAssigneeSectionToJSON(value['assigneeSection']),
        'custom_type': CustomTypeCompactToJSON(value['customType']),
        'custom_type_status_option': CustomTypeStatusOptionCompactToJSON(value['customTypeStatusOption']),
        'parent': TaskResponseAllOfParentToJSON(value['parent']),
        'workspace': TaskResponseAllOfWorkspaceToJSON(value['workspace']),
    };
}

