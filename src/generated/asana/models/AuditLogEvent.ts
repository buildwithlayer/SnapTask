/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { AuditLogEventActor } from './AuditLogEventActor.js';
import {
    AuditLogEventActorFromJSON,
    AuditLogEventActorFromJSONTyped,
    AuditLogEventActorToJSON,
    AuditLogEventActorToJSONTyped,
} from './AuditLogEventActor.js';
import type { AuditLogEventDetails } from './AuditLogEventDetails.js';
import {
    AuditLogEventDetailsFromJSON,
    AuditLogEventDetailsFromJSONTyped,
    AuditLogEventDetailsToJSON,
    AuditLogEventDetailsToJSONTyped,
} from './AuditLogEventDetails.js';
import type { AuditLogEventResource } from './AuditLogEventResource.js';
import {
    AuditLogEventResourceFromJSON,
    AuditLogEventResourceFromJSONTyped,
    AuditLogEventResourceToJSON,
    AuditLogEventResourceToJSONTyped,
} from './AuditLogEventResource.js';
import type { AuditLogEventContext } from './AuditLogEventContext.js';
import {
    AuditLogEventContextFromJSON,
    AuditLogEventContextFromJSONTyped,
    AuditLogEventContextToJSON,
    AuditLogEventContextToJSONTyped,
} from './AuditLogEventContext.js';

/**
 * An object representing a single event within an Asana domain.
 * 
 * Every audit log event is comprised of an `event_type`, `actor`, `resource`, and `context`. Some events will include additional metadata about the event under `details`. See our [currently supported list of events](/docs/audit-log-events#supported-audit-log-events) for more details.
 * @export
 * @interface AuditLogEvent
 */
export interface AuditLogEvent {
    /**
     * Globally unique identifier of the `AuditLogEvent`, as a string.
     * @type {string}
     * @memberof AuditLogEvent
     */
    gid?: string;
    /**
     * The time the event was created.
     * @type {Date}
     * @memberof AuditLogEvent
     */
    createdAt?: Date;
    /**
     * The type of the event.
     * @type {string}
     * @memberof AuditLogEvent
     */
    eventType?: string;
    /**
     * The category that this `event_type` belongs to.
     * @type {string}
     * @memberof AuditLogEvent
     */
    eventCategory?: string;
    /**
     * 
     * @type {AuditLogEventActor}
     * @memberof AuditLogEvent
     */
    actor?: AuditLogEventActor;
    /**
     * 
     * @type {AuditLogEventResource}
     * @memberof AuditLogEvent
     */
    resource?: AuditLogEventResource;
    /**
     * 
     * @type {AuditLogEventDetails}
     * @memberof AuditLogEvent
     */
    details?: AuditLogEventDetails;
    /**
     * 
     * @type {AuditLogEventContext}
     * @memberof AuditLogEvent
     */
    context?: AuditLogEventContext;
}

/**
 * Check if a given object implements the AuditLogEvent interface.
 */
export function instanceOfAuditLogEvent(value: object): value is AuditLogEvent {
    return true;
}

export function AuditLogEventFromJSON(json: any): AuditLogEvent {
    return AuditLogEventFromJSONTyped(json, false);
}

export function AuditLogEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLogEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'eventType': json['event_type'] == null ? undefined : json['event_type'],
        'eventCategory': json['event_category'] == null ? undefined : json['event_category'],
        'actor': json['actor'] == null ? undefined : AuditLogEventActorFromJSON(json['actor']),
        'resource': json['resource'] == null ? undefined : AuditLogEventResourceFromJSON(json['resource']),
        'details': json['details'] == null ? undefined : AuditLogEventDetailsFromJSON(json['details']),
        'context': json['context'] == null ? undefined : AuditLogEventContextFromJSON(json['context']),
    };
}

export function AuditLogEventToJSON(json: any): AuditLogEvent {
    return AuditLogEventToJSONTyped(json, false);
}

export function AuditLogEventToJSONTyped(value?: AuditLogEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'gid': value['gid'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'event_type': value['eventType'],
        'event_category': value['eventCategory'],
        'actor': AuditLogEventActorToJSON(value['actor']),
        'resource': AuditLogEventResourceToJSON(value['resource']),
        'details': AuditLogEventDetailsToJSON(value['details']),
        'context': AuditLogEventContextToJSON(value['context']),
    };
}

