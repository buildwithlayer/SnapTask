/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GoalResponseAllOfOwner } from './GoalResponseAllOfOwner.js';
import {
    GoalResponseAllOfOwnerFromJSON,
    GoalResponseAllOfOwnerFromJSONTyped,
    GoalResponseAllOfOwnerToJSON,
    GoalResponseAllOfOwnerToJSONTyped,
} from './GoalResponseAllOfOwner.js';
import type { Like } from './Like.js';
import {
    LikeFromJSON,
    LikeFromJSONTyped,
    LikeToJSON,
    LikeToJSONTyped,
} from './Like.js';
import type { GoalResponseAllOfWorkspace } from './GoalResponseAllOfWorkspace.js';
import {
    GoalResponseAllOfWorkspaceFromJSON,
    GoalResponseAllOfWorkspaceFromJSONTyped,
    GoalResponseAllOfWorkspaceToJSON,
    GoalResponseAllOfWorkspaceToJSONTyped,
} from './GoalResponseAllOfWorkspace.js';
import type { GoalResponseAllOfTimePeriod } from './GoalResponseAllOfTimePeriod.js';
import {
    GoalResponseAllOfTimePeriodFromJSON,
    GoalResponseAllOfTimePeriodFromJSONTyped,
    GoalResponseAllOfTimePeriodToJSON,
    GoalResponseAllOfTimePeriodToJSONTyped,
} from './GoalResponseAllOfTimePeriod.js';
import type { StatusUpdateCompact } from './StatusUpdateCompact.js';
import {
    StatusUpdateCompactFromJSON,
    StatusUpdateCompactFromJSONTyped,
    StatusUpdateCompactToJSON,
    StatusUpdateCompactToJSONTyped,
} from './StatusUpdateCompact.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';
import type { GoalResponseAllOfTeam } from './GoalResponseAllOfTeam.js';
import {
    GoalResponseAllOfTeamFromJSON,
    GoalResponseAllOfTeamFromJSONTyped,
    GoalResponseAllOfTeamToJSON,
    GoalResponseAllOfTeamToJSONTyped,
} from './GoalResponseAllOfTeam.js';
import type { GoalResponseAllOfMetric } from './GoalResponseAllOfMetric.js';
import {
    GoalResponseAllOfMetricFromJSON,
    GoalResponseAllOfMetricFromJSONTyped,
    GoalResponseAllOfMetricToJSON,
    GoalResponseAllOfMetricToJSONTyped,
} from './GoalResponseAllOfMetric.js';

/**
 * 
 * @export
 * @interface GoalResponse
 */
export interface GoalResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof GoalResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof GoalResponse
     */
    readonly resourceType?: string;
    /**
     * The name of the goal.
     * @type {string}
     * @memberof GoalResponse
     */
    name?: string;
    /**
     * The notes of the goal with formatting as HTML.
     * @type {string}
     * @memberof GoalResponse
     */
    htmlNotes?: string;
    /**
     * Free-form textual information associated with the goal (i.e. its description).
     * @type {string}
     * @memberof GoalResponse
     */
    notes?: string;
    /**
     * The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
     * @type {string}
     * @memberof GoalResponse
     */
    dueOn?: string | null;
    /**
     * The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
     * @type {string}
     * @memberof GoalResponse
     */
    startOn?: string | null;
    /**
     * *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
     * @type {boolean}
     * @memberof GoalResponse
     */
    isWorkspaceLevel?: boolean;
    /**
     * True if the goal is liked by the authorized user, false if not.
     * @type {boolean}
     * @memberof GoalResponse
     */
    liked?: boolean;
    /**
     * Array of likes for users who have liked this goal.
     * @type {Array<Like>}
     * @memberof GoalResponse
     */
    readonly likes?: Array<Like>;
    /**
     * The number of users who have liked this goal.
     * @type {number}
     * @memberof GoalResponse
     */
    readonly numLikes?: number;
    /**
     * 
     * @type {GoalResponseAllOfTeam}
     * @memberof GoalResponse
     */
    team?: GoalResponseAllOfTeam;
    /**
     * 
     * @type {GoalResponseAllOfWorkspace}
     * @memberof GoalResponse
     */
    workspace?: GoalResponseAllOfWorkspace;
    /**
     * Array of users who are members of this goal.
     * @type {Array<UserCompact>}
     * @memberof GoalResponse
     */
    followers?: Array<UserCompact>;
    /**
     * 
     * @type {GoalResponseAllOfTimePeriod}
     * @memberof GoalResponse
     */
    timePeriod?: GoalResponseAllOfTimePeriod;
    /**
     * 
     * @type {GoalResponseAllOfMetric}
     * @memberof GoalResponse
     */
    metric?: GoalResponseAllOfMetric;
    /**
     * 
     * @type {GoalResponseAllOfOwner}
     * @memberof GoalResponse
     */
    owner?: GoalResponseAllOfOwner;
    /**
     * The latest `status_update` posted to this goal.
     * @type {StatusUpdateCompact}
     * @memberof GoalResponse
     */
    currentStatusUpdate?: StatusUpdateCompact | null;
    /**
     * The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
     * *Note* you can only write to this property if `metric` is set.
     * @type {string}
     * @memberof GoalResponse
     */
    readonly status?: string | null;
}

/**
 * Check if a given object implements the GoalResponse interface.
 */
export function instanceOfGoalResponse(value: object): value is GoalResponse {
    return true;
}

export function GoalResponseFromJSON(json: any): GoalResponse {
    return GoalResponseFromJSONTyped(json, false);
}

export function GoalResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoalResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'htmlNotes': json['html_notes'] == null ? undefined : json['html_notes'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'dueOn': json['due_on'] == null ? undefined : json['due_on'],
        'startOn': json['start_on'] == null ? undefined : json['start_on'],
        'isWorkspaceLevel': json['is_workspace_level'] == null ? undefined : json['is_workspace_level'],
        'liked': json['liked'] == null ? undefined : json['liked'],
        'likes': json['likes'] == null ? undefined : ((json['likes'] as Array<any>).map(LikeFromJSON)),
        'numLikes': json['num_likes'] == null ? undefined : json['num_likes'],
        'team': json['team'] == null ? undefined : GoalResponseAllOfTeamFromJSON(json['team']),
        'workspace': json['workspace'] == null ? undefined : GoalResponseAllOfWorkspaceFromJSON(json['workspace']),
        'followers': json['followers'] == null ? undefined : ((json['followers'] as Array<any>).map(UserCompactFromJSON)),
        'timePeriod': json['time_period'] == null ? undefined : GoalResponseAllOfTimePeriodFromJSON(json['time_period']),
        'metric': json['metric'] == null ? undefined : GoalResponseAllOfMetricFromJSON(json['metric']),
        'owner': json['owner'] == null ? undefined : GoalResponseAllOfOwnerFromJSON(json['owner']),
        'currentStatusUpdate': json['current_status_update'] == null ? undefined : StatusUpdateCompactFromJSON(json['current_status_update']),
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function GoalResponseToJSON(json: any): GoalResponse {
    return GoalResponseToJSONTyped(json, false);
}

export function GoalResponseToJSONTyped(value?: Omit<GoalResponse, 'gid'|'resource_type'|'likes'|'num_likes'|'status'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'html_notes': value['htmlNotes'],
        'notes': value['notes'],
        'due_on': value['dueOn'],
        'start_on': value['startOn'],
        'is_workspace_level': value['isWorkspaceLevel'],
        'liked': value['liked'],
        'team': GoalResponseAllOfTeamToJSON(value['team']),
        'workspace': GoalResponseAllOfWorkspaceToJSON(value['workspace']),
        'followers': value['followers'] == null ? undefined : ((value['followers'] as Array<any>).map(UserCompactToJSON)),
        'time_period': GoalResponseAllOfTimePeriodToJSON(value['timePeriod']),
        'metric': GoalResponseAllOfMetricToJSON(value['metric']),
        'owner': GoalResponseAllOfOwnerToJSON(value['owner']),
        'current_status_update': StatusUpdateCompactToJSON(value['currentStatusUpdate']),
    };
}

