/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * A story represents an activity associated with an object in the Asana system.
 * @export
 * @interface StoryBase
 */
export interface StoryBase {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof StoryBase
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof StoryBase
     */
    readonly resourceType?: string;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof StoryBase
     */
    readonly createdAt?: Date;
    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     * @type {string}
     * @memberof StoryBase
     */
    readonly resourceSubtype?: string;
    /**
     * The plain text of the comment to add. Cannot be used with html_text.
     * @type {string}
     * @memberof StoryBase
     */
    text?: string;
    /**
     * [Opt In](/docs/inputoutput-options). HTML formatted text for a comment. This will not include the name of the creator.
     * @type {string}
     * @memberof StoryBase
     */
    htmlText?: string;
    /**
     * *Conditional*. Whether the story should be pinned on the resource.
     * @type {boolean}
     * @memberof StoryBase
     */
    isPinned?: boolean;
    /**
     * The name of the sticker in this story. `null` if there is no sticker.
     * @type {string}
     * @memberof StoryBase
     */
    stickerName?: StoryBaseStickerNameEnum;
}


/**
 * @export
 */
export const StoryBaseStickerNameEnum = {
    GreenCheckmark: 'green_checkmark',
    PeopleDancing: 'people_dancing',
    DancingUnicorn: 'dancing_unicorn',
    Heart: 'heart',
    PartyPopper: 'party_popper',
    PeopleWavingFlags: 'people_waving_flags',
    SplashingNarwhal: 'splashing_narwhal',
    Trophy: 'trophy',
    YetiRidingUnicorn: 'yeti_riding_unicorn',
    CelebratingPeople: 'celebrating_people',
    DeterminedClimbers: 'determined_climbers',
    PhoenixSpreadingLove: 'phoenix_spreading_love'
} as const;
export type StoryBaseStickerNameEnum = typeof StoryBaseStickerNameEnum[keyof typeof StoryBaseStickerNameEnum];


/**
 * Check if a given object implements the StoryBase interface.
 */
export function instanceOfStoryBase(value: object): value is StoryBase {
    return true;
}

export function StoryBaseFromJSON(json: any): StoryBase {
    return StoryBaseFromJSONTyped(json, false);
}

export function StoryBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoryBase {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'text': json['text'] == null ? undefined : json['text'],
        'htmlText': json['html_text'] == null ? undefined : json['html_text'],
        'isPinned': json['is_pinned'] == null ? undefined : json['is_pinned'],
        'stickerName': json['sticker_name'] == null ? undefined : json['sticker_name'],
    };
}

export function StoryBaseToJSON(json: any): StoryBase {
    return StoryBaseToJSONTyped(json, false);
}

export function StoryBaseToJSONTyped(value?: Omit<StoryBase, 'gid'|'resource_type'|'created_at'|'resource_subtype'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'text': value['text'],
        'html_text': value['htmlText'],
        'is_pinned': value['isPinned'],
        'sticker_name': value['stickerName'],
    };
}

