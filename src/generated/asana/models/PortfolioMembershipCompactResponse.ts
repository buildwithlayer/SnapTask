/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { PortfolioCompact } from './PortfolioCompact.js';
import {
    PortfolioCompactFromJSON,
    PortfolioCompactFromJSONTyped,
    PortfolioCompactToJSON,
    PortfolioCompactToJSONTyped,
} from './PortfolioCompact.js';
import type { MemberCompact } from './MemberCompact.js';
import {
    MemberCompactFromJSON,
    MemberCompactFromJSONTyped,
    MemberCompactToJSON,
    MemberCompactToJSONTyped,
} from './MemberCompact.js';

/**
 * 
 * @export
 * @interface PortfolioMembershipCompactResponse
 */
export interface PortfolioMembershipCompactResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof PortfolioMembershipCompactResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof PortfolioMembershipCompactResponse
     */
    resourceType?: string;
    /**
     * 
     * @type {PortfolioCompact}
     * @memberof PortfolioMembershipCompactResponse
     */
    parent?: PortfolioCompact;
    /**
     * 
     * @type {MemberCompact}
     * @memberof PortfolioMembershipCompactResponse
     */
    member?: MemberCompact;
    /**
     * Whether the member has admin, editor, or viewer access to the portfolio. Portfolios do not support commenter access yet.
     * @type {string}
     * @memberof PortfolioMembershipCompactResponse
     */
    readonly accessLevel?: PortfolioMembershipCompactResponseAccessLevelEnum;
    /**
     * Type of the membership.
     * @type {string}
     * @memberof PortfolioMembershipCompactResponse
     */
    resourceSubtype?: string;
}


/**
 * @export
 */
export const PortfolioMembershipCompactResponseAccessLevelEnum = {
    Admin: 'admin',
    Editor: 'editor',
    Viewer: 'viewer'
} as const;
export type PortfolioMembershipCompactResponseAccessLevelEnum = typeof PortfolioMembershipCompactResponseAccessLevelEnum[keyof typeof PortfolioMembershipCompactResponseAccessLevelEnum];


/**
 * Check if a given object implements the PortfolioMembershipCompactResponse interface.
 */
export function instanceOfPortfolioMembershipCompactResponse(value: object): value is PortfolioMembershipCompactResponse {
    return true;
}

export function PortfolioMembershipCompactResponseFromJSON(json: any): PortfolioMembershipCompactResponse {
    return PortfolioMembershipCompactResponseFromJSONTyped(json, false);
}

export function PortfolioMembershipCompactResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortfolioMembershipCompactResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'parent': json['parent'] == null ? undefined : PortfolioCompactFromJSON(json['parent']),
        'member': json['member'] == null ? undefined : MemberCompactFromJSON(json['member']),
        'accessLevel': json['access_level'] == null ? undefined : json['access_level'],
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
    };
}

export function PortfolioMembershipCompactResponseToJSON(json: any): PortfolioMembershipCompactResponse {
    return PortfolioMembershipCompactResponseToJSONTyped(json, false);
}

export function PortfolioMembershipCompactResponseToJSONTyped(value?: Omit<PortfolioMembershipCompactResponse, 'gid'|'access_level'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resource_type': value['resourceType'],
        'parent': PortfolioCompactToJSON(value['parent']),
        'member': MemberCompactToJSON(value['member']),
        'resource_subtype': value['resourceSubtype'],
    };
}

