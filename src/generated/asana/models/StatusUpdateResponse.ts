/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { StatusUpdateResponseAllOfParent } from './StatusUpdateResponseAllOfParent.js';
import {
    StatusUpdateResponseAllOfParentFromJSON,
    StatusUpdateResponseAllOfParentFromJSONTyped,
    StatusUpdateResponseAllOfParentToJSON,
    StatusUpdateResponseAllOfParentToJSONTyped,
} from './StatusUpdateResponseAllOfParent.js';
import type { Like } from './Like.js';
import {
    LikeFromJSON,
    LikeFromJSONTyped,
    LikeToJSON,
    LikeToJSONTyped,
} from './Like.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';

/**
 * 
 * @export
 * @interface StatusUpdateResponse
 */
export interface StatusUpdateResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof StatusUpdateResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof StatusUpdateResponse
     */
    readonly resourceType?: string;
    /**
     * The title of the status update.
     * @type {string}
     * @memberof StatusUpdateResponse
     */
    title?: string;
    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     * The `resource_subtype`s for `status` objects represent the type of their parent.
     * @type {string}
     * @memberof StatusUpdateResponse
     */
    readonly resourceSubtype?: StatusUpdateResponseResourceSubtypeEnum;
    /**
     * The text content of the status update.
     * @type {string}
     * @memberof StatusUpdateResponse
     */
    text: string;
    /**
     * [Opt In](/docs/inputoutput-options). The text content of the status update with formatting as HTML.
     * @type {string}
     * @memberof StatusUpdateResponse
     */
    htmlText?: string;
    /**
     * The type associated with the status update. This represents the current state of the object this object is on.
     * @type {string}
     * @memberof StatusUpdateResponse
     */
    statusType: StatusUpdateResponseStatusTypeEnum;
    /**
     * 
     * @type {UserCompact}
     * @memberof StatusUpdateResponse
     */
    author?: UserCompact;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof StatusUpdateResponse
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {UserCompact}
     * @memberof StatusUpdateResponse
     */
    createdBy?: UserCompact;
    /**
     * *Deprecated - please use liked instead* True if the status is hearted by the authorized user, false if not.
     * @type {boolean}
     * @memberof StatusUpdateResponse
     */
    readonly hearted?: boolean;
    /**
     * *Deprecated - please use likes instead* Array of likes for users who have hearted this status.
     * @type {Array<Like>}
     * @memberof StatusUpdateResponse
     */
    readonly hearts?: Array<Like>;
    /**
     * True if the status is liked by the authorized user, false if not.
     * @type {boolean}
     * @memberof StatusUpdateResponse
     */
    liked?: boolean;
    /**
     * Array of likes for users who have liked this status.
     * @type {Array<Like>}
     * @memberof StatusUpdateResponse
     */
    readonly likes?: Array<Like>;
    /**
     * The time at which this project status was last modified.
     * *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the status.*
     * @type {Date}
     * @memberof StatusUpdateResponse
     */
    readonly modifiedAt?: Date;
    /**
     * *Deprecated - please use likes instead* The number of users who have hearted this status.
     * @type {number}
     * @memberof StatusUpdateResponse
     */
    readonly numHearts?: number;
    /**
     * The number of users who have liked this status.
     * @type {number}
     * @memberof StatusUpdateResponse
     */
    readonly numLikes?: number;
    /**
     * 
     * @type {StatusUpdateResponseAllOfParent}
     * @memberof StatusUpdateResponse
     */
    parent?: StatusUpdateResponseAllOfParent;
}


/**
 * @export
 */
export const StatusUpdateResponseResourceSubtypeEnum = {
    ProjectStatusUpdate: 'project_status_update',
    PortfolioStatusUpdate: 'portfolio_status_update',
    GoalStatusUpdate: 'goal_status_update'
} as const;
export type StatusUpdateResponseResourceSubtypeEnum = typeof StatusUpdateResponseResourceSubtypeEnum[keyof typeof StatusUpdateResponseResourceSubtypeEnum];

/**
 * @export
 */
export const StatusUpdateResponseStatusTypeEnum = {
    OnTrack: 'on_track',
    AtRisk: 'at_risk',
    OffTrack: 'off_track',
    OnHold: 'on_hold',
    Complete: 'complete',
    Achieved: 'achieved',
    Partial: 'partial',
    Missed: 'missed',
    Dropped: 'dropped'
} as const;
export type StatusUpdateResponseStatusTypeEnum = typeof StatusUpdateResponseStatusTypeEnum[keyof typeof StatusUpdateResponseStatusTypeEnum];


/**
 * Check if a given object implements the StatusUpdateResponse interface.
 */
export function instanceOfStatusUpdateResponse(value: object): value is StatusUpdateResponse {
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('statusType' in value) || value['statusType'] === undefined) return false;
    return true;
}

export function StatusUpdateResponseFromJSON(json: any): StatusUpdateResponse {
    return StatusUpdateResponseFromJSONTyped(json, false);
}

export function StatusUpdateResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatusUpdateResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'title': json['title'] == null ? undefined : json['title'],
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'text': json['text'],
        'htmlText': json['html_text'] == null ? undefined : json['html_text'],
        'statusType': json['status_type'],
        'author': json['author'] == null ? undefined : UserCompactFromJSON(json['author']),
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'createdBy': json['created_by'] == null ? undefined : UserCompactFromJSON(json['created_by']),
        'hearted': json['hearted'] == null ? undefined : json['hearted'],
        'hearts': json['hearts'] == null ? undefined : ((json['hearts'] as Array<any>).map(LikeFromJSON)),
        'liked': json['liked'] == null ? undefined : json['liked'],
        'likes': json['likes'] == null ? undefined : ((json['likes'] as Array<any>).map(LikeFromJSON)),
        'modifiedAt': json['modified_at'] == null ? undefined : (new Date(json['modified_at'])),
        'numHearts': json['num_hearts'] == null ? undefined : json['num_hearts'],
        'numLikes': json['num_likes'] == null ? undefined : json['num_likes'],
        'parent': json['parent'] == null ? undefined : StatusUpdateResponseAllOfParentFromJSON(json['parent']),
    };
}

export function StatusUpdateResponseToJSON(json: any): StatusUpdateResponse {
    return StatusUpdateResponseToJSONTyped(json, false);
}

export function StatusUpdateResponseToJSONTyped(value?: Omit<StatusUpdateResponse, 'gid'|'resource_type'|'resource_subtype'|'created_at'|'hearted'|'hearts'|'likes'|'modified_at'|'num_hearts'|'num_likes'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'text': value['text'],
        'html_text': value['htmlText'],
        'status_type': value['statusType'],
        'author': UserCompactToJSON(value['author']),
        'created_by': UserCompactToJSON(value['createdBy']),
        'liked': value['liked'],
        'parent': StatusUpdateResponseAllOfParentToJSON(value['parent']),
    };
}

