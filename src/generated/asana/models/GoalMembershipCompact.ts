/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { GoalMembershipBaseParent } from './GoalMembershipBaseParent.js';
import {
    GoalMembershipBaseParentFromJSON,
    GoalMembershipBaseParentFromJSONTyped,
    GoalMembershipBaseParentToJSON,
    GoalMembershipBaseParentToJSONTyped,
} from './GoalMembershipBaseParent.js';
import type { GoalMembershipBaseGoal } from './GoalMembershipBaseGoal.js';
import {
    GoalMembershipBaseGoalFromJSON,
    GoalMembershipBaseGoalFromJSONTyped,
    GoalMembershipBaseGoalToJSON,
    GoalMembershipBaseGoalToJSONTyped,
} from './GoalMembershipBaseGoal.js';
import type { MemberCompact } from './MemberCompact.js';
import {
    MemberCompactFromJSON,
    MemberCompactFromJSONTyped,
    MemberCompactToJSON,
    MemberCompactToJSONTyped,
} from './MemberCompact.js';

/**
 * 
 * @export
 * @interface GoalMembershipCompact
 */
export interface GoalMembershipCompact {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof GoalMembershipCompact
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof GoalMembershipCompact
     */
    resourceType?: string;
    /**
     * The type of membership.
     * @type {string}
     * @memberof GoalMembershipCompact
     */
    readonly resourceSubtype?: string;
    /**
     * 
     * @type {MemberCompact}
     * @memberof GoalMembershipCompact
     */
    member?: MemberCompact;
    /**
     * 
     * @type {GoalMembershipBaseParent}
     * @memberof GoalMembershipCompact
     */
    parent?: GoalMembershipBaseParent;
    /**
     * *Deprecated: Describes if the member is a commenter or editor in goal.*
     * @type {string}
     * @memberof GoalMembershipCompact
     * @deprecated
     */
    role?: GoalMembershipCompactRoleEnum;
    /**
     * Describes if member is commenter or editor in goal. This is preferred over role
     * @type {string}
     * @memberof GoalMembershipCompact
     */
    accessLevel?: GoalMembershipCompactAccessLevelEnum;
    /**
     * 
     * @type {GoalMembershipBaseGoal}
     * @memberof GoalMembershipCompact
     */
    goal?: GoalMembershipBaseGoal;
    /**
     * *Deprecated: new integrations should prefer the `role` field.* Describes if the member is comment only in goal.
     * @type {boolean}
     * @memberof GoalMembershipCompact
     * @deprecated
     */
    readonly isCommenter?: boolean;
    /**
     * *Deprecated: new integrations should prefer the `role` field.* Describes if the member is editor in goal.
     * @type {boolean}
     * @memberof GoalMembershipCompact
     * @deprecated
     */
    readonly isEditor?: boolean;
}


/**
 * @export
 */
export const GoalMembershipCompactRoleEnum = {
    Commenter: 'commenter',
    Editor: 'editor'
} as const;
export type GoalMembershipCompactRoleEnum = typeof GoalMembershipCompactRoleEnum[keyof typeof GoalMembershipCompactRoleEnum];

/**
 * @export
 */
export const GoalMembershipCompactAccessLevelEnum = {
    Commenter: 'commenter',
    Editor: 'editor'
} as const;
export type GoalMembershipCompactAccessLevelEnum = typeof GoalMembershipCompactAccessLevelEnum[keyof typeof GoalMembershipCompactAccessLevelEnum];


/**
 * Check if a given object implements the GoalMembershipCompact interface.
 */
export function instanceOfGoalMembershipCompact(value: object): value is GoalMembershipCompact {
    return true;
}

export function GoalMembershipCompactFromJSON(json: any): GoalMembershipCompact {
    return GoalMembershipCompactFromJSONTyped(json, false);
}

export function GoalMembershipCompactFromJSONTyped(json: any, ignoreDiscriminator: boolean): GoalMembershipCompact {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'member': json['member'] == null ? undefined : MemberCompactFromJSON(json['member']),
        'parent': json['parent'] == null ? undefined : GoalMembershipBaseParentFromJSON(json['parent']),
        'role': json['role'] == null ? undefined : json['role'],
        'accessLevel': json['access_level'] == null ? undefined : json['access_level'],
        'goal': json['goal'] == null ? undefined : GoalMembershipBaseGoalFromJSON(json['goal']),
        'isCommenter': json['is_commenter'] == null ? undefined : json['is_commenter'],
        'isEditor': json['is_editor'] == null ? undefined : json['is_editor'],
    };
}

export function GoalMembershipCompactToJSON(json: any): GoalMembershipCompact {
    return GoalMembershipCompactToJSONTyped(json, false);
}

export function GoalMembershipCompactToJSONTyped(value?: Omit<GoalMembershipCompact, 'gid'|'resource_subtype'|'is_commenter'|'is_editor'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resource_type': value['resourceType'],
        'member': MemberCompactToJSON(value['member']),
        'parent': GoalMembershipBaseParentToJSON(value['parent']),
        'role': value['role'],
        'access_level': value['accessLevel'],
        'goal': GoalMembershipBaseGoalToJSON(value['goal']),
    };
}

