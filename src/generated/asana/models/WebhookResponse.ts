/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { WebhookResponseAllOfFilters } from './WebhookResponseAllOfFilters.js';
import {
    WebhookResponseAllOfFiltersFromJSON,
    WebhookResponseAllOfFiltersFromJSONTyped,
    WebhookResponseAllOfFiltersToJSON,
    WebhookResponseAllOfFiltersToJSONTyped,
} from './WebhookResponseAllOfFilters.js';
import type { AsanaNamedResource } from './AsanaNamedResource.js';
import {
    AsanaNamedResourceFromJSON,
    AsanaNamedResourceFromJSONTyped,
    AsanaNamedResourceToJSON,
    AsanaNamedResourceToJSONTyped,
} from './AsanaNamedResource.js';

/**
 * 
 * @export
 * @interface WebhookResponse
 */
export interface WebhookResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof WebhookResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof WebhookResponse
     */
    readonly resourceType?: string;
    /**
     * If true, the webhook will send events - if false it is considered inactive and will not generate events.
     * @type {boolean}
     * @memberof WebhookResponse
     */
    readonly active?: boolean;
    /**
     * 
     * @type {AsanaNamedResource}
     * @memberof WebhookResponse
     */
    resource?: AsanaNamedResource;
    /**
     * The URL to receive the HTTP POST.
     * @type {string}
     * @memberof WebhookResponse
     */
    readonly target?: string;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof WebhookResponse
     */
    readonly createdAt?: Date;
    /**
     * The timestamp when the webhook last received an error when sending an event to the target.
     * @type {Date}
     * @memberof WebhookResponse
     */
    readonly lastFailureAt?: Date;
    /**
     * The contents of the last error response sent to the webhook when attempting to deliver events to the target.
     * @type {string}
     * @memberof WebhookResponse
     */
    readonly lastFailureContent?: string;
    /**
     * The timestamp when the webhook last successfully sent an event to the target.
     * @type {Date}
     * @memberof WebhookResponse
     */
    readonly lastSuccessAt?: Date;
    /**
     * The number of times the webhook has retried delivery of events to the target (resets after a successful attempt).
     * @type {number}
     * @memberof WebhookResponse
     */
    readonly deliveryRetryCount?: number;
    /**
     * The timestamp after which the webhook will next attempt to deliver an event to the target.
     * @type {Date}
     * @memberof WebhookResponse
     */
    readonly nextAttemptAfter?: Date;
    /**
     * The timestamp when the webhook will be deleted if there is no successful attempt to deliver events to the target
     * @type {Date}
     * @memberof WebhookResponse
     */
    readonly failureDeletionTimestamp?: Date;
    /**
     * Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
     * @type {Array<WebhookResponseAllOfFilters>}
     * @memberof WebhookResponse
     */
    filters?: Array<WebhookResponseAllOfFilters>;
}

/**
 * Check if a given object implements the WebhookResponse interface.
 */
export function instanceOfWebhookResponse(value: object): value is WebhookResponse {
    return true;
}

export function WebhookResponseFromJSON(json: any): WebhookResponse {
    return WebhookResponseFromJSONTyped(json, false);
}

export function WebhookResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'active': json['active'] == null ? undefined : json['active'],
        'resource': json['resource'] == null ? undefined : AsanaNamedResourceFromJSON(json['resource']),
        'target': json['target'] == null ? undefined : json['target'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'lastFailureAt': json['last_failure_at'] == null ? undefined : (new Date(json['last_failure_at'])),
        'lastFailureContent': json['last_failure_content'] == null ? undefined : json['last_failure_content'],
        'lastSuccessAt': json['last_success_at'] == null ? undefined : (new Date(json['last_success_at'])),
        'deliveryRetryCount': json['delivery_retry_count'] == null ? undefined : json['delivery_retry_count'],
        'nextAttemptAfter': json['next_attempt_after'] == null ? undefined : (new Date(json['next_attempt_after'])),
        'failureDeletionTimestamp': json['failure_deletion_timestamp'] == null ? undefined : (new Date(json['failure_deletion_timestamp'])),
        'filters': json['filters'] == null ? undefined : ((json['filters'] as Array<any>).map(WebhookResponseAllOfFiltersFromJSON)),
    };
}

export function WebhookResponseToJSON(json: any): WebhookResponse {
    return WebhookResponseToJSONTyped(json, false);
}

export function WebhookResponseToJSONTyped(value?: Omit<WebhookResponse, 'gid'|'resource_type'|'active'|'target'|'created_at'|'last_failure_at'|'last_failure_content'|'last_success_at'|'delivery_retry_count'|'next_attempt_after'|'failure_deletion_timestamp'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'resource': AsanaNamedResourceToJSON(value['resource']),
        'filters': value['filters'] == null ? undefined : ((value['filters'] as Array<any>).map(WebhookResponseAllOfFiltersToJSON)),
    };
}

