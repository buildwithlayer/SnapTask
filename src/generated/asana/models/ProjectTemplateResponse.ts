/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { TeamCompact } from './TeamCompact.js';
import {
    TeamCompactFromJSON,
    TeamCompactFromJSONTyped,
    TeamCompactToJSON,
    TeamCompactToJSONTyped,
} from './TeamCompact.js';
import type { DateVariableCompact } from './DateVariableCompact.js';
import {
    DateVariableCompactFromJSON,
    DateVariableCompactFromJSONTyped,
    DateVariableCompactToJSON,
    DateVariableCompactToJSONTyped,
} from './DateVariableCompact.js';
import type { ProjectTemplateBaseAllOfOwner } from './ProjectTemplateBaseAllOfOwner.js';
import {
    ProjectTemplateBaseAllOfOwnerFromJSON,
    ProjectTemplateBaseAllOfOwnerFromJSONTyped,
    ProjectTemplateBaseAllOfOwnerToJSON,
    ProjectTemplateBaseAllOfOwnerToJSONTyped,
} from './ProjectTemplateBaseAllOfOwner.js';
import type { TemplateRole } from './TemplateRole.js';
import {
    TemplateRoleFromJSON,
    TemplateRoleFromJSONTyped,
    TemplateRoleToJSON,
    TemplateRoleToJSONTyped,
} from './TemplateRole.js';

/**
 * 
 * @export
 * @interface ProjectTemplateResponse
 */
export interface ProjectTemplateResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof ProjectTemplateResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof ProjectTemplateResponse
     */
    readonly resourceType?: string;
    /**
     * Name of the project template.
     * @type {string}
     * @memberof ProjectTemplateResponse
     */
    name?: string;
    /**
     * Free-form textual information associated with the project template
     * @type {string}
     * @memberof ProjectTemplateResponse
     */
    description?: string;
    /**
     * The description of the project template with formatting as HTML.
     * @type {string}
     * @memberof ProjectTemplateResponse
     */
    htmlDescription?: string;
    /**
     * True if the project template is public to its team.
     * @type {boolean}
     * @memberof ProjectTemplateResponse
     */
    _public?: boolean;
    /**
     * 
     * @type {ProjectTemplateBaseAllOfOwner}
     * @memberof ProjectTemplateResponse
     */
    owner?: ProjectTemplateBaseAllOfOwner;
    /**
     * 
     * @type {TeamCompact}
     * @memberof ProjectTemplateResponse
     */
    team?: TeamCompact;
    /**
     * Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.
     * @type {Array<DateVariableCompact>}
     * @memberof ProjectTemplateResponse
     */
    readonly requestedDates?: Array<DateVariableCompact>;
    /**
     * Color of the project template.
     * @type {string}
     * @memberof ProjectTemplateResponse
     */
    color?: ProjectTemplateResponseColorEnum | null;
    /**
     * Array of template roles in this project template. User Ids can be provided for these variables when instantiating a project to assign template tasks to the user.
     * @type {Array<TemplateRole>}
     * @memberof ProjectTemplateResponse
     */
    requestedRoles?: Array<TemplateRole>;
}


/**
 * @export
 */
export const ProjectTemplateResponseColorEnum = {
    DarkPink: 'dark-pink',
    DarkGreen: 'dark-green',
    DarkBlue: 'dark-blue',
    DarkRed: 'dark-red',
    DarkTeal: 'dark-teal',
    DarkBrown: 'dark-brown',
    DarkOrange: 'dark-orange',
    DarkPurple: 'dark-purple',
    DarkWarmGray: 'dark-warm-gray',
    LightPink: 'light-pink',
    LightGreen: 'light-green',
    LightBlue: 'light-blue',
    LightRed: 'light-red',
    LightTeal: 'light-teal',
    LightBrown: 'light-brown',
    LightOrange: 'light-orange',
    LightPurple: 'light-purple',
    LightWarmGray: 'light-warm-gray'
} as const;
export type ProjectTemplateResponseColorEnum = typeof ProjectTemplateResponseColorEnum[keyof typeof ProjectTemplateResponseColorEnum];


/**
 * Check if a given object implements the ProjectTemplateResponse interface.
 */
export function instanceOfProjectTemplateResponse(value: object): value is ProjectTemplateResponse {
    return true;
}

export function ProjectTemplateResponseFromJSON(json: any): ProjectTemplateResponse {
    return ProjectTemplateResponseFromJSONTyped(json, false);
}

export function ProjectTemplateResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectTemplateResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'htmlDescription': json['html_description'] == null ? undefined : json['html_description'],
        '_public': json['public'] == null ? undefined : json['public'],
        'owner': json['owner'] == null ? undefined : ProjectTemplateBaseAllOfOwnerFromJSON(json['owner']),
        'team': json['team'] == null ? undefined : TeamCompactFromJSON(json['team']),
        'requestedDates': json['requested_dates'] == null ? undefined : ((json['requested_dates'] as Array<any>).map(DateVariableCompactFromJSON)),
        'color': json['color'] == null ? undefined : json['color'],
        'requestedRoles': json['requested_roles'] == null ? undefined : ((json['requested_roles'] as Array<any>).map(TemplateRoleFromJSON)),
    };
}

export function ProjectTemplateResponseToJSON(json: any): ProjectTemplateResponse {
    return ProjectTemplateResponseToJSONTyped(json, false);
}

export function ProjectTemplateResponseToJSONTyped(value?: Omit<ProjectTemplateResponse, 'gid'|'resource_type'|'requested_dates'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'html_description': value['htmlDescription'],
        'public': value['_public'],
        'owner': ProjectTemplateBaseAllOfOwnerToJSON(value['owner']),
        'team': TeamCompactToJSON(value['team']),
        'color': value['color'],
        'requested_roles': value['requestedRoles'] == null ? undefined : ((value['requestedRoles'] as Array<any>).map(TemplateRoleToJSON)),
    };
}

