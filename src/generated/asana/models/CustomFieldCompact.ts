/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { CustomFieldCompactEnumValue } from './CustomFieldCompactEnumValue.js';
import {
    CustomFieldCompactEnumValueFromJSON,
    CustomFieldCompactEnumValueFromJSONTyped,
    CustomFieldCompactEnumValueToJSON,
    CustomFieldCompactEnumValueToJSONTyped,
} from './CustomFieldCompactEnumValue.js';
import type { EnumOption } from './EnumOption.js';
import {
    EnumOptionFromJSON,
    EnumOptionFromJSONTyped,
    EnumOptionToJSON,
    EnumOptionToJSONTyped,
} from './EnumOption.js';
import type { CustomFieldCompactDateValue } from './CustomFieldCompactDateValue.js';
import {
    CustomFieldCompactDateValueFromJSON,
    CustomFieldCompactDateValueFromJSONTyped,
    CustomFieldCompactDateValueToJSON,
    CustomFieldCompactDateValueToJSONTyped,
} from './CustomFieldCompactDateValue.js';

/**
 * Custom Fields store the metadata that is used in order to add user-specified information to tasks in Asana. Be sure to reference the [custom fields](/reference/custom-fields) developer documentation for more information about how custom fields relate to various resources in Asana.
 * 
 * Users in Asana can [lock custom fields](https://asana.com/guide/help/premium/custom-fields#gl-lock-fields), which will make them read-only when accessed by other users. Attempting to edit a locked custom field will return HTTP error code `403 Forbidden`.
 * @export
 * @interface CustomFieldCompact
 */
export interface CustomFieldCompact {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof CustomFieldCompact
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof CustomFieldCompact
     */
    readonly resourceType?: string;
    /**
     * The name of the custom field.
     * @type {string}
     * @memberof CustomFieldCompact
     */
    name?: string;
    /**
     * *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.
     * 
     * @type {string}
     * @memberof CustomFieldCompact
     */
    readonly type?: CustomFieldCompactTypeEnum;
    /**
     * *Conditional*. Only relevant for custom fields of type `enum` or `multi_enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/reference/createenumoptionforcustomfield).
     * @type {Array<EnumOption>}
     * @memberof CustomFieldCompact
     */
    enumOptions?: Array<EnumOption>;
    /**
     * *Conditional*. Determines if the custom field is enabled or not.
     * @type {boolean}
     * @memberof CustomFieldCompact
     */
    readonly enabled?: boolean;
    /**
     * This field tells the type of the custom field.
     * @type {string}
     * @memberof CustomFieldCompact
     */
    readonly representationType?: CustomFieldCompactRepresentationTypeEnum;
    /**
     * This field is the unique custom ID string for the custom field.
     * @type {string}
     * @memberof CustomFieldCompact
     */
    idPrefix?: string | null;
    /**
     * *Conditional*. This flag describes whether a custom field is a formula custom field.
     * @type {boolean}
     * @memberof CustomFieldCompact
     */
    isFormulaField?: boolean;
    /**
     * 
     * @type {CustomFieldCompactDateValue}
     * @memberof CustomFieldCompact
     */
    dateValue?: CustomFieldCompactDateValue | null;
    /**
     * 
     * @type {CustomFieldCompactEnumValue}
     * @memberof CustomFieldCompact
     */
    enumValue?: CustomFieldCompactEnumValue;
    /**
     * *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a `multi_enum` custom field.
     * @type {Array<EnumOption>}
     * @memberof CustomFieldCompact
     */
    multiEnumValues?: Array<EnumOption>;
    /**
     * *Conditional*. This number is the value of a `number` custom field.
     * @type {number}
     * @memberof CustomFieldCompact
     */
    numberValue?: number | null;
    /**
     * *Conditional*. This string is the value of a `text` custom field.
     * @type {string}
     * @memberof CustomFieldCompact
     */
    textValue?: string | null;
    /**
     * A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
     * @type {string}
     * @memberof CustomFieldCompact
     */
    readonly displayValue?: string | null;
}


/**
 * @export
 */
export const CustomFieldCompactTypeEnum = {
    Text: 'text',
    Enum: 'enum',
    MultiEnum: 'multi_enum',
    Number: 'number',
    Date: 'date',
    People: 'people'
} as const;
export type CustomFieldCompactTypeEnum = typeof CustomFieldCompactTypeEnum[keyof typeof CustomFieldCompactTypeEnum];

/**
 * @export
 */
export const CustomFieldCompactRepresentationTypeEnum = {
    Text: 'text',
    Enum: 'enum',
    MultiEnum: 'multi_enum',
    Number: 'number',
    Date: 'date',
    People: 'people',
    Formula: 'formula',
    CustomId: 'custom_id'
} as const;
export type CustomFieldCompactRepresentationTypeEnum = typeof CustomFieldCompactRepresentationTypeEnum[keyof typeof CustomFieldCompactRepresentationTypeEnum];


/**
 * Check if a given object implements the CustomFieldCompact interface.
 */
export function instanceOfCustomFieldCompact(value: object): value is CustomFieldCompact {
    return true;
}

export function CustomFieldCompactFromJSON(json: any): CustomFieldCompact {
    return CustomFieldCompactFromJSONTyped(json, false);
}

export function CustomFieldCompactFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomFieldCompact {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'type': json['type'] == null ? undefined : json['type'],
        'enumOptions': json['enum_options'] == null ? undefined : ((json['enum_options'] as Array<any>).map(EnumOptionFromJSON)),
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'representationType': json['representation_type'] == null ? undefined : json['representation_type'],
        'idPrefix': json['id_prefix'] == null ? undefined : json['id_prefix'],
        'isFormulaField': json['is_formula_field'] == null ? undefined : json['is_formula_field'],
        'dateValue': json['date_value'] == null ? undefined : CustomFieldCompactDateValueFromJSON(json['date_value']),
        'enumValue': json['enum_value'] == null ? undefined : CustomFieldCompactEnumValueFromJSON(json['enum_value']),
        'multiEnumValues': json['multi_enum_values'] == null ? undefined : ((json['multi_enum_values'] as Array<any>).map(EnumOptionFromJSON)),
        'numberValue': json['number_value'] == null ? undefined : json['number_value'],
        'textValue': json['text_value'] == null ? undefined : json['text_value'],
        'displayValue': json['display_value'] == null ? undefined : json['display_value'],
    };
}

export function CustomFieldCompactToJSON(json: any): CustomFieldCompact {
    return CustomFieldCompactToJSONTyped(json, false);
}

export function CustomFieldCompactToJSONTyped(value?: Omit<CustomFieldCompact, 'gid'|'resource_type'|'type'|'enabled'|'representation_type'|'display_value'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'enum_options': value['enumOptions'] == null ? undefined : ((value['enumOptions'] as Array<any>).map(EnumOptionToJSON)),
        'id_prefix': value['idPrefix'],
        'is_formula_field': value['isFormulaField'],
        'date_value': CustomFieldCompactDateValueToJSON(value['dateValue']),
        'enum_value': CustomFieldCompactEnumValueToJSON(value['enumValue']),
        'multi_enum_values': value['multiEnumValues'] == null ? undefined : ((value['multiEnumValues'] as Array<any>).map(EnumOptionToJSON)),
        'number_value': value['numberValue'],
        'text_value': value['textValue'],
    };
}

