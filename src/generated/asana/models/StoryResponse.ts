/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { Like } from './Like.js';
import {
    LikeFromJSON,
    LikeFromJSONTyped,
    LikeToJSON,
    LikeToJSONTyped,
} from './Like.js';
import type { ProjectCompact } from './ProjectCompact.js';
import {
    ProjectCompactFromJSON,
    ProjectCompactFromJSONTyped,
    ProjectCompactToJSON,
    ProjectCompactToJSONTyped,
} from './ProjectCompact.js';
import type { SectionCompact } from './SectionCompact.js';
import {
    SectionCompactFromJSON,
    SectionCompactFromJSONTyped,
    SectionCompactToJSON,
    SectionCompactToJSONTyped,
} from './SectionCompact.js';
import type { EnumOption } from './EnumOption.js';
import {
    EnumOptionFromJSON,
    EnumOptionFromJSONTyped,
    EnumOptionToJSON,
    EnumOptionToJSONTyped,
} from './EnumOption.js';
import type { StoryResponseDates } from './StoryResponseDates.js';
import {
    StoryResponseDatesFromJSON,
    StoryResponseDatesFromJSONTyped,
    StoryResponseDatesToJSON,
    StoryResponseDatesToJSONTyped,
} from './StoryResponseDates.js';
import type { StoryCompact } from './StoryCompact.js';
import {
    StoryCompactFromJSON,
    StoryCompactFromJSONTyped,
    StoryCompactToJSON,
    StoryCompactToJSONTyped,
} from './StoryCompact.js';
import type { TaskCompact } from './TaskCompact.js';
import {
    TaskCompactFromJSON,
    TaskCompactFromJSONTyped,
    TaskCompactToJSON,
    TaskCompactToJSONTyped,
} from './TaskCompact.js';
import type { Preview } from './Preview.js';
import {
    PreviewFromJSON,
    PreviewFromJSONTyped,
    PreviewToJSON,
    PreviewToJSONTyped,
} from './Preview.js';
import type { TagCompact } from './TagCompact.js';
import {
    TagCompactFromJSON,
    TagCompactFromJSONTyped,
    TagCompactToJSON,
    TagCompactToJSONTyped,
} from './TagCompact.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';
import type { StoryResponseAllOfTarget } from './StoryResponseAllOfTarget.js';
import {
    StoryResponseAllOfTargetFromJSON,
    StoryResponseAllOfTargetFromJSONTyped,
    StoryResponseAllOfTargetToJSON,
    StoryResponseAllOfTargetToJSONTyped,
} from './StoryResponseAllOfTarget.js';
import type { CustomFieldCompact } from './CustomFieldCompact.js';
import {
    CustomFieldCompactFromJSON,
    CustomFieldCompactFromJSONTyped,
    CustomFieldCompactToJSON,
    CustomFieldCompactToJSONTyped,
} from './CustomFieldCompact.js';

/**
 * 
 * @export
 * @interface StoryResponse
 */
export interface StoryResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly resourceType?: string;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof StoryResponse
     */
    readonly createdAt?: Date;
    /**
     * The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly resourceSubtype?: string;
    /**
     * The plain text of the comment to add. Cannot be used with html_text.
     * @type {string}
     * @memberof StoryResponse
     */
    text?: string;
    /**
     * [Opt In](/docs/inputoutput-options). HTML formatted text for a comment. This will not include the name of the creator.
     * @type {string}
     * @memberof StoryResponse
     */
    htmlText?: string;
    /**
     * *Conditional*. Whether the story should be pinned on the resource.
     * @type {boolean}
     * @memberof StoryResponse
     */
    isPinned?: boolean;
    /**
     * The name of the sticker in this story. `null` if there is no sticker.
     * @type {string}
     * @memberof StoryResponse
     */
    stickerName?: StoryResponseStickerNameEnum;
    /**
     * 
     * @type {UserCompact}
     * @memberof StoryResponse
     */
    createdBy?: UserCompact;
    /**
     * 
     * @type {string}
     * @memberof StoryResponse
     */
    readonly type?: StoryResponseTypeEnum;
    /**
     * *Conditional*. Whether the text of the story can be edited after creation.
     * @type {boolean}
     * @memberof StoryResponse
     */
    readonly isEditable?: boolean;
    /**
     * *Conditional*. Whether the text of the story has been edited after creation.
     * @type {boolean}
     * @memberof StoryResponse
     */
    readonly isEdited?: boolean;
    /**
     * *Deprecated - please use likes instead*
     * *Conditional*. True if the story is hearted by the authorized user, false if not.
     * @type {boolean}
     * @memberof StoryResponse
     */
    readonly hearted?: boolean;
    /**
     * *Deprecated - please use likes instead*
     * 
     * *Conditional*. Array of likes for users who have hearted this story.
     * @type {Array<Like>}
     * @memberof StoryResponse
     */
    readonly hearts?: Array<Like>;
    /**
     * *Deprecated - please use likes instead*
     * 
     * *Conditional*. The number of users who have hearted this story.
     * @type {number}
     * @memberof StoryResponse
     */
    readonly numHearts?: number;
    /**
     * *Conditional*. True if the story is liked by the authorized user, false if not.
     * @type {boolean}
     * @memberof StoryResponse
     */
    readonly liked?: boolean;
    /**
     * *Conditional*. Array of likes for users who have liked this story.
     * @type {Array<Like>}
     * @memberof StoryResponse
     */
    readonly likes?: Array<Like>;
    /**
     * *Conditional*. The number of users who have liked this story.
     * @type {number}
     * @memberof StoryResponse
     */
    readonly numLikes?: number;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>attachments:read</code></p>
     * 
     * *Conditional*. A collection of previews to be displayed in the story.
     * 
     * *Note: This property only exists for comment stories.*
     * @type {Array<Preview>}
     * @memberof StoryResponse
     */
    readonly previews?: Array<Preview>;
    /**
     * *Conditional* The previous name of the task before a name change.
     * @type {string}
     * @memberof StoryResponse
     */
    oldName?: string;
    /**
     * *Conditional* The updated name of the task after a name change.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly newName?: string | null;
    /**
     * 
     * @type {StoryResponseDates}
     * @memberof StoryResponse
     */
    oldDates?: StoryResponseDates;
    /**
     * 
     * @type {StoryResponseDates}
     * @memberof StoryResponse
     */
    newDates?: StoryResponseDates;
    /**
     * *Conditional*
     * @type {string}
     * @memberof StoryResponse
     */
    readonly oldResourceSubtype?: string;
    /**
     * *Conditional*
     * @type {string}
     * @memberof StoryResponse
     */
    readonly newResourceSubtype?: string;
    /**
     * 
     * @type {StoryCompact}
     * @memberof StoryResponse
     */
    story?: StoryCompact;
    /**
     * 
     * @type {UserCompact}
     * @memberof StoryResponse
     */
    assignee?: UserCompact;
    /**
     * 
     * @type {UserCompact}
     * @memberof StoryResponse
     */
    follower?: UserCompact;
    /**
     * 
     * @type {SectionCompact}
     * @memberof StoryResponse
     */
    oldSection?: SectionCompact;
    /**
     * 
     * @type {SectionCompact}
     * @memberof StoryResponse
     */
    newSection?: SectionCompact;
    /**
     * 
     * @type {TaskCompact}
     * @memberof StoryResponse
     */
    task?: TaskCompact;
    /**
     * 
     * @type {ProjectCompact}
     * @memberof StoryResponse
     */
    project?: ProjectCompact;
    /**
     * 
     * @type {TagCompact}
     * @memberof StoryResponse
     */
    tag?: TagCompact;
    /**
     * 
     * @type {CustomFieldCompact}
     * @memberof StoryResponse
     */
    customField?: CustomFieldCompact;
    /**
     * *Conditional* The previous value of a text-type field before it was updated.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly oldTextValue?: string;
    /**
     * *Conditional* The new value of a text-type field after it was updated.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly newTextValue?: string;
    /**
     * *Conditional* The previous value of a number-type custom field before the update.
     * @type {number}
     * @memberof StoryResponse
     */
    readonly oldNumberValue?: number | null;
    /**
     * *Conditional* The new value of a number-type custom field after the update.
     * @type {number}
     * @memberof StoryResponse
     */
    readonly newNumberValue?: number;
    /**
     * 
     * @type {EnumOption}
     * @memberof StoryResponse
     */
    oldEnumValue?: EnumOption;
    /**
     * 
     * @type {EnumOption}
     * @memberof StoryResponse
     */
    newEnumValue?: EnumOption;
    /**
     * *Conditional*. The old value of a date custom field story.
     * @type {StoryResponseDates}
     * @memberof StoryResponse
     */
    readonly oldDateValue?: StoryResponseDates;
    /**
     * *Conditional* The new value of a date custom field story.
     * @type {StoryResponseDates}
     * @memberof StoryResponse
     */
    readonly newDateValue?: StoryResponseDates;
    /**
     * *Conditional*. The old value of a people custom field story.
     * @type {Array<UserCompact>}
     * @memberof StoryResponse
     */
    readonly oldPeopleValue?: Array<UserCompact>;
    /**
     * *Conditional*. The new value of a people custom field story.
     * @type {Array<UserCompact>}
     * @memberof StoryResponse
     */
    readonly newPeopleValue?: Array<UserCompact>;
    /**
     * *Conditional*. The old value of a multi-enum custom field story.
     * @type {Array<EnumOption>}
     * @memberof StoryResponse
     */
    readonly oldMultiEnumValues?: Array<EnumOption>;
    /**
     * *Conditional*. The new value of a multi-enum custom field story.
     * @type {Array<EnumOption>}
     * @memberof StoryResponse
     */
    readonly newMultiEnumValues?: Array<EnumOption>;
    /**
     * *Conditional*. The new value of approval status.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly newApprovalStatus?: string;
    /**
     * *Conditional*. The old value of approval status.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly oldApprovalStatus?: string;
    /**
     * 
     * @type {TaskCompact}
     * @memberof StoryResponse
     */
    duplicateOf?: TaskCompact;
    /**
     * 
     * @type {TaskCompact}
     * @memberof StoryResponse
     */
    duplicatedFrom?: TaskCompact;
    /**
     * 
     * @type {TaskCompact}
     * @memberof StoryResponse
     */
    dependency?: TaskCompact;
    /**
     * The component of the Asana product the user used to trigger the story.
     * @type {string}
     * @memberof StoryResponse
     */
    readonly source?: StoryResponseSourceEnum;
    /**
     * 
     * @type {StoryResponseAllOfTarget}
     * @memberof StoryResponse
     */
    target?: StoryResponseAllOfTarget;
}


/**
 * @export
 */
export const StoryResponseStickerNameEnum = {
    GreenCheckmark: 'green_checkmark',
    PeopleDancing: 'people_dancing',
    DancingUnicorn: 'dancing_unicorn',
    Heart: 'heart',
    PartyPopper: 'party_popper',
    PeopleWavingFlags: 'people_waving_flags',
    SplashingNarwhal: 'splashing_narwhal',
    Trophy: 'trophy',
    YetiRidingUnicorn: 'yeti_riding_unicorn',
    CelebratingPeople: 'celebrating_people',
    DeterminedClimbers: 'determined_climbers',
    PhoenixSpreadingLove: 'phoenix_spreading_love'
} as const;
export type StoryResponseStickerNameEnum = typeof StoryResponseStickerNameEnum[keyof typeof StoryResponseStickerNameEnum];

/**
 * @export
 */
export const StoryResponseTypeEnum = {
    Comment: 'comment',
    System: 'system'
} as const;
export type StoryResponseTypeEnum = typeof StoryResponseTypeEnum[keyof typeof StoryResponseTypeEnum];

/**
 * @export
 */
export const StoryResponseSourceEnum = {
    Web: 'web',
    Email: 'email',
    Mobile: 'mobile',
    Api: 'api',
    Unknown: 'unknown'
} as const;
export type StoryResponseSourceEnum = typeof StoryResponseSourceEnum[keyof typeof StoryResponseSourceEnum];


/**
 * Check if a given object implements the StoryResponse interface.
 */
export function instanceOfStoryResponse(value: object): value is StoryResponse {
    return true;
}

export function StoryResponseFromJSON(json: any): StoryResponse {
    return StoryResponseFromJSONTyped(json, false);
}

export function StoryResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoryResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'resourceSubtype': json['resource_subtype'] == null ? undefined : json['resource_subtype'],
        'text': json['text'] == null ? undefined : json['text'],
        'htmlText': json['html_text'] == null ? undefined : json['html_text'],
        'isPinned': json['is_pinned'] == null ? undefined : json['is_pinned'],
        'stickerName': json['sticker_name'] == null ? undefined : json['sticker_name'],
        'createdBy': json['created_by'] == null ? undefined : UserCompactFromJSON(json['created_by']),
        'type': json['type'] == null ? undefined : json['type'],
        'isEditable': json['is_editable'] == null ? undefined : json['is_editable'],
        'isEdited': json['is_edited'] == null ? undefined : json['is_edited'],
        'hearted': json['hearted'] == null ? undefined : json['hearted'],
        'hearts': json['hearts'] == null ? undefined : ((json['hearts'] as Array<any>).map(LikeFromJSON)),
        'numHearts': json['num_hearts'] == null ? undefined : json['num_hearts'],
        'liked': json['liked'] == null ? undefined : json['liked'],
        'likes': json['likes'] == null ? undefined : ((json['likes'] as Array<any>).map(LikeFromJSON)),
        'numLikes': json['num_likes'] == null ? undefined : json['num_likes'],
        'previews': json['previews'] == null ? undefined : ((json['previews'] as Array<any>).map(PreviewFromJSON)),
        'oldName': json['old_name'] == null ? undefined : json['old_name'],
        'newName': json['new_name'] == null ? undefined : json['new_name'],
        'oldDates': json['old_dates'] == null ? undefined : StoryResponseDatesFromJSON(json['old_dates']),
        'newDates': json['new_dates'] == null ? undefined : StoryResponseDatesFromJSON(json['new_dates']),
        'oldResourceSubtype': json['old_resource_subtype'] == null ? undefined : json['old_resource_subtype'],
        'newResourceSubtype': json['new_resource_subtype'] == null ? undefined : json['new_resource_subtype'],
        'story': json['story'] == null ? undefined : StoryCompactFromJSON(json['story']),
        'assignee': json['assignee'] == null ? undefined : UserCompactFromJSON(json['assignee']),
        'follower': json['follower'] == null ? undefined : UserCompactFromJSON(json['follower']),
        'oldSection': json['old_section'] == null ? undefined : SectionCompactFromJSON(json['old_section']),
        'newSection': json['new_section'] == null ? undefined : SectionCompactFromJSON(json['new_section']),
        'task': json['task'] == null ? undefined : TaskCompactFromJSON(json['task']),
        'project': json['project'] == null ? undefined : ProjectCompactFromJSON(json['project']),
        'tag': json['tag'] == null ? undefined : TagCompactFromJSON(json['tag']),
        'customField': json['custom_field'] == null ? undefined : CustomFieldCompactFromJSON(json['custom_field']),
        'oldTextValue': json['old_text_value'] == null ? undefined : json['old_text_value'],
        'newTextValue': json['new_text_value'] == null ? undefined : json['new_text_value'],
        'oldNumberValue': json['old_number_value'] == null ? undefined : json['old_number_value'],
        'newNumberValue': json['new_number_value'] == null ? undefined : json['new_number_value'],
        'oldEnumValue': json['old_enum_value'] == null ? undefined : EnumOptionFromJSON(json['old_enum_value']),
        'newEnumValue': json['new_enum_value'] == null ? undefined : EnumOptionFromJSON(json['new_enum_value']),
        'oldDateValue': json['old_date_value'] == null ? undefined : StoryResponseDatesFromJSON(json['old_date_value']),
        'newDateValue': json['new_date_value'] == null ? undefined : StoryResponseDatesFromJSON(json['new_date_value']),
        'oldPeopleValue': json['old_people_value'] == null ? undefined : ((json['old_people_value'] as Array<any>).map(UserCompactFromJSON)),
        'newPeopleValue': json['new_people_value'] == null ? undefined : ((json['new_people_value'] as Array<any>).map(UserCompactFromJSON)),
        'oldMultiEnumValues': json['old_multi_enum_values'] == null ? undefined : ((json['old_multi_enum_values'] as Array<any>).map(EnumOptionFromJSON)),
        'newMultiEnumValues': json['new_multi_enum_values'] == null ? undefined : ((json['new_multi_enum_values'] as Array<any>).map(EnumOptionFromJSON)),
        'newApprovalStatus': json['new_approval_status'] == null ? undefined : json['new_approval_status'],
        'oldApprovalStatus': json['old_approval_status'] == null ? undefined : json['old_approval_status'],
        'duplicateOf': json['duplicate_of'] == null ? undefined : TaskCompactFromJSON(json['duplicate_of']),
        'duplicatedFrom': json['duplicated_from'] == null ? undefined : TaskCompactFromJSON(json['duplicated_from']),
        'dependency': json['dependency'] == null ? undefined : TaskCompactFromJSON(json['dependency']),
        'source': json['source'] == null ? undefined : json['source'],
        'target': json['target'] == null ? undefined : StoryResponseAllOfTargetFromJSON(json['target']),
    };
}

export function StoryResponseToJSON(json: any): StoryResponse {
    return StoryResponseToJSONTyped(json, false);
}

export function StoryResponseToJSONTyped(value?: Omit<StoryResponse, 'gid'|'resource_type'|'created_at'|'resource_subtype'|'type'|'is_editable'|'is_edited'|'hearted'|'hearts'|'num_hearts'|'liked'|'likes'|'num_likes'|'previews'|'new_name'|'old_resource_subtype'|'new_resource_subtype'|'old_text_value'|'new_text_value'|'old_number_value'|'new_number_value'|'old_date_value'|'new_date_value'|'old_people_value'|'new_people_value'|'old_multi_enum_values'|'new_multi_enum_values'|'new_approval_status'|'old_approval_status'|'source'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'text': value['text'],
        'html_text': value['htmlText'],
        'is_pinned': value['isPinned'],
        'sticker_name': value['stickerName'],
        'created_by': UserCompactToJSON(value['createdBy']),
        'old_name': value['oldName'],
        'old_dates': StoryResponseDatesToJSON(value['oldDates']),
        'new_dates': StoryResponseDatesToJSON(value['newDates']),
        'story': StoryCompactToJSON(value['story']),
        'assignee': UserCompactToJSON(value['assignee']),
        'follower': UserCompactToJSON(value['follower']),
        'old_section': SectionCompactToJSON(value['oldSection']),
        'new_section': SectionCompactToJSON(value['newSection']),
        'task': TaskCompactToJSON(value['task']),
        'project': ProjectCompactToJSON(value['project']),
        'tag': TagCompactToJSON(value['tag']),
        'custom_field': CustomFieldCompactToJSON(value['customField']),
        'old_enum_value': EnumOptionToJSON(value['oldEnumValue']),
        'new_enum_value': EnumOptionToJSON(value['newEnumValue']),
        'duplicate_of': TaskCompactToJSON(value['duplicateOf']),
        'duplicated_from': TaskCompactToJSON(value['duplicatedFrom']),
        'dependency': TaskCompactToJSON(value['dependency']),
        'target': StoryResponseAllOfTargetToJSON(value['target']),
    };
}

