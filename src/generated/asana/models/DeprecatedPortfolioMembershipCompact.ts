/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { PortfolioCompact } from './PortfolioCompact.js';
import {
    PortfolioCompactFromJSON,
    PortfolioCompactFromJSONTyped,
    PortfolioCompactToJSON,
    PortfolioCompactToJSONTyped,
} from './PortfolioCompact.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';

/**
 * This object determines if a user is a member of a portfolio.
 * @export
 * @interface DeprecatedPortfolioMembershipCompact
 */
export interface DeprecatedPortfolioMembershipCompact {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof DeprecatedPortfolioMembershipCompact
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof DeprecatedPortfolioMembershipCompact
     */
    readonly resourceType?: string;
    /**
     * 
     * @type {PortfolioCompact}
     * @memberof DeprecatedPortfolioMembershipCompact
     */
    portfolio?: PortfolioCompact;
    /**
     * 
     * @type {UserCompact}
     * @memberof DeprecatedPortfolioMembershipCompact
     */
    user?: UserCompact;
    /**
     * Whether the member has admin, editor, or viewer access to the portfolio. Portfolios do not support commenter access yet.
     * @type {string}
     * @memberof DeprecatedPortfolioMembershipCompact
     */
    readonly accessLevel?: DeprecatedPortfolioMembershipCompactAccessLevelEnum;
}


/**
 * @export
 */
export const DeprecatedPortfolioMembershipCompactAccessLevelEnum = {
    Admin: 'admin',
    Editor: 'editor',
    Viewer: 'viewer'
} as const;
export type DeprecatedPortfolioMembershipCompactAccessLevelEnum = typeof DeprecatedPortfolioMembershipCompactAccessLevelEnum[keyof typeof DeprecatedPortfolioMembershipCompactAccessLevelEnum];


/**
 * Check if a given object implements the DeprecatedPortfolioMembershipCompact interface.
 */
export function instanceOfDeprecatedPortfolioMembershipCompact(value: object): value is DeprecatedPortfolioMembershipCompact {
    return true;
}

export function DeprecatedPortfolioMembershipCompactFromJSON(json: any): DeprecatedPortfolioMembershipCompact {
    return DeprecatedPortfolioMembershipCompactFromJSONTyped(json, false);
}

export function DeprecatedPortfolioMembershipCompactFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeprecatedPortfolioMembershipCompact {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'portfolio': json['portfolio'] == null ? undefined : PortfolioCompactFromJSON(json['portfolio']),
        'user': json['user'] == null ? undefined : UserCompactFromJSON(json['user']),
        'accessLevel': json['access_level'] == null ? undefined : json['access_level'],
    };
}

export function DeprecatedPortfolioMembershipCompactToJSON(json: any): DeprecatedPortfolioMembershipCompact {
    return DeprecatedPortfolioMembershipCompactToJSONTyped(json, false);
}

export function DeprecatedPortfolioMembershipCompactToJSONTyped(value?: Omit<DeprecatedPortfolioMembershipCompact, 'gid'|'resource_type'|'access_level'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'portfolio': PortfolioCompactToJSON(value['portfolio']),
        'user': UserCompactToJSON(value['user']),
    };
}

