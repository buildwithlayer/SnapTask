/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
/**
 * Event specific details. The schema will vary depending on the `event_type`.
 * @export
 * @interface AuditLogEventDetails
 */
export interface AuditLogEventDetails {
    [key: string]: any | any;
    /**
     * The previous value of the field that was modified in the audited event.
     * @type {string}
     * @memberof AuditLogEventDetails
     */
    oldValue?: string | null;
    /**
     * The new value after the modification in the audited event.
     * @type {string}
     * @memberof AuditLogEventDetails
     */
    newValue?: string | null;
    /**
     * The division or organizational unit where the event occurred. Primarily used to scope role change events (e.g., `user_division_admin_role_changed`), but may appear in other contexts involving group-level changes.
     * @type {{ [key: string]: any; }}
     * @memberof AuditLogEventDetails
     */
    group?: { [key: string]: any; };
}

/**
 * Check if a given object implements the AuditLogEventDetails interface.
 */
export function instanceOfAuditLogEventDetails(value: object): value is AuditLogEventDetails {
    return true;
}

export function AuditLogEventDetailsFromJSON(json: any): AuditLogEventDetails {
    return AuditLogEventDetailsFromJSONTyped(json, false);
}

export function AuditLogEventDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLogEventDetails {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'oldValue': json['old_value'] == null ? undefined : json['old_value'],
        'newValue': json['new_value'] == null ? undefined : json['new_value'],
        'group': json['group'] == null ? undefined : json['group'],
    };
}

export function AuditLogEventDetailsToJSON(json: any): AuditLogEventDetails {
    return AuditLogEventDetailsToJSONTyped(json, false);
}

export function AuditLogEventDetailsToJSONTyped(value?: AuditLogEventDetails | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
            ...value,
        'old_value': value['oldValue'],
        'new_value': value['newValue'],
        'group': value['group'],
    };
}

