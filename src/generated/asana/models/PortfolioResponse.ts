/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime.js';
import type { ProjectTemplateCompact } from './ProjectTemplateCompact.js';
import {
    ProjectTemplateCompactFromJSON,
    ProjectTemplateCompactFromJSONTyped,
    ProjectTemplateCompactToJSON,
    ProjectTemplateCompactToJSONTyped,
} from './ProjectTemplateCompact.js';
import type { CustomFieldSettingResponse } from './CustomFieldSettingResponse.js';
import {
    CustomFieldSettingResponseFromJSON,
    CustomFieldSettingResponseFromJSONTyped,
    CustomFieldSettingResponseToJSON,
    CustomFieldSettingResponseToJSONTyped,
} from './CustomFieldSettingResponse.js';
import type { PortfolioResponseAllOfWorkspace } from './PortfolioResponseAllOfWorkspace.js';
import {
    PortfolioResponseAllOfWorkspaceFromJSON,
    PortfolioResponseAllOfWorkspaceFromJSONTyped,
    PortfolioResponseAllOfWorkspaceToJSON,
    PortfolioResponseAllOfWorkspaceToJSONTyped,
} from './PortfolioResponseAllOfWorkspace.js';
import type { StatusUpdateCompact } from './StatusUpdateCompact.js';
import {
    StatusUpdateCompactFromJSON,
    StatusUpdateCompactFromJSONTyped,
    StatusUpdateCompactToJSON,
    StatusUpdateCompactToJSONTyped,
} from './StatusUpdateCompact.js';
import type { UserCompact } from './UserCompact.js';
import {
    UserCompactFromJSON,
    UserCompactFromJSONTyped,
    UserCompactToJSON,
    UserCompactToJSONTyped,
} from './UserCompact.js';
import type { CustomFieldCompact } from './CustomFieldCompact.js';
import {
    CustomFieldCompactFromJSON,
    CustomFieldCompactFromJSONTyped,
    CustomFieldCompactToJSON,
    CustomFieldCompactToJSONTyped,
} from './CustomFieldCompact.js';

/**
 * 
 * @export
 * @interface PortfolioResponse
 */
export interface PortfolioResponse {
    /**
     * Globally unique identifier of the resource, as a string.
     * @type {string}
     * @memberof PortfolioResponse
     */
    readonly gid?: string;
    /**
     * The base type of this resource.
     * @type {string}
     * @memberof PortfolioResponse
     */
    readonly resourceType?: string;
    /**
     * The name of the portfolio.
     * @type {string}
     * @memberof PortfolioResponse
     */
    name?: string;
    /**
     * [Opt In](/docs/inputoutput-options). True if the portfolio is archived, false if not. Archived portfolios do not show in the UI by default and may be treated differently for queries.
     * @type {boolean}
     * @memberof PortfolioResponse
     */
    archived?: boolean;
    /**
     * Color of the portfolio.
     * @type {string}
     * @memberof PortfolioResponse
     */
    color?: PortfolioResponseColorEnum;
    /**
     * The time at which this resource was created.
     * @type {Date}
     * @memberof PortfolioResponse
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {UserCompact}
     * @memberof PortfolioResponse
     */
    createdBy?: UserCompact;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>custom_fields:read</code></p>
     * 
     * Array of custom field settings applied to the portfolio.
     * @type {Array<CustomFieldSettingResponse>}
     * @memberof PortfolioResponse
     */
    customFieldSettings?: Array<CustomFieldSettingResponse>;
    /**
     * The latest `status_update` posted to this portfolio.
     * @type {StatusUpdateCompact}
     * @memberof PortfolioResponse
     */
    currentStatusUpdate?: StatusUpdateCompact | null;
    /**
     * The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
     * @type {Date}
     * @memberof PortfolioResponse
     */
    dueOn?: Date | null;
    /**
     * <p><strong style="color: #4573D2">Full object requires scope: </strong><code>custom_fields:read</code></p>
     * 
     * Array of Custom Fields.
     * @type {Array<CustomFieldCompact>}
     * @memberof PortfolioResponse
     */
    customFields?: Array<CustomFieldCompact>;
    /**
     * 
     * @type {Array<UserCompact>}
     * @memberof PortfolioResponse
     */
    readonly members?: Array<UserCompact>;
    /**
     * 
     * @type {UserCompact}
     * @memberof PortfolioResponse
     */
    owner?: UserCompact;
    /**
     * The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
     * @type {Date}
     * @memberof PortfolioResponse
     */
    startOn?: Date | null;
    /**
     * 
     * @type {PortfolioResponseAllOfWorkspace}
     * @memberof PortfolioResponse
     */
    workspace?: PortfolioResponseAllOfWorkspace;
    /**
     * A url that points directly to the object within Asana.
     * @type {string}
     * @memberof PortfolioResponse
     */
    readonly permalinkUrl?: string;
    /**
     * True if the portfolio is public to its workspace members.
     * @type {boolean}
     * @memberof PortfolioResponse
     */
    _public?: boolean;
    /**
     * The default access level when inviting new members to the portfolio
     * @type {string}
     * @memberof PortfolioResponse
     */
    defaultAccessLevel?: PortfolioResponseDefaultAccessLevelEnum;
    /**
     * The privacy setting of the portfolio. *Note: Administrators in your organization may restrict the values of `privacy_setting`.*
     * @type {string}
     * @memberof PortfolioResponse
     */
    privacySetting?: PortfolioResponsePrivacySettingEnum;
    /**
     * Array of project templates that are in the portfolio
     * @type {Array<ProjectTemplateCompact>}
     * @memberof PortfolioResponse
     */
    readonly projectTemplates?: Array<ProjectTemplateCompact>;
}


/**
 * @export
 */
export const PortfolioResponseColorEnum = {
    DarkPink: 'dark-pink',
    DarkGreen: 'dark-green',
    DarkBlue: 'dark-blue',
    DarkRed: 'dark-red',
    DarkTeal: 'dark-teal',
    DarkBrown: 'dark-brown',
    DarkOrange: 'dark-orange',
    DarkPurple: 'dark-purple',
    DarkWarmGray: 'dark-warm-gray',
    LightPink: 'light-pink',
    LightGreen: 'light-green',
    LightBlue: 'light-blue',
    LightRed: 'light-red',
    LightTeal: 'light-teal',
    LightBrown: 'light-brown',
    LightOrange: 'light-orange',
    LightPurple: 'light-purple',
    LightWarmGray: 'light-warm-gray'
} as const;
export type PortfolioResponseColorEnum = typeof PortfolioResponseColorEnum[keyof typeof PortfolioResponseColorEnum];

/**
 * @export
 */
export const PortfolioResponseDefaultAccessLevelEnum = {
    Admin: 'admin',
    Editor: 'editor',
    Viewer: 'viewer'
} as const;
export type PortfolioResponseDefaultAccessLevelEnum = typeof PortfolioResponseDefaultAccessLevelEnum[keyof typeof PortfolioResponseDefaultAccessLevelEnum];

/**
 * @export
 */
export const PortfolioResponsePrivacySettingEnum = {
    PublicToDomain: 'public_to_domain',
    MembersOnly: 'members_only'
} as const;
export type PortfolioResponsePrivacySettingEnum = typeof PortfolioResponsePrivacySettingEnum[keyof typeof PortfolioResponsePrivacySettingEnum];


/**
 * Check if a given object implements the PortfolioResponse interface.
 */
export function instanceOfPortfolioResponse(value: object): value is PortfolioResponse {
    return true;
}

export function PortfolioResponseFromJSON(json: any): PortfolioResponse {
    return PortfolioResponseFromJSONTyped(json, false);
}

export function PortfolioResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PortfolioResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'gid': json['gid'] == null ? undefined : json['gid'],
        'resourceType': json['resource_type'] == null ? undefined : json['resource_type'],
        'name': json['name'] == null ? undefined : json['name'],
        'archived': json['archived'] == null ? undefined : json['archived'],
        'color': json['color'] == null ? undefined : json['color'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'createdBy': json['created_by'] == null ? undefined : UserCompactFromJSON(json['created_by']),
        'customFieldSettings': json['custom_field_settings'] == null ? undefined : ((json['custom_field_settings'] as Array<any>).map(CustomFieldSettingResponseFromJSON)),
        'currentStatusUpdate': json['current_status_update'] == null ? undefined : StatusUpdateCompactFromJSON(json['current_status_update']),
        'dueOn': json['due_on'] == null ? undefined : (new Date(json['due_on'])),
        'customFields': json['custom_fields'] == null ? undefined : ((json['custom_fields'] as Array<any>).map(CustomFieldCompactFromJSON)),
        'members': json['members'] == null ? undefined : ((json['members'] as Array<any>).map(UserCompactFromJSON)),
        'owner': json['owner'] == null ? undefined : UserCompactFromJSON(json['owner']),
        'startOn': json['start_on'] == null ? undefined : (new Date(json['start_on'])),
        'workspace': json['workspace'] == null ? undefined : PortfolioResponseAllOfWorkspaceFromJSON(json['workspace']),
        'permalinkUrl': json['permalink_url'] == null ? undefined : json['permalink_url'],
        '_public': json['public'] == null ? undefined : json['public'],
        'defaultAccessLevel': json['default_access_level'] == null ? undefined : json['default_access_level'],
        'privacySetting': json['privacy_setting'] == null ? undefined : json['privacy_setting'],
        'projectTemplates': json['project_templates'] == null ? undefined : ((json['project_templates'] as Array<any>).map(ProjectTemplateCompactFromJSON)),
    };
}

export function PortfolioResponseToJSON(json: any): PortfolioResponse {
    return PortfolioResponseToJSONTyped(json, false);
}

export function PortfolioResponseToJSONTyped(value?: Omit<PortfolioResponse, 'gid'|'resource_type'|'created_at'|'members'|'permalink_url'|'project_templates'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'archived': value['archived'],
        'color': value['color'],
        'created_by': UserCompactToJSON(value['createdBy']),
        'custom_field_settings': value['customFieldSettings'] == null ? undefined : ((value['customFieldSettings'] as Array<any>).map(CustomFieldSettingResponseToJSON)),
        'current_status_update': StatusUpdateCompactToJSON(value['currentStatusUpdate']),
        'due_on': value['dueOn'] === null ? null : ((value['dueOn'] as any)?.toISOString().substring(0,10)),
        'custom_fields': value['customFields'] == null ? undefined : ((value['customFields'] as Array<any>).map(CustomFieldCompactToJSON)),
        'owner': UserCompactToJSON(value['owner']),
        'start_on': value['startOn'] === null ? null : ((value['startOn'] as any)?.toISOString().substring(0,10)),
        'workspace': PortfolioResponseAllOfWorkspaceToJSON(value['workspace']),
        'public': value['_public'],
        'default_access_level': value['defaultAccessLevel'],
        'privacy_setting': value['privacySetting'],
    };
}

