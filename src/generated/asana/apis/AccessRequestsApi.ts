/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  CreateAccessRequest201Response,
  CreateAccessRequestRequest,
  ErrorResponse,
  GetAccessRequests200Response,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateAccessRequest201ResponseFromJSON,
    CreateAccessRequest201ResponseToJSON,
    CreateAccessRequestRequestFromJSON,
    CreateAccessRequestRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetAccessRequests200ResponseFromJSON,
    GetAccessRequests200ResponseToJSON,
} from '../models/index.js';

export interface ApproveAccessRequestRequest {
    accessRequestGid: string;
}

export interface CreateAccessRequestOperationRequest {
    createAccessRequestRequest: CreateAccessRequestRequest;
}

export interface GetAccessRequestsRequest {
    target: string;
    user?: string;
    optPretty?: boolean;
    optFields?: Array<GetAccessRequestsOptFieldsEnum>;
}

export interface RejectAccessRequestRequest {
    accessRequestGid: string;
}

/**
 * 
 */
export class AccessRequestsApi extends runtime.BaseAPI {

    /**
     * Approves an access request for a target object.
     * Approve an access request
     */
    async approveAccessRequestRaw(requestParameters: ApproveAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['accessRequestGid'] == null) {
            throw new runtime.RequiredError(
                'accessRequestGid',
                'Required parameter "accessRequestGid" was null or undefined when calling approveAccessRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/access_requests/{access_request_gid}/approve`;
        urlPath = urlPath.replace(`{${"access_request_gid"}}`, encodeURIComponent(String(requestParameters['accessRequestGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Approves an access request for a target object.
     * Approve an access request
     */
    async approveAccessRequest(requestParameters: ApproveAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.approveAccessRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Submits a new access request for a private object. Currently supports projects and portfolios.
     * Create an access request
     */
    async createAccessRequestRaw(requestParameters: CreateAccessRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateAccessRequest201Response>> {
        if (requestParameters['createAccessRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'createAccessRequestRequest',
                'Required parameter "createAccessRequestRequest" was null or undefined when calling createAccessRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/access_requests`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAccessRequestRequestToJSON(requestParameters['createAccessRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAccessRequest201ResponseFromJSON(jsonValue));
    }

    /**
     * Submits a new access request for a private object. Currently supports projects and portfolios.
     * Create an access request
     */
    async createAccessRequest(requestParameters: CreateAccessRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateAccessRequest201Response> {
        const response = await this.createAccessRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the pending access requests for a target object or a target object filtered by user.
     * Get access requests
     */
    async getAccessRequestsRaw(requestParameters: GetAccessRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccessRequests200Response>> {
        if (requestParameters['target'] == null) {
            throw new runtime.RequiredError(
                'target',
                'Required parameter "target" was null or undefined when calling getAccessRequests().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['target'] != null) {
            queryParameters['target'] = requestParameters['target'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/access_requests`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccessRequests200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the pending access requests for a target object or a target object filtered by user.
     * Get access requests
     */
    async getAccessRequests(requestParameters: GetAccessRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccessRequests200Response> {
        const response = await this.getAccessRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Rejects an access request for a target object.
     * Reject an access request
     */
    async rejectAccessRequestRaw(requestParameters: RejectAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['accessRequestGid'] == null) {
            throw new runtime.RequiredError(
                'accessRequestGid',
                'Required parameter "accessRequestGid" was null or undefined when calling rejectAccessRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/access_requests/{access_request_gid}/reject`;
        urlPath = urlPath.replace(`{${"access_request_gid"}}`, encodeURIComponent(String(requestParameters['accessRequestGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Rejects an access request for a target object.
     * Reject an access request
     */
    async rejectAccessRequest(requestParameters: RejectAccessRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.rejectAccessRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAccessRequestsOptFieldsEnum = {
    ApprovalStatus: 'approval_status',
    Message: 'message',
    Requester: 'requester',
    RequesterName: 'requester.name',
    Target: 'target'
} as const;
export type GetAccessRequestsOptFieldsEnum = typeof GetAccessRequestsOptFieldsEnum[keyof typeof GetAccessRequestsOptFieldsEnum];
