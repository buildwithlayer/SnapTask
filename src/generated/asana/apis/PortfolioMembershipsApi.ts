/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetPortfolioMembership200Response,
  GetPortfolioMemberships200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetPortfolioMembership200ResponseFromJSON,
    GetPortfolioMembership200ResponseToJSON,
    GetPortfolioMemberships200ResponseFromJSON,
    GetPortfolioMemberships200ResponseToJSON,
} from '../models/index.js';

export interface GetPortfolioMembershipRequest {
    portfolioMembershipGid: string;
    optPretty?: boolean;
    optFields?: Array<GetPortfolioMembershipOptFieldsEnum>;
}

export interface GetPortfolioMembershipsRequest {
    portfolio?: string;
    workspace?: string;
    user?: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetPortfolioMembershipsOptFieldsEnum>;
}

export interface GetPortfolioMembershipsForPortfolioRequest {
    portfolioGid: string;
    user?: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetPortfolioMembershipsForPortfolioOptFieldsEnum>;
}

/**
 * 
 */
export class PortfolioMembershipsApi extends runtime.BaseAPI {

    /**
     * Returns the complete portfolio record for a single portfolio membership.
     * Get a portfolio membership
     */
    async getPortfolioMembershipRaw(requestParameters: GetPortfolioMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPortfolioMembership200Response>> {
        if (requestParameters['portfolioMembershipGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioMembershipGid',
                'Required parameter "portfolioMembershipGid" was null or undefined when calling getPortfolioMembership().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/portfolio_memberships/{portfolio_membership_gid}`;
        urlPath = urlPath.replace(`{${"portfolio_membership_gid"}}`, encodeURIComponent(String(requestParameters['portfolioMembershipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPortfolioMembership200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete portfolio record for a single portfolio membership.
     * Get a portfolio membership
     */
    async getPortfolioMembership(requestParameters: GetPortfolioMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPortfolioMembership200Response> {
        const response = await this.getPortfolioMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
     * Get multiple portfolio memberships
     */
    async getPortfolioMembershipsRaw(requestParameters: GetPortfolioMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPortfolioMemberships200Response>> {
        const queryParameters: any = {};

        if (requestParameters['portfolio'] != null) {
            queryParameters['portfolio'] = requestParameters['portfolio'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/portfolio_memberships`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPortfolioMemberships200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
     * Get multiple portfolio memberships
     */
    async getPortfolioMemberships(requestParameters: GetPortfolioMembershipsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPortfolioMemberships200Response> {
        const response = await this.getPortfolioMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the compact portfolio membership records for the portfolio.
     * Get memberships from a portfolio
     */
    async getPortfolioMembershipsForPortfolioRaw(requestParameters: GetPortfolioMembershipsForPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPortfolioMemberships200Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling getPortfolioMembershipsForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/portfolios/{portfolio_gid}/portfolio_memberships`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPortfolioMemberships200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the compact portfolio membership records for the portfolio.
     * Get memberships from a portfolio
     */
    async getPortfolioMembershipsForPortfolio(requestParameters: GetPortfolioMembershipsForPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPortfolioMemberships200Response> {
        const response = await this.getPortfolioMembershipsForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetPortfolioMembershipOptFieldsEnum = {
    AccessLevel: 'access_level',
    Portfolio: 'portfolio',
    PortfolioName: 'portfolio.name',
    User: 'user',
    UserName: 'user.name'
} as const;
export type GetPortfolioMembershipOptFieldsEnum = typeof GetPortfolioMembershipOptFieldsEnum[keyof typeof GetPortfolioMembershipOptFieldsEnum];
/**
 * @export
 */
export const GetPortfolioMembershipsOptFieldsEnum = {
    AccessLevel: 'access_level',
    Offset: 'offset',
    Path: 'path',
    Portfolio: 'portfolio',
    PortfolioName: 'portfolio.name',
    Uri: 'uri',
    User: 'user',
    UserName: 'user.name'
} as const;
export type GetPortfolioMembershipsOptFieldsEnum = typeof GetPortfolioMembershipsOptFieldsEnum[keyof typeof GetPortfolioMembershipsOptFieldsEnum];
/**
 * @export
 */
export const GetPortfolioMembershipsForPortfolioOptFieldsEnum = {
    AccessLevel: 'access_level',
    Offset: 'offset',
    Path: 'path',
    Portfolio: 'portfolio',
    PortfolioName: 'portfolio.name',
    Uri: 'uri',
    User: 'user',
    UserName: 'user.name'
} as const;
export type GetPortfolioMembershipsForPortfolioOptFieldsEnum = typeof GetPortfolioMembershipsForPortfolioOptFieldsEnum[keyof typeof GetPortfolioMembershipsForPortfolioOptFieldsEnum];
