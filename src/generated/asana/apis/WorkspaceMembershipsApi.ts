/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetWorkspaceMembership200Response,
  GetWorkspaceMembershipsForUser200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetWorkspaceMembership200ResponseFromJSON,
    GetWorkspaceMembership200ResponseToJSON,
    GetWorkspaceMembershipsForUser200ResponseFromJSON,
    GetWorkspaceMembershipsForUser200ResponseToJSON,
} from '../models/index.js';

export interface GetWorkspaceMembershipRequest {
    workspaceMembershipGid: string;
    optPretty?: boolean;
    optFields?: Array<GetWorkspaceMembershipOptFieldsEnum>;
}

export interface GetWorkspaceMembershipsForUserRequest {
    userGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetWorkspaceMembershipsForUserOptFieldsEnum>;
}

export interface GetWorkspaceMembershipsForWorkspaceRequest {
    workspaceGid: string;
    user?: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetWorkspaceMembershipsForWorkspaceOptFieldsEnum>;
}

/**
 * 
 */
export class WorkspaceMembershipsApi extends runtime.BaseAPI {

    /**
     * Returns the complete workspace record for a single workspace membership.
     * Get a workspace membership
     */
    async getWorkspaceMembershipRaw(requestParameters: GetWorkspaceMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspaceMembership200Response>> {
        if (requestParameters['workspaceMembershipGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceMembershipGid',
                'Required parameter "workspaceMembershipGid" was null or undefined when calling getWorkspaceMembership().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/workspace_memberships/{workspace_membership_gid}`;
        urlPath = urlPath.replace(`{${"workspace_membership_gid"}}`, encodeURIComponent(String(requestParameters['workspaceMembershipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspaceMembership200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete workspace record for a single workspace membership.
     * Get a workspace membership
     */
    async getWorkspaceMembership(requestParameters: GetWorkspaceMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspaceMembership200Response> {
        const response = await this.getWorkspaceMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the compact workspace membership records for the user.
     * Get workspace memberships for a user
     */
    async getWorkspaceMembershipsForUserRaw(requestParameters: GetWorkspaceMembershipsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspaceMembershipsForUser200Response>> {
        if (requestParameters['userGid'] == null) {
            throw new runtime.RequiredError(
                'userGid',
                'Required parameter "userGid" was null or undefined when calling getWorkspaceMembershipsForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/users/{user_gid}/workspace_memberships`;
        urlPath = urlPath.replace(`{${"user_gid"}}`, encodeURIComponent(String(requestParameters['userGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspaceMembershipsForUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the compact workspace membership records for the user.
     * Get workspace memberships for a user
     */
    async getWorkspaceMembershipsForUser(requestParameters: GetWorkspaceMembershipsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspaceMembershipsForUser200Response> {
        const response = await this.getWorkspaceMembershipsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the compact workspace membership records for the workspace.
     * Get the workspace memberships for a workspace
     */
    async getWorkspaceMembershipsForWorkspaceRaw(requestParameters: GetWorkspaceMembershipsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspaceMembershipsForUser200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling getWorkspaceMembershipsForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/workspaces/{workspace_gid}/workspace_memberships`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspaceMembershipsForUser200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the compact workspace membership records for the workspace.
     * Get the workspace memberships for a workspace
     */
    async getWorkspaceMembershipsForWorkspace(requestParameters: GetWorkspaceMembershipsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspaceMembershipsForUser200Response> {
        const response = await this.getWorkspaceMembershipsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetWorkspaceMembershipOptFieldsEnum = {
    CreatedAt: 'created_at',
    IsActive: 'is_active',
    IsAdmin: 'is_admin',
    IsGuest: 'is_guest',
    IsViewOnly: 'is_view_only',
    User: 'user',
    UserName: 'user.name',
    UserTaskList: 'user_task_list',
    UserTaskListName: 'user_task_list.name',
    UserTaskListOwner: 'user_task_list.owner',
    UserTaskListWorkspace: 'user_task_list.workspace',
    VacationDates: 'vacation_dates',
    VacationDatesEndOn: 'vacation_dates.end_on',
    VacationDatesStartOn: 'vacation_dates.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetWorkspaceMembershipOptFieldsEnum = typeof GetWorkspaceMembershipOptFieldsEnum[keyof typeof GetWorkspaceMembershipOptFieldsEnum];
/**
 * @export
 */
export const GetWorkspaceMembershipsForUserOptFieldsEnum = {
    CreatedAt: 'created_at',
    IsActive: 'is_active',
    IsAdmin: 'is_admin',
    IsGuest: 'is_guest',
    IsViewOnly: 'is_view_only',
    Offset: 'offset',
    Path: 'path',
    Uri: 'uri',
    User: 'user',
    UserName: 'user.name',
    UserTaskList: 'user_task_list',
    UserTaskListName: 'user_task_list.name',
    UserTaskListOwner: 'user_task_list.owner',
    UserTaskListWorkspace: 'user_task_list.workspace',
    VacationDates: 'vacation_dates',
    VacationDatesEndOn: 'vacation_dates.end_on',
    VacationDatesStartOn: 'vacation_dates.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetWorkspaceMembershipsForUserOptFieldsEnum = typeof GetWorkspaceMembershipsForUserOptFieldsEnum[keyof typeof GetWorkspaceMembershipsForUserOptFieldsEnum];
/**
 * @export
 */
export const GetWorkspaceMembershipsForWorkspaceOptFieldsEnum = {
    CreatedAt: 'created_at',
    IsActive: 'is_active',
    IsAdmin: 'is_admin',
    IsGuest: 'is_guest',
    IsViewOnly: 'is_view_only',
    Offset: 'offset',
    Path: 'path',
    Uri: 'uri',
    User: 'user',
    UserName: 'user.name',
    UserTaskList: 'user_task_list',
    UserTaskListName: 'user_task_list.name',
    UserTaskListOwner: 'user_task_list.owner',
    UserTaskListWorkspace: 'user_task_list.workspace',
    VacationDates: 'vacation_dates',
    VacationDatesEndOn: 'vacation_dates.end_on',
    VacationDatesStartOn: 'vacation_dates.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetWorkspaceMembershipsForWorkspaceOptFieldsEnum = typeof GetWorkspaceMembershipsForWorkspaceOptFieldsEnum[keyof typeof GetWorkspaceMembershipsForWorkspaceOptFieldsEnum];
