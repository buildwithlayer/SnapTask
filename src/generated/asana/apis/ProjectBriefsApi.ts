/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  ErrorResponse,
  GetProjectBrief200Response,
  UpdateProjectBriefRequest,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetProjectBrief200ResponseFromJSON,
    GetProjectBrief200ResponseToJSON,
    UpdateProjectBriefRequestFromJSON,
    UpdateProjectBriefRequestToJSON,
} from '../models/index.js';

export interface CreateProjectBriefRequest {
    projectGid: string;
    updateProjectBriefRequest: UpdateProjectBriefRequest;
    optPretty?: boolean;
    optFields?: Array<CreateProjectBriefOptFieldsEnum>;
}

export interface DeleteProjectBriefRequest {
    projectBriefGid: string;
    optPretty?: boolean;
}

export interface GetProjectBriefRequest {
    projectBriefGid: string;
    optPretty?: boolean;
    optFields?: Array<GetProjectBriefOptFieldsEnum>;
}

export interface UpdateProjectBriefOperationRequest {
    projectBriefGid: string;
    updateProjectBriefRequest: UpdateProjectBriefRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateProjectBriefOperationOptFieldsEnum>;
}

/**
 * 
 */
export class ProjectBriefsApi extends runtime.BaseAPI {

    /**
     * Creates a new project brief.  Returns the full record of the newly created project brief.
     * Create a project brief
     */
    async createProjectBriefRaw(requestParameters: CreateProjectBriefRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectBrief200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling createProjectBrief().'
            );
        }

        if (requestParameters['updateProjectBriefRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProjectBriefRequest',
                'Required parameter "updateProjectBriefRequest" was null or undefined when calling createProjectBrief().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/project_briefs`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectBriefRequestToJSON(requestParameters['updateProjectBriefRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectBrief200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new project brief.  Returns the full record of the newly created project brief.
     * Create a project brief
     */
    async createProjectBrief(requestParameters: CreateProjectBriefRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectBrief200Response> {
        const response = await this.createProjectBriefRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific, existing project brief.  Returns an empty data record.
     * Delete a project brief
     */
    async deleteProjectBriefRaw(requestParameters: DeleteProjectBriefRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['projectBriefGid'] == null) {
            throw new runtime.RequiredError(
                'projectBriefGid',
                'Required parameter "projectBriefGid" was null or undefined when calling deleteProjectBrief().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/project_briefs/{project_brief_gid}`;
        urlPath = urlPath.replace(`{${"project_brief_gid"}}`, encodeURIComponent(String(requestParameters['projectBriefGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific, existing project brief.  Returns an empty data record.
     * Delete a project brief
     */
    async deleteProjectBrief(requestParameters: DeleteProjectBriefRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteProjectBriefRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the full record for a project brief.
     * Get a project brief
     */
    async getProjectBriefRaw(requestParameters: GetProjectBriefRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectBrief200Response>> {
        if (requestParameters['projectBriefGid'] == null) {
            throw new runtime.RequiredError(
                'projectBriefGid',
                'Required parameter "projectBriefGid" was null or undefined when calling getProjectBrief().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/project_briefs/{project_brief_gid}`;
        urlPath = urlPath.replace(`{${"project_brief_gid"}}`, encodeURIComponent(String(requestParameters['projectBriefGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectBrief200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the full record for a project brief.
     * Get a project brief
     */
    async getProjectBrief(requestParameters: GetProjectBriefRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectBrief200Response> {
        const response = await this.getProjectBriefRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
     * Update a project brief
     */
    async updateProjectBriefRaw(requestParameters: UpdateProjectBriefOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectBrief200Response>> {
        if (requestParameters['projectBriefGid'] == null) {
            throw new runtime.RequiredError(
                'projectBriefGid',
                'Required parameter "projectBriefGid" was null or undefined when calling updateProjectBrief().'
            );
        }

        if (requestParameters['updateProjectBriefRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProjectBriefRequest',
                'Required parameter "updateProjectBriefRequest" was null or undefined when calling updateProjectBrief().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/project_briefs/{project_brief_gid}`;
        urlPath = urlPath.replace(`{${"project_brief_gid"}}`, encodeURIComponent(String(requestParameters['projectBriefGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectBriefRequestToJSON(requestParameters['updateProjectBriefRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectBrief200ResponseFromJSON(jsonValue));
    }

    /**
     * An existing project brief can be updated by making a PUT request on the URL for that project brief. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated project brief record.
     * Update a project brief
     */
    async updateProjectBrief(requestParameters: UpdateProjectBriefOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectBrief200Response> {
        const response = await this.updateProjectBriefRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateProjectBriefOptFieldsEnum = {
    HtmlText: 'html_text',
    PermalinkUrl: 'permalink_url',
    Project: 'project',
    ProjectName: 'project.name',
    Text: 'text',
    Title: 'title'
} as const;
export type CreateProjectBriefOptFieldsEnum = typeof CreateProjectBriefOptFieldsEnum[keyof typeof CreateProjectBriefOptFieldsEnum];
/**
 * @export
 */
export const GetProjectBriefOptFieldsEnum = {
    HtmlText: 'html_text',
    PermalinkUrl: 'permalink_url',
    Project: 'project',
    ProjectName: 'project.name',
    Text: 'text',
    Title: 'title'
} as const;
export type GetProjectBriefOptFieldsEnum = typeof GetProjectBriefOptFieldsEnum[keyof typeof GetProjectBriefOptFieldsEnum];
/**
 * @export
 */
export const UpdateProjectBriefOperationOptFieldsEnum = {
    HtmlText: 'html_text',
    PermalinkUrl: 'permalink_url',
    Project: 'project',
    ProjectName: 'project.name',
    Text: 'text',
    Title: 'title'
} as const;
export type UpdateProjectBriefOperationOptFieldsEnum = typeof UpdateProjectBriefOperationOptFieldsEnum[keyof typeof UpdateProjectBriefOperationOptFieldsEnum];
