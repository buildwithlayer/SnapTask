/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  CreateProjectStatusForProjectRequest,
  ErrorResponse,
  GetProjectStatus200Response,
  GetProjectStatusesForProject200Response,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateProjectStatusForProjectRequestFromJSON,
    CreateProjectStatusForProjectRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetProjectStatus200ResponseFromJSON,
    GetProjectStatus200ResponseToJSON,
    GetProjectStatusesForProject200ResponseFromJSON,
    GetProjectStatusesForProject200ResponseToJSON,
} from '../models/index.js';

export interface CreateProjectStatusForProjectOperationRequest {
    projectGid: string;
    createProjectStatusForProjectRequest: CreateProjectStatusForProjectRequest;
    optPretty?: boolean;
    optFields?: Array<CreateProjectStatusForProjectOperationOptFieldsEnum>;
}

export interface DeleteProjectStatusRequest {
    projectStatusGid: string;
    optPretty?: boolean;
}

export interface GetProjectStatusRequest {
    projectStatusGid: string;
    optPretty?: boolean;
    optFields?: Array<GetProjectStatusOptFieldsEnum>;
}

export interface GetProjectStatusesForProjectRequest {
    projectGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetProjectStatusesForProjectOptFieldsEnum>;
}

/**
 * 
 */
export class ProjectStatusesApi extends runtime.BaseAPI {

    /**
     * *Deprecated: new integrations should prefer the `/status_updates` route.*  Creates a new status update on the project.  Returns the full record of the newly created project status update.
     * Create a project status
     */
    async createProjectStatusForProjectRaw(requestParameters: CreateProjectStatusForProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectStatus200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling createProjectStatusForProject().'
            );
        }

        if (requestParameters['createProjectStatusForProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'createProjectStatusForProjectRequest',
                'Required parameter "createProjectStatusForProjectRequest" was null or undefined when calling createProjectStatusForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/project_statuses`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectStatusForProjectRequestToJSON(requestParameters['createProjectStatusForProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * *Deprecated: new integrations should prefer the `/status_updates` route.*  Creates a new status update on the project.  Returns the full record of the newly created project status update.
     * Create a project status
     */
    async createProjectStatusForProject(requestParameters: CreateProjectStatusForProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectStatus200Response> {
        const response = await this.createProjectStatusForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*  Deletes a specific, existing project status update.  Returns an empty data record.
     * Delete a project status
     */
    async deleteProjectStatusRaw(requestParameters: DeleteProjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['projectStatusGid'] == null) {
            throw new runtime.RequiredError(
                'projectStatusGid',
                'Required parameter "projectStatusGid" was null or undefined when calling deleteProjectStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/project_statuses/{project_status_gid}`;
        urlPath = urlPath.replace(`{${"project_status_gid"}}`, encodeURIComponent(String(requestParameters['projectStatusGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*  Deletes a specific, existing project status update.  Returns an empty data record.
     * Delete a project status
     */
    async deleteProjectStatus(requestParameters: DeleteProjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteProjectStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*  Returns the complete record for a single status update.
     * Get a project status
     */
    async getProjectStatusRaw(requestParameters: GetProjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectStatus200Response>> {
        if (requestParameters['projectStatusGid'] == null) {
            throw new runtime.RequiredError(
                'projectStatusGid',
                'Required parameter "projectStatusGid" was null or undefined when calling getProjectStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/project_statuses/{project_status_gid}`;
        urlPath = urlPath.replace(`{${"project_status_gid"}}`, encodeURIComponent(String(requestParameters['projectStatusGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * *Deprecated: new integrations should prefer the `/status_updates/{status_gid}` route.*  Returns the complete record for a single status update.
     * Get a project status
     */
    async getProjectStatus(requestParameters: GetProjectStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectStatus200Response> {
        const response = await this.getProjectStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * *Deprecated: new integrations should prefer the `/status_updates` route.*  Returns the compact project status update records for all updates on the project.
     * Get statuses from a project
     */
    async getProjectStatusesForProjectRaw(requestParameters: GetProjectStatusesForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectStatusesForProject200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling getProjectStatusesForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/project_statuses`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectStatusesForProject200ResponseFromJSON(jsonValue));
    }

    /**
     * *Deprecated: new integrations should prefer the `/status_updates` route.*  Returns the compact project status update records for all updates on the project.
     * Get statuses from a project
     */
    async getProjectStatusesForProject(requestParameters: GetProjectStatusesForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectStatusesForProject200Response> {
        const response = await this.getProjectStatusesForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateProjectStatusForProjectOperationOptFieldsEnum = {
    Author: 'author',
    AuthorName: 'author.name',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    HtmlText: 'html_text',
    ModifiedAt: 'modified_at',
    Text: 'text',
    Title: 'title'
} as const;
export type CreateProjectStatusForProjectOperationOptFieldsEnum = typeof CreateProjectStatusForProjectOperationOptFieldsEnum[keyof typeof CreateProjectStatusForProjectOperationOptFieldsEnum];
/**
 * @export
 */
export const GetProjectStatusOptFieldsEnum = {
    Author: 'author',
    AuthorName: 'author.name',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    HtmlText: 'html_text',
    ModifiedAt: 'modified_at',
    Text: 'text',
    Title: 'title'
} as const;
export type GetProjectStatusOptFieldsEnum = typeof GetProjectStatusOptFieldsEnum[keyof typeof GetProjectStatusOptFieldsEnum];
/**
 * @export
 */
export const GetProjectStatusesForProjectOptFieldsEnum = {
    Author: 'author',
    AuthorName: 'author.name',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    HtmlText: 'html_text',
    ModifiedAt: 'modified_at',
    Offset: 'offset',
    Path: 'path',
    Text: 'text',
    Title: 'title',
    Uri: 'uri'
} as const;
export type GetProjectStatusesForProjectOptFieldsEnum = typeof GetProjectStatusesForProjectOptFieldsEnum[keyof typeof GetProjectStatusesForProjectOptFieldsEnum];
