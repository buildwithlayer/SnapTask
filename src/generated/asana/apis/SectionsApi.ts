/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddTaskForSectionRequest,
  ApproveAccessRequest200Response,
  ErrorResponse,
  GetSection200Response,
  GetSectionsForProject200Response,
  InsertSectionForProjectRequest,
  UpdateSectionRequest,
} from '../models/index.js';
import {
    AddTaskForSectionRequestFromJSON,
    AddTaskForSectionRequestToJSON,
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetSection200ResponseFromJSON,
    GetSection200ResponseToJSON,
    GetSectionsForProject200ResponseFromJSON,
    GetSectionsForProject200ResponseToJSON,
    InsertSectionForProjectRequestFromJSON,
    InsertSectionForProjectRequestToJSON,
    UpdateSectionRequestFromJSON,
    UpdateSectionRequestToJSON,
} from '../models/index.js';

export interface AddTaskForSectionOperationRequest {
    sectionGid: string;
    optPretty?: boolean;
    addTaskForSectionRequest?: AddTaskForSectionRequest;
}

export interface CreateSectionForProjectRequest {
    projectGid: string;
    optPretty?: boolean;
    optFields?: Array<CreateSectionForProjectOptFieldsEnum>;
    updateSectionRequest?: UpdateSectionRequest;
}

export interface DeleteSectionRequest {
    sectionGid: string;
    optPretty?: boolean;
}

export interface GetSectionRequest {
    sectionGid: string;
    optPretty?: boolean;
    optFields?: Array<GetSectionOptFieldsEnum>;
}

export interface GetSectionsForProjectRequest {
    projectGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetSectionsForProjectOptFieldsEnum>;
}

export interface InsertSectionForProjectOperationRequest {
    projectGid: string;
    optPretty?: boolean;
    insertSectionForProjectRequest?: InsertSectionForProjectRequest;
}

export interface UpdateSectionOperationRequest {
    sectionGid: string;
    optPretty?: boolean;
    optFields?: Array<UpdateSectionOperationOptFieldsEnum>;
    updateSectionRequest?: UpdateSectionRequest;
}

/**
 * 
 */
export class SectionsApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Add a task to a specific, existing section. This will remove the task from other sections of the project.  The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.  This does not work for separators (tasks with the resource_subtype of section).
     * Add task to section
     */
    async addTaskForSectionRaw(requestParameters: AddTaskForSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['sectionGid'] == null) {
            throw new runtime.RequiredError(
                'sectionGid',
                'Required parameter "sectionGid" was null or undefined when calling addTaskForSection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/sections/{section_gid}/addTask`;
        urlPath = urlPath.replace(`{${"section_gid"}}`, encodeURIComponent(String(requestParameters['sectionGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTaskForSectionRequestToJSON(requestParameters['addTaskForSectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Add a task to a specific, existing section. This will remove the task from other sections of the project.  The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.  This does not work for separators (tasks with the resource_subtype of section).
     * Add task to section
     */
    async addTaskForSection(requestParameters: AddTaskForSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.addTaskForSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new section in a project. Returns the full record of the newly created section.
     * Create a section in a project
     */
    async createSectionForProjectRaw(requestParameters: CreateSectionForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSection200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling createSectionForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/sections`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSectionRequestToJSON(requestParameters['updateSectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSection200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new section in a project. Returns the full record of the newly created section.
     * Create a section in a project
     */
    async createSectionForProject(requestParameters: CreateSectionForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSection200Response> {
        const response = await this.createSectionForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
     * Delete a section
     */
    async deleteSectionRaw(requestParameters: DeleteSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['sectionGid'] == null) {
            throw new runtime.RequiredError(
                'sectionGid',
                'Required parameter "sectionGid" was null or undefined when calling deleteSection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/sections/{section_gid}`;
        urlPath = urlPath.replace(`{${"section_gid"}}`, encodeURIComponent(String(requestParameters['sectionGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
     * Delete a section
     */
    async deleteSection(requestParameters: DeleteSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the complete record for a single section.
     * Get a section
     */
    async getSectionRaw(requestParameters: GetSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSection200Response>> {
        if (requestParameters['sectionGid'] == null) {
            throw new runtime.RequiredError(
                'sectionGid',
                'Required parameter "sectionGid" was null or undefined when calling getSection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/sections/{section_gid}`;
        urlPath = urlPath.replace(`{${"section_gid"}}`, encodeURIComponent(String(requestParameters['sectionGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSection200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete record for a single section.
     * Get a section
     */
    async getSection(requestParameters: GetSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSection200Response> {
        const response = await this.getSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the compact records for all sections in the specified project.
     * Get sections in a project
     */
    async getSectionsForProjectRaw(requestParameters: GetSectionsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSectionsForProject200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling getSectionsForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/sections`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSectionsForProject200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the compact records for all sections in the specified project.
     * Get sections in a project
     */
    async getSectionsForProject(requestParameters: GetSectionsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSectionsForProject200Response> {
        const response = await this.getSectionsForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Move sections relative to each other. One of `before_section` or `after_section` is required.  Sections cannot be moved between projects.  Returns an empty data block.
     * Move or Insert sections
     */
    async insertSectionForProjectRaw(requestParameters: InsertSectionForProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling insertSectionForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/sections/insert`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsertSectionForProjectRequestToJSON(requestParameters['insertSectionForProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Move sections relative to each other. One of `before_section` or `after_section` is required.  Sections cannot be moved between projects.  Returns an empty data block.
     * Move or Insert sections
     */
    async insertSectionForProject(requestParameters: InsertSectionForProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.insertSectionForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the `name` field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
     * Update a section
     */
    async updateSectionRaw(requestParameters: UpdateSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSection200Response>> {
        if (requestParameters['sectionGid'] == null) {
            throw new runtime.RequiredError(
                'sectionGid',
                'Required parameter "sectionGid" was null or undefined when calling updateSection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/sections/{section_gid}`;
        urlPath = urlPath.replace(`{${"section_gid"}}`, encodeURIComponent(String(requestParameters['sectionGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSectionRequestToJSON(requestParameters['updateSectionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSection200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the `name` field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
     * Update a section
     */
    async updateSection(requestParameters: UpdateSectionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSection200Response> {
        const response = await this.updateSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateSectionForProjectOptFieldsEnum = {
    CreatedAt: 'created_at',
    Name: 'name',
    Project: 'project',
    ProjectName: 'project.name',
    Projects: 'projects',
    ProjectsName: 'projects.name'
} as const;
export type CreateSectionForProjectOptFieldsEnum = typeof CreateSectionForProjectOptFieldsEnum[keyof typeof CreateSectionForProjectOptFieldsEnum];
/**
 * @export
 */
export const GetSectionOptFieldsEnum = {
    CreatedAt: 'created_at',
    Name: 'name',
    Project: 'project',
    ProjectName: 'project.name',
    Projects: 'projects',
    ProjectsName: 'projects.name'
} as const;
export type GetSectionOptFieldsEnum = typeof GetSectionOptFieldsEnum[keyof typeof GetSectionOptFieldsEnum];
/**
 * @export
 */
export const GetSectionsForProjectOptFieldsEnum = {
    CreatedAt: 'created_at',
    Name: 'name',
    Offset: 'offset',
    Path: 'path',
    Project: 'project',
    ProjectName: 'project.name',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    Uri: 'uri'
} as const;
export type GetSectionsForProjectOptFieldsEnum = typeof GetSectionsForProjectOptFieldsEnum[keyof typeof GetSectionsForProjectOptFieldsEnum];
/**
 * @export
 */
export const UpdateSectionOperationOptFieldsEnum = {
    CreatedAt: 'created_at',
    Name: 'name',
    Project: 'project',
    ProjectName: 'project.name',
    Projects: 'projects',
    ProjectsName: 'projects.name'
} as const;
export type UpdateSectionOperationOptFieldsEnum = typeof UpdateSectionOperationOptFieldsEnum[keyof typeof UpdateSectionOperationOptFieldsEnum];
