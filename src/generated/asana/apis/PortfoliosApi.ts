/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddCustomFieldSettingForPortfolio200Response,
  AddCustomFieldSettingForPortfolioRequest,
  AddItemForPortfolioRequest,
  AddMembersForPortfolioRequest,
  ApproveAccessRequest200Response,
  CreatePortfolio201Response,
  CreatePortfolioRequest,
  ErrorResponse,
  GetItemsForPortfolio200Response,
  GetPortfolios200Response,
  RemoveCustomFieldSettingForPortfolioRequest,
  RemoveItemForPortfolioRequest,
  RemoveMembersForPortfolioRequest,
} from '../models/index.js';
import {
    AddCustomFieldSettingForPortfolio200ResponseFromJSON,
    AddCustomFieldSettingForPortfolio200ResponseToJSON,
    AddCustomFieldSettingForPortfolioRequestFromJSON,
    AddCustomFieldSettingForPortfolioRequestToJSON,
    AddItemForPortfolioRequestFromJSON,
    AddItemForPortfolioRequestToJSON,
    AddMembersForPortfolioRequestFromJSON,
    AddMembersForPortfolioRequestToJSON,
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreatePortfolio201ResponseFromJSON,
    CreatePortfolio201ResponseToJSON,
    CreatePortfolioRequestFromJSON,
    CreatePortfolioRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetItemsForPortfolio200ResponseFromJSON,
    GetItemsForPortfolio200ResponseToJSON,
    GetPortfolios200ResponseFromJSON,
    GetPortfolios200ResponseToJSON,
    RemoveCustomFieldSettingForPortfolioRequestFromJSON,
    RemoveCustomFieldSettingForPortfolioRequestToJSON,
    RemoveItemForPortfolioRequestFromJSON,
    RemoveItemForPortfolioRequestToJSON,
    RemoveMembersForPortfolioRequestFromJSON,
    RemoveMembersForPortfolioRequestToJSON,
} from '../models/index.js';

export interface AddCustomFieldSettingForPortfolioOperationRequest {
    portfolioGid: string;
    addCustomFieldSettingForPortfolioRequest: AddCustomFieldSettingForPortfolioRequest;
    optPretty?: boolean;
}

export interface AddItemForPortfolioOperationRequest {
    portfolioGid: string;
    addItemForPortfolioRequest: AddItemForPortfolioRequest;
    optPretty?: boolean;
}

export interface AddMembersForPortfolioOperationRequest {
    portfolioGid: string;
    addMembersForPortfolioRequest: AddMembersForPortfolioRequest;
    optPretty?: boolean;
    optFields?: Array<AddMembersForPortfolioOperationOptFieldsEnum>;
}

export interface CreatePortfolioOperationRequest {
    createPortfolioRequest: CreatePortfolioRequest;
    optPretty?: boolean;
    optFields?: Array<CreatePortfolioOperationOptFieldsEnum>;
}

export interface DeletePortfolioRequest {
    portfolioGid: string;
    optPretty?: boolean;
}

export interface GetItemsForPortfolioRequest {
    portfolioGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetItemsForPortfolioOptFieldsEnum>;
}

export interface GetPortfolioRequest {
    portfolioGid: string;
    optPretty?: boolean;
    optFields?: Array<GetPortfolioOptFieldsEnum>;
}

export interface GetPortfoliosRequest {
    workspace: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    owner?: string;
    optFields?: Array<GetPortfoliosOptFieldsEnum>;
}

export interface RemoveCustomFieldSettingForPortfolioOperationRequest {
    portfolioGid: string;
    removeCustomFieldSettingForPortfolioRequest: RemoveCustomFieldSettingForPortfolioRequest;
    optPretty?: boolean;
}

export interface RemoveItemForPortfolioOperationRequest {
    portfolioGid: string;
    removeItemForPortfolioRequest: RemoveItemForPortfolioRequest;
    optPretty?: boolean;
}

export interface RemoveMembersForPortfolioOperationRequest {
    portfolioGid: string;
    removeMembersForPortfolioRequest: RemoveMembersForPortfolioRequest;
    optPretty?: boolean;
    optFields?: Array<RemoveMembersForPortfolioOperationOptFieldsEnum>;
}

export interface UpdatePortfolioRequest {
    portfolioGid: string;
    createPortfolioRequest: CreatePortfolioRequest;
    optPretty?: boolean;
    optFields?: Array<UpdatePortfolioOptFieldsEnum>;
}

/**
 * 
 */
export class PortfoliosApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
     * Add a custom field to a portfolio
     */
    async addCustomFieldSettingForPortfolioRaw(requestParameters: AddCustomFieldSettingForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCustomFieldSettingForPortfolio200Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling addCustomFieldSettingForPortfolio().'
            );
        }

        if (requestParameters['addCustomFieldSettingForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'addCustomFieldSettingForPortfolioRequest',
                'Required parameter "addCustomFieldSettingForPortfolioRequest" was null or undefined when calling addCustomFieldSettingForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:write"]);
        }


        let urlPath = `/portfolios/{portfolio_gid}/addCustomFieldSetting`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCustomFieldSettingForPortfolioRequestToJSON(requestParameters['addCustomFieldSettingForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCustomFieldSettingForPortfolio200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
     * Add a custom field to a portfolio
     */
    async addCustomFieldSettingForPortfolio(requestParameters: AddCustomFieldSettingForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCustomFieldSettingForPortfolio200Response> {
        const response = await this.addCustomFieldSettingForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Add an item to a portfolio. Returns an empty data block.
     * Add a portfolio item
     */
    async addItemForPortfolioRaw(requestParameters: AddItemForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling addItemForPortfolio().'
            );
        }

        if (requestParameters['addItemForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'addItemForPortfolioRequest',
                'Required parameter "addItemForPortfolioRequest" was null or undefined when calling addItemForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:write"]);
        }


        let urlPath = `/portfolios/{portfolio_gid}/addItem`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddItemForPortfolioRequestToJSON(requestParameters['addItemForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Add an item to a portfolio. Returns an empty data block.
     * Add a portfolio item
     */
    async addItemForPortfolio(requestParameters: AddItemForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.addItemForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
     * Add users to a portfolio
     */
    async addMembersForPortfolioRaw(requestParameters: AddMembersForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePortfolio201Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling addMembersForPortfolio().'
            );
        }

        if (requestParameters['addMembersForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'addMembersForPortfolioRequest',
                'Required parameter "addMembersForPortfolioRequest" was null or undefined when calling addMembersForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/portfolios/{portfolio_gid}/addMembers`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddMembersForPortfolioRequestToJSON(requestParameters['addMembersForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePortfolio201ResponseFromJSON(jsonValue));
    }

    /**
     * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
     * Add users to a portfolio
     */
    async addMembersForPortfolio(requestParameters: AddMembersForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePortfolio201Response> {
        const response = await this.addMembersForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
     * Create a portfolio
     */
    async createPortfolioRaw(requestParameters: CreatePortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePortfolio201Response>> {
        if (requestParameters['createPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'createPortfolioRequest',
                'Required parameter "createPortfolioRequest" was null or undefined when calling createPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:write"]);
        }


        let urlPath = `/portfolios`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePortfolioRequestToJSON(requestParameters['createPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePortfolio201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
     * Create a portfolio
     */
    async createPortfolio(requestParameters: CreatePortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePortfolio201Response> {
        const response = await this.createPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
     * Delete a portfolio
     */
    async deletePortfolioRaw(requestParameters: DeletePortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling deletePortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/portfolios/{portfolio_gid}`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
     * Delete a portfolio
     */
    async deletePortfolio(requestParameters: DeletePortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deletePortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>portfolios:read</code>  Get a list of the items in compact form in a portfolio.
     * Get portfolio items
     */
    async getItemsForPortfolioRaw(requestParameters: GetItemsForPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetItemsForPortfolio200Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling getItemsForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:read"]);
        }


        let urlPath = `/portfolios/{portfolio_gid}/items`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetItemsForPortfolio200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:read</code>  Get a list of the items in compact form in a portfolio.
     * Get portfolio items
     */
    async getItemsForPortfolio(requestParameters: GetItemsForPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetItemsForPortfolio200Response> {
        const response = await this.getItemsForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>portfolios:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>custom_field_settings</code></td>     <td><code>custom_fields:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Returns the complete portfolio record for a single portfolio.
     * Get a portfolio
     */
    async getPortfolioRaw(requestParameters: GetPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePortfolio201Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling getPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:read"]);
        }


        let urlPath = `/portfolios/{portfolio_gid}`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePortfolio201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>custom_field_settings</code></td>     <td><code>custom_fields:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Returns the complete portfolio record for a single portfolio.
     * Get a portfolio
     */
    async getPortfolio(requestParameters: GetPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePortfolio201Response> {
        const response = await this.getPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>portfolios:read</code>  Returns a list of the portfolios in compact representation that are owned by the current API user.
     * Get multiple portfolios
     */
    async getPortfoliosRaw(requestParameters: GetPortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPortfolios200Response>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getPortfolios().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['owner'] != null) {
            queryParameters['owner'] = requestParameters['owner'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:read"]);
        }


        let urlPath = `/portfolios`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPortfolios200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:read</code>  Returns a list of the portfolios in compact representation that are owned by the current API user.
     * Get multiple portfolios
     */
    async getPortfolios(requestParameters: GetPortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPortfolios200Response> {
        const response = await this.getPortfoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Removes a custom field setting from a portfolio.
     * Remove a custom field from a portfolio
     */
    async removeCustomFieldSettingForPortfolioRaw(requestParameters: RemoveCustomFieldSettingForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling removeCustomFieldSettingForPortfolio().'
            );
        }

        if (requestParameters['removeCustomFieldSettingForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'removeCustomFieldSettingForPortfolioRequest',
                'Required parameter "removeCustomFieldSettingForPortfolioRequest" was null or undefined when calling removeCustomFieldSettingForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:write"]);
        }


        let urlPath = `/portfolios/{portfolio_gid}/removeCustomFieldSetting`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveCustomFieldSettingForPortfolioRequestToJSON(requestParameters['removeCustomFieldSettingForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Removes a custom field setting from a portfolio.
     * Remove a custom field from a portfolio
     */
    async removeCustomFieldSettingForPortfolio(requestParameters: RemoveCustomFieldSettingForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeCustomFieldSettingForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Remove an item from a portfolio. Returns an empty data block.
     * Remove a portfolio item
     */
    async removeItemForPortfolioRaw(requestParameters: RemoveItemForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling removeItemForPortfolio().'
            );
        }

        if (requestParameters['removeItemForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'removeItemForPortfolioRequest',
                'Required parameter "removeItemForPortfolioRequest" was null or undefined when calling removeItemForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:write"]);
        }


        let urlPath = `/portfolios/{portfolio_gid}/removeItem`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveItemForPortfolioRequestToJSON(requestParameters['removeItemForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  Remove an item from a portfolio. Returns an empty data block.
     * Remove a portfolio item
     */
    async removeItemForPortfolio(requestParameters: RemoveItemForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeItemForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
     * Remove users from a portfolio
     */
    async removeMembersForPortfolioRaw(requestParameters: RemoveMembersForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePortfolio201Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling removeMembersForPortfolio().'
            );
        }

        if (requestParameters['removeMembersForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'removeMembersForPortfolioRequest',
                'Required parameter "removeMembersForPortfolioRequest" was null or undefined when calling removeMembersForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/portfolios/{portfolio_gid}/removeMembers`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveMembersForPortfolioRequestToJSON(requestParameters['removeMembersForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePortfolio201ResponseFromJSON(jsonValue));
    }

    /**
     * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
     * Remove users from a portfolio
     */
    async removeMembersForPortfolio(requestParameters: RemoveMembersForPortfolioOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePortfolio201Response> {
        const response = await this.removeMembersForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
     * Update a portfolio
     */
    async updatePortfolioRaw(requestParameters: UpdatePortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePortfolio201Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling updatePortfolio().'
            );
        }

        if (requestParameters['createPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'createPortfolioRequest',
                'Required parameter "createPortfolioRequest" was null or undefined when calling updatePortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["portfolios:write"]);
        }


        let urlPath = `/portfolios/{portfolio_gid}`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePortfolioRequestToJSON(requestParameters['createPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePortfolio201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>portfolios:write</code>  An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
     * Update a portfolio
     */
    async updatePortfolio(requestParameters: UpdatePortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePortfolio201Response> {
        const response = await this.updatePortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddMembersForPortfolioOperationOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DueOn: 'due_on',
    Members: 'members',
    MembersName: 'members.name',
    Name: 'name',
    Owner: 'owner',
    OwnerName: 'owner.name',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectTemplates: 'project_templates',
    ProjectTemplatesName: 'project_templates.name',
    Public: 'public',
    StartOn: 'start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type AddMembersForPortfolioOperationOptFieldsEnum = typeof AddMembersForPortfolioOperationOptFieldsEnum[keyof typeof AddMembersForPortfolioOperationOptFieldsEnum];
/**
 * @export
 */
export const CreatePortfolioOperationOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DueOn: 'due_on',
    Members: 'members',
    MembersName: 'members.name',
    Name: 'name',
    Owner: 'owner',
    OwnerName: 'owner.name',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectTemplates: 'project_templates',
    ProjectTemplatesName: 'project_templates.name',
    Public: 'public',
    StartOn: 'start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type CreatePortfolioOperationOptFieldsEnum = typeof CreatePortfolioOperationOptFieldsEnum[keyof typeof CreatePortfolioOperationOptFieldsEnum];
/**
 * @export
 */
export const GetItemsForPortfolioOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Offset: 'offset',
    Owner: 'owner',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetItemsForPortfolioOptFieldsEnum = typeof GetItemsForPortfolioOptFieldsEnum[keyof typeof GetItemsForPortfolioOptFieldsEnum];
/**
 * @export
 */
export const GetPortfolioOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DueOn: 'due_on',
    Members: 'members',
    MembersName: 'members.name',
    Name: 'name',
    Owner: 'owner',
    OwnerName: 'owner.name',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectTemplates: 'project_templates',
    ProjectTemplatesName: 'project_templates.name',
    Public: 'public',
    StartOn: 'start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetPortfolioOptFieldsEnum = typeof GetPortfolioOptFieldsEnum[keyof typeof GetPortfolioOptFieldsEnum];
/**
 * @export
 */
export const GetPortfoliosOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DueOn: 'due_on',
    Members: 'members',
    MembersName: 'members.name',
    Name: 'name',
    Offset: 'offset',
    Owner: 'owner',
    OwnerName: 'owner.name',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectTemplates: 'project_templates',
    ProjectTemplatesName: 'project_templates.name',
    Public: 'public',
    StartOn: 'start_on',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetPortfoliosOptFieldsEnum = typeof GetPortfoliosOptFieldsEnum[keyof typeof GetPortfoliosOptFieldsEnum];
/**
 * @export
 */
export const RemoveMembersForPortfolioOperationOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DueOn: 'due_on',
    Members: 'members',
    MembersName: 'members.name',
    Name: 'name',
    Owner: 'owner',
    OwnerName: 'owner.name',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectTemplates: 'project_templates',
    ProjectTemplatesName: 'project_templates.name',
    Public: 'public',
    StartOn: 'start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type RemoveMembersForPortfolioOperationOptFieldsEnum = typeof RemoveMembersForPortfolioOperationOptFieldsEnum[keyof typeof RemoveMembersForPortfolioOperationOptFieldsEnum];
/**
 * @export
 */
export const UpdatePortfolioOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DueOn: 'due_on',
    Members: 'members',
    MembersName: 'members.name',
    Name: 'name',
    Owner: 'owner',
    OwnerName: 'owner.name',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectTemplates: 'project_templates',
    ProjectTemplatesName: 'project_templates.name',
    Public: 'public',
    StartOn: 'start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type UpdatePortfolioOptFieldsEnum = typeof UpdatePortfolioOptFieldsEnum[keyof typeof UpdatePortfolioOptFieldsEnum];
