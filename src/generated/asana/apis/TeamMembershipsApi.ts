/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetTeamMembership200Response,
  GetTeamMemberships200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetTeamMembership200ResponseFromJSON,
    GetTeamMembership200ResponseToJSON,
    GetTeamMemberships200ResponseFromJSON,
    GetTeamMemberships200ResponseToJSON,
} from '../models/index.js';

export interface GetTeamMembershipRequest {
    teamMembershipGid: string;
    optPretty?: boolean;
    optFields?: Array<GetTeamMembershipOptFieldsEnum>;
}

export interface GetTeamMembershipsRequest {
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    team?: string;
    user?: string;
    workspace?: string;
    optFields?: Array<GetTeamMembershipsOptFieldsEnum>;
}

export interface GetTeamMembershipsForTeamRequest {
    teamGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetTeamMembershipsForTeamOptFieldsEnum>;
}

export interface GetTeamMembershipsForUserRequest {
    userGid: string;
    workspace: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetTeamMembershipsForUserOptFieldsEnum>;
}

/**
 * 
 */
export class TeamMembershipsApi extends runtime.BaseAPI {

    /**
     * Returns the complete team membership record for a single team membership.
     * Get a team membership
     */
    async getTeamMembershipRaw(requestParameters: GetTeamMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamMembership200Response>> {
        if (requestParameters['teamMembershipGid'] == null) {
            throw new runtime.RequiredError(
                'teamMembershipGid',
                'Required parameter "teamMembershipGid" was null or undefined when calling getTeamMembership().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/team_memberships/{team_membership_gid}`;
        urlPath = urlPath.replace(`{${"team_membership_gid"}}`, encodeURIComponent(String(requestParameters['teamMembershipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamMembership200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete team membership record for a single team membership.
     * Get a team membership
     */
    async getTeamMembership(requestParameters: GetTeamMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamMembership200Response> {
        const response = await this.getTeamMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns compact team membership records.
     * Get team memberships
     */
    async getTeamMembershipsRaw(requestParameters: GetTeamMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamMemberships200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['team'] != null) {
            queryParameters['team'] = requestParameters['team'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/team_memberships`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamMemberships200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns compact team membership records.
     * Get team memberships
     */
    async getTeamMemberships(requestParameters: GetTeamMembershipsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamMemberships200Response> {
        const response = await this.getTeamMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the compact team memberships for the team.
     * Get memberships from a team
     */
    async getTeamMembershipsForTeamRaw(requestParameters: GetTeamMembershipsForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamMemberships200Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling getTeamMembershipsForTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/teams/{team_gid}/team_memberships`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamMemberships200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the compact team memberships for the team.
     * Get memberships from a team
     */
    async getTeamMembershipsForTeam(requestParameters: GetTeamMembershipsForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamMemberships200Response> {
        const response = await this.getTeamMembershipsForTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the compact team membership records for the user.
     * Get memberships from a user
     */
    async getTeamMembershipsForUserRaw(requestParameters: GetTeamMembershipsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamMemberships200Response>> {
        if (requestParameters['userGid'] == null) {
            throw new runtime.RequiredError(
                'userGid',
                'Required parameter "userGid" was null or undefined when calling getTeamMembershipsForUser().'
            );
        }

        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getTeamMembershipsForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/users/{user_gid}/team_memberships`;
        urlPath = urlPath.replace(`{${"user_gid"}}`, encodeURIComponent(String(requestParameters['userGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamMemberships200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the compact team membership records for the user.
     * Get memberships from a user
     */
    async getTeamMembershipsForUser(requestParameters: GetTeamMembershipsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamMemberships200Response> {
        const response = await this.getTeamMembershipsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetTeamMembershipOptFieldsEnum = {
    IsAdmin: 'is_admin',
    IsGuest: 'is_guest',
    IsLimitedAccess: 'is_limited_access',
    Team: 'team',
    TeamName: 'team.name',
    User: 'user',
    UserName: 'user.name'
} as const;
export type GetTeamMembershipOptFieldsEnum = typeof GetTeamMembershipOptFieldsEnum[keyof typeof GetTeamMembershipOptFieldsEnum];
/**
 * @export
 */
export const GetTeamMembershipsOptFieldsEnum = {
    IsAdmin: 'is_admin',
    IsGuest: 'is_guest',
    IsLimitedAccess: 'is_limited_access',
    Offset: 'offset',
    Path: 'path',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri',
    User: 'user',
    UserName: 'user.name'
} as const;
export type GetTeamMembershipsOptFieldsEnum = typeof GetTeamMembershipsOptFieldsEnum[keyof typeof GetTeamMembershipsOptFieldsEnum];
/**
 * @export
 */
export const GetTeamMembershipsForTeamOptFieldsEnum = {
    IsAdmin: 'is_admin',
    IsGuest: 'is_guest',
    IsLimitedAccess: 'is_limited_access',
    Offset: 'offset',
    Path: 'path',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri',
    User: 'user',
    UserName: 'user.name'
} as const;
export type GetTeamMembershipsForTeamOptFieldsEnum = typeof GetTeamMembershipsForTeamOptFieldsEnum[keyof typeof GetTeamMembershipsForTeamOptFieldsEnum];
/**
 * @export
 */
export const GetTeamMembershipsForUserOptFieldsEnum = {
    IsAdmin: 'is_admin',
    IsGuest: 'is_guest',
    IsLimitedAccess: 'is_limited_access',
    Offset: 'offset',
    Path: 'path',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri',
    User: 'user',
    UserName: 'user.name'
} as const;
export type GetTeamMembershipsForUserOptFieldsEnum = typeof GetTeamMembershipsForUserOptFieldsEnum[keyof typeof GetTeamMembershipsForUserOptFieldsEnum];
