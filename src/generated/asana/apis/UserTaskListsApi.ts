/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetUserTaskList200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetUserTaskList200ResponseFromJSON,
    GetUserTaskList200ResponseToJSON,
} from '../models/index.js';

export interface GetUserTaskListRequest {
    userTaskListGid: string;
    optPretty?: boolean;
    optFields?: Array<GetUserTaskListOptFieldsEnum>;
}

export interface GetUserTaskListForUserRequest {
    userGid: string;
    workspace: string;
    optPretty?: boolean;
    optFields?: Array<GetUserTaskListForUserOptFieldsEnum>;
}

/**
 * 
 */
export class UserTaskListsApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the full record for a user task list.
     * Get a user task list
     */
    async getUserTaskListRaw(requestParameters: GetUserTaskListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserTaskList200Response>> {
        if (requestParameters['userTaskListGid'] == null) {
            throw new runtime.RequiredError(
                'userTaskListGid',
                'Required parameter "userTaskListGid" was null or undefined when calling getUserTaskList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/user_task_lists/{user_task_list_gid}`;
        urlPath = urlPath.replace(`{${"user_task_list_gid"}}`, encodeURIComponent(String(requestParameters['userTaskListGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserTaskList200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the full record for a user task list.
     * Get a user task list
     */
    async getUserTaskList(requestParameters: GetUserTaskListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserTaskList200Response> {
        const response = await this.getUserTaskListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the full record for a user\'s task list.
     * Get a user\'s task list
     */
    async getUserTaskListForUserRaw(requestParameters: GetUserTaskListForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserTaskList200Response>> {
        if (requestParameters['userGid'] == null) {
            throw new runtime.RequiredError(
                'userGid',
                'Required parameter "userGid" was null or undefined when calling getUserTaskListForUser().'
            );
        }

        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getUserTaskListForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/users/{user_gid}/user_task_list`;
        urlPath = urlPath.replace(`{${"user_gid"}}`, encodeURIComponent(String(requestParameters['userGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserTaskList200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the full record for a user\'s task list.
     * Get a user\'s task list
     */
    async getUserTaskListForUser(requestParameters: GetUserTaskListForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserTaskList200Response> {
        const response = await this.getUserTaskListForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetUserTaskListOptFieldsEnum = {
    Name: 'name',
    Owner: 'owner',
    Workspace: 'workspace'
} as const;
export type GetUserTaskListOptFieldsEnum = typeof GetUserTaskListOptFieldsEnum[keyof typeof GetUserTaskListOptFieldsEnum];
/**
 * @export
 */
export const GetUserTaskListForUserOptFieldsEnum = {
    Name: 'name',
    Owner: 'owner',
    Workspace: 'workspace'
} as const;
export type GetUserTaskListForUserOptFieldsEnum = typeof GetUserTaskListForUserOptFieldsEnum[keyof typeof GetUserTaskListForUserOptFieldsEnum];
