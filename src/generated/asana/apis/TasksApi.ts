/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddDependenciesForTaskRequest,
  AddDependentsForTaskRequest,
  AddFollowersRequest,
  AddProjectForTaskRequest,
  AddTagForTaskRequest,
  ApproveAccessRequest200Response,
  CreateTask201Response,
  CreateTaskRequest,
  DuplicateTaskRequest,
  ErrorResponse,
  GetJob200Response,
  GetTasks200Response,
  RemoveFollowerForTaskRequest,
  RemoveProjectForTaskRequest,
  RemoveTagForTaskRequest,
  SearchTasksForWorkspace200Response,
  SetParentForTaskRequest,
} from '../models/index.js';
import {
    AddDependenciesForTaskRequestFromJSON,
    AddDependenciesForTaskRequestToJSON,
    AddDependentsForTaskRequestFromJSON,
    AddDependentsForTaskRequestToJSON,
    AddFollowersRequestFromJSON,
    AddFollowersRequestToJSON,
    AddProjectForTaskRequestFromJSON,
    AddProjectForTaskRequestToJSON,
    AddTagForTaskRequestFromJSON,
    AddTagForTaskRequestToJSON,
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateTask201ResponseFromJSON,
    CreateTask201ResponseToJSON,
    CreateTaskRequestFromJSON,
    CreateTaskRequestToJSON,
    DuplicateTaskRequestFromJSON,
    DuplicateTaskRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetJob200ResponseFromJSON,
    GetJob200ResponseToJSON,
    GetTasks200ResponseFromJSON,
    GetTasks200ResponseToJSON,
    RemoveFollowerForTaskRequestFromJSON,
    RemoveFollowerForTaskRequestToJSON,
    RemoveProjectForTaskRequestFromJSON,
    RemoveProjectForTaskRequestToJSON,
    RemoveTagForTaskRequestFromJSON,
    RemoveTagForTaskRequestToJSON,
    SearchTasksForWorkspace200ResponseFromJSON,
    SearchTasksForWorkspace200ResponseToJSON,
    SetParentForTaskRequestFromJSON,
    SetParentForTaskRequestToJSON,
} from '../models/index.js';

export interface AddDependenciesForTaskOperationRequest {
    taskGid: string;
    addDependenciesForTaskRequest: AddDependenciesForTaskRequest;
    optPretty?: boolean;
}

export interface AddDependentsForTaskOperationRequest {
    taskGid: string;
    addDependentsForTaskRequest: AddDependentsForTaskRequest;
    optPretty?: boolean;
}

export interface AddFollowersForTaskRequest {
    taskGid: string;
    addFollowersRequest: AddFollowersRequest;
    optPretty?: boolean;
    optFields?: Array<AddFollowersForTaskOptFieldsEnum>;
}

export interface AddProjectForTaskOperationRequest {
    taskGid: string;
    addProjectForTaskRequest: AddProjectForTaskRequest;
    optPretty?: boolean;
}

export interface AddTagForTaskOperationRequest {
    taskGid: string;
    addTagForTaskRequest: AddTagForTaskRequest;
    optPretty?: boolean;
}

export interface CreateSubtaskForTaskRequest {
    taskGid: string;
    createTaskRequest: CreateTaskRequest;
    optPretty?: boolean;
    optFields?: Array<CreateSubtaskForTaskOptFieldsEnum>;
}

export interface CreateTaskOperationRequest {
    createTaskRequest: CreateTaskRequest;
    optPretty?: boolean;
    optFields?: Array<CreateTaskOperationOptFieldsEnum>;
}

export interface DeleteTaskRequest {
    taskGid: string;
    optPretty?: boolean;
}

export interface DuplicateTaskOperationRequest {
    taskGid: string;
    duplicateTaskRequest: DuplicateTaskRequest;
    optPretty?: boolean;
    optFields?: Array<DuplicateTaskOperationOptFieldsEnum>;
}

export interface GetDependenciesForTaskRequest {
    taskGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetDependenciesForTaskOptFieldsEnum>;
}

export interface GetDependentsForTaskRequest {
    taskGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetDependentsForTaskOptFieldsEnum>;
}

export interface GetSubtasksForTaskRequest {
    taskGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetSubtasksForTaskOptFieldsEnum>;
}

export interface GetTaskRequest {
    taskGid: string;
    optPretty?: boolean;
    optFields?: Array<GetTaskOptFieldsEnum>;
}

export interface GetTaskForCustomIDRequest {
    workspaceGid: string;
    customId: string;
}

export interface GetTasksRequest {
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    assignee?: string;
    project?: string;
    section?: string;
    workspace?: string;
    completedSince?: Date;
    modifiedSince?: Date;
    optFields?: Array<GetTasksOptFieldsEnum>;
}

export interface GetTasksForProjectRequest {
    projectGid: string;
    completedSince?: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetTasksForProjectOptFieldsEnum>;
}

export interface GetTasksForSectionRequest {
    sectionGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    completedSince?: string;
    optFields?: Array<GetTasksForSectionOptFieldsEnum>;
}

export interface GetTasksForTagRequest {
    tagGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetTasksForTagOptFieldsEnum>;
}

export interface GetTasksForUserTaskListRequest {
    userTaskListGid: string;
    completedSince?: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetTasksForUserTaskListOptFieldsEnum>;
}

export interface RemoveDependenciesForTaskRequest {
    taskGid: string;
    addDependenciesForTaskRequest: AddDependenciesForTaskRequest;
    optPretty?: boolean;
}

export interface RemoveDependentsForTaskRequest {
    taskGid: string;
    addDependentsForTaskRequest: AddDependentsForTaskRequest;
    optPretty?: boolean;
}

export interface RemoveFollowerForTaskOperationRequest {
    taskGid: string;
    removeFollowerForTaskRequest: RemoveFollowerForTaskRequest;
    optPretty?: boolean;
    optFields?: Array<RemoveFollowerForTaskOperationOptFieldsEnum>;
}

export interface RemoveProjectForTaskOperationRequest {
    taskGid: string;
    removeProjectForTaskRequest: RemoveProjectForTaskRequest;
    optPretty?: boolean;
}

export interface RemoveTagForTaskOperationRequest {
    taskGid: string;
    removeTagForTaskRequest: RemoveTagForTaskRequest;
    optPretty?: boolean;
}

export interface SearchTasksForWorkspaceRequest {
    workspaceGid: string;
    optPretty?: boolean;
    text?: string;
    resourceSubtype?: SearchTasksForWorkspaceResourceSubtypeEnum;
    assigneeAny?: string;
    assigneeNot?: string;
    portfoliosAny?: string;
    projectsAny?: string;
    projectsNot?: string;
    projectsAll?: string;
    sectionsAny?: string;
    sectionsNot?: string;
    sectionsAll?: string;
    tagsAny?: string;
    tagsNot?: string;
    tagsAll?: string;
    teamsAny?: string;
    followersAny?: string;
    followersNot?: string;
    createdByAny?: string;
    createdByNot?: string;
    assignedByAny?: string;
    assignedByNot?: string;
    likedByNot?: string;
    commentedOnByNot?: string;
    dueOnBefore?: Date;
    dueOnAfter?: Date;
    dueOn?: Date | null;
    dueAtBefore?: Date;
    dueAtAfter?: Date;
    startOnBefore?: Date;
    startOnAfter?: Date;
    startOn?: Date | null;
    createdOnBefore?: Date;
    createdOnAfter?: Date;
    createdOn?: Date | null;
    createdAtBefore?: Date;
    createdAtAfter?: Date;
    completedOnBefore?: Date;
    completedOnAfter?: Date;
    completedOn?: Date | null;
    completedAtBefore?: Date;
    completedAtAfter?: Date;
    modifiedOnBefore?: Date;
    modifiedOnAfter?: Date;
    modifiedOn?: Date | null;
    modifiedAtBefore?: Date;
    modifiedAtAfter?: Date;
    isBlocking?: boolean;
    isBlocked?: boolean;
    hasAttachment?: boolean;
    completed?: boolean;
    isSubtask?: boolean;
    sortBy?: SearchTasksForWorkspaceSortByEnum;
    sortAscending?: boolean;
    optFields?: Array<SearchTasksForWorkspaceOptFieldsEnum>;
}

export interface SetParentForTaskOperationRequest {
    taskGid: string;
    setParentForTaskRequest: SetParentForTaskRequest;
    optPretty?: boolean;
    optFields?: Array<SetParentForTaskOperationOptFieldsEnum>;
}

export interface UpdateTaskRequest {
    taskGid: string;
    createTaskRequest: CreateTaskRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateTaskOptFieldsEnum>;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     * Set dependencies for a task
     */
    async addDependenciesForTaskRaw(requestParameters: AddDependenciesForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling addDependenciesForTask().'
            );
        }

        if (requestParameters['addDependenciesForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'addDependenciesForTaskRequest',
                'Required parameter "addDependenciesForTaskRequest" was null or undefined when calling addDependenciesForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/addDependencies`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDependenciesForTaskRequestToJSON(requestParameters['addDependenciesForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     * Set dependencies for a task
     */
    async addDependenciesForTask(requestParameters: AddDependenciesForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.addDependenciesForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     * Set dependents for a task
     */
    async addDependentsForTaskRaw(requestParameters: AddDependentsForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling addDependentsForTask().'
            );
        }

        if (requestParameters['addDependentsForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'addDependentsForTaskRequest',
                'Required parameter "addDependentsForTaskRequest" was null or undefined when calling addDependentsForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/addDependents`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDependentsForTaskRequestToJSON(requestParameters['addDependentsForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     * Set dependents for a task
     */
    async addDependentsForTask(requestParameters: AddDependentsForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.addDependentsForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     * Add followers to a task
     */
    async addFollowersForTaskRaw(requestParameters: AddFollowersForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTask201Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling addFollowersForTask().'
            );
        }

        if (requestParameters['addFollowersRequest'] == null) {
            throw new runtime.RequiredError(
                'addFollowersRequest',
                'Required parameter "addFollowersRequest" was null or undefined when calling addFollowersForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/addFollowers`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFollowersRequestToJSON(requestParameters['addFollowersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTask201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     * Add followers to a task
     */
    async addFollowersForTask(requestParameters: AddFollowersForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTask201Response> {
        const response = await this.addFollowersForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  `addProject` can also be used to reorder a task within a project or section that already contains it.  At most one of `insert_before`, `insert_after`, or `section` should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify `insert_before` or `insert_after` and a task within the section to anchor the position of this task.  A task can have at most 20 projects multi-homed to it.  Returns an empty data block.
     * Add a project to a task
     */
    async addProjectForTaskRaw(requestParameters: AddProjectForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling addProjectForTask().'
            );
        }

        if (requestParameters['addProjectForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'addProjectForTaskRequest',
                'Required parameter "addProjectForTaskRequest" was null or undefined when calling addProjectForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/addProject`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProjectForTaskRequestToJSON(requestParameters['addProjectForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  `addProject` can also be used to reorder a task within a project or section that already contains it.  At most one of `insert_before`, `insert_after`, or `section` should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify `insert_before` or `insert_after` and a task within the section to anchor the position of this task.  A task can have at most 20 projects multi-homed to it.  Returns an empty data block.
     * Add a project to a task
     */
    async addProjectForTask(requestParameters: AddProjectForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.addProjectForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Adds a tag to a task. Returns an empty data block.
     * Add a tag to a task
     */
    async addTagForTaskRaw(requestParameters: AddTagForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling addTagForTask().'
            );
        }

        if (requestParameters['addTagForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'addTagForTaskRequest',
                'Required parameter "addTagForTaskRequest" was null or undefined when calling addTagForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/addTag`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddTagForTaskRequestToJSON(requestParameters['addTagForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Adds a tag to a task. Returns an empty data block.
     * Add a tag to a task
     */
    async addTagForTask(requestParameters: AddTagForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.addTagForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     * Create a subtask
     */
    async createSubtaskForTaskRaw(requestParameters: CreateSubtaskForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTask201Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling createSubtaskForTask().'
            );
        }

        if (requestParameters['createTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'createTaskRequest',
                'Required parameter "createTaskRequest" was null or undefined when calling createSubtaskForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/subtasks`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskRequestToJSON(requestParameters['createTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTask201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     * Create a subtask
     */
    async createSubtaskForTask(requestParameters: CreateSubtaskForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTask201Response> {
        const response = await this.createSubtaskForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Creating a new task is as easy as POSTing to the `/tasks` endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify `projects` or a `parent` task instead.
     * Create a task
     */
    async createTaskRaw(requestParameters: CreateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTask201Response>> {
        if (requestParameters['createTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'createTaskRequest',
                'Required parameter "createTaskRequest" was null or undefined when calling createTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskRequestToJSON(requestParameters['createTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTask201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Creating a new task is as easy as POSTing to the `/tasks` endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify `projects` or a `parent` task instead.
     * Create a task
     */
    async createTask(requestParameters: CreateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTask201Response> {
        const response = await this.createTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:delete</code>  A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     * Delete a task
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling deleteTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:delete"]);
        }


        let urlPath = `/tasks/{task_gid}`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:delete</code>  A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     * Delete a task
     */
    async deleteTask(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Creates and returns a job that will asynchronously handle the duplication.
     * Duplicate a task
     */
    async duplicateTaskRaw(requestParameters: DuplicateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetJob200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling duplicateTask().'
            );
        }

        if (requestParameters['duplicateTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'duplicateTaskRequest',
                'Required parameter "duplicateTaskRequest" was null or undefined when calling duplicateTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/duplicate`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DuplicateTaskRequestToJSON(requestParameters['duplicateTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJob200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Creates and returns a job that will asynchronously handle the duplication.
     * Duplicate a task
     */
    async duplicateTask(requestParameters: DuplicateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetJob200Response> {
        const response = await this.duplicateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact representations of all of the dependencies of a task.
     * Get dependencies from a task
     */
    async getDependenciesForTaskRaw(requestParameters: GetDependenciesForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasks200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling getDependenciesForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/tasks/{task_gid}/dependencies`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact representations of all of the dependencies of a task.
     * Get dependencies from a task
     */
    async getDependenciesForTask(requestParameters: GetDependenciesForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasks200Response> {
        const response = await this.getDependenciesForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact representations of all of the dependents of a task.
     * Get dependents from a task
     */
    async getDependentsForTaskRaw(requestParameters: GetDependentsForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasks200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling getDependentsForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/tasks/{task_gid}/dependents`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact representations of all of the dependents of a task.
     * Get dependents from a task
     */
    async getDependentsForTask(requestParameters: GetDependentsForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasks200Response> {
        const response = await this.getDependentsForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns a compact representation of all of the subtasks of a task.
     * Get subtasks from a task
     */
    async getSubtasksForTaskRaw(requestParameters: GetSubtasksForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasks200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling getSubtasksForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/tasks/{task_gid}/subtasks`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns a compact representation of all of the subtasks of a task.
     * Get subtasks from a task
     */
    async getSubtasksForTask(requestParameters: GetSubtasksForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasks200Response> {
        const response = await this.getSubtasksForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>memberships</code></td>     <td><code>projects:read</code>, <code>project_sections:read</code></td>   </tr>   <tr>     <td><code>actual_time_minutes</code></td>     <td><code>time_tracking_entries:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Returns the complete task record for a single task.
     * Get a task
     */
    async getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTask201Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling getTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/tasks/{task_gid}`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTask201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>memberships</code></td>     <td><code>projects:read</code>, <code>project_sections:read</code></td>   </tr>   <tr>     <td><code>actual_time_minutes</code></td>     <td><code>time_tracking_entries:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Returns the complete task record for a single task.
     * Get a task
     */
    async getTask(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTask201Response> {
        const response = await this.getTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>memberships</code></td>     <td><code>projects:read</code>, <code>project_sections:read</code></td>   </tr>   <tr>     <td><code>actual_time_minutes</code></td>     <td><code>time_tracking_entries:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Returns a task given a custom ID shortcode.
     * Get a task for a given custom ID
     */
    async getTaskForCustomIDRaw(requestParameters: GetTaskForCustomIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTask201Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling getTaskForCustomID().'
            );
        }

        if (requestParameters['customId'] == null) {
            throw new runtime.RequiredError(
                'customId',
                'Required parameter "customId" was null or undefined when calling getTaskForCustomID().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/workspaces/{workspace_gid}/tasks/custom_id/{custom_id}`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));
        urlPath = urlPath.replace(`{${"custom_id"}}`, encodeURIComponent(String(requestParameters['customId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTask201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>memberships</code></td>     <td><code>projects:read</code>, <code>project_sections:read</code></td>   </tr>   <tr>     <td><code>actual_time_minutes</code></td>     <td><code>time_tracking_entries:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Returns a task given a custom ID shortcode.
     * Get a task for a given custom ID
     */
    async getTaskForCustomID(requestParameters: GetTaskForCustomIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTask201Response> {
        const response = await this.getTaskForCustomIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/reference/searchtasksforworkspace).
     * Get multiple tasks
     */
    async getTasksRaw(requestParameters: GetTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasks200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['assignee'] != null) {
            queryParameters['assignee'] = requestParameters['assignee'];
        }

        if (requestParameters['project'] != null) {
            queryParameters['project'] = requestParameters['project'];
        }

        if (requestParameters['section'] != null) {
            queryParameters['section'] = requestParameters['section'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['completedSince'] != null) {
            queryParameters['completed_since'] = (requestParameters['completedSince'] as any).toISOString();
        }

        if (requestParameters['modifiedSince'] != null) {
            queryParameters['modified_since'] = (requestParameters['modifiedSince'] as any).toISOString();
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/tasks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/reference/searchtasksforworkspace).
     * Get multiple tasks
     */
    async getTasks(requestParameters: GetTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasks200Response> {
        const response = await this.getTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * Get tasks from a project
     */
    async getTasksForProjectRaw(requestParameters: GetTasksForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasks200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling getTasksForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['completedSince'] != null) {
            queryParameters['completed_since'] = requestParameters['completedSince'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/projects/{project_gid}/tasks`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * Get tasks from a project
     */
    async getTasksForProject(requestParameters: GetTasksForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasks200Response> {
        const response = await this.getTasksForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  *Board view only*: Returns the compact section records for all tasks within the given section.
     * Get tasks from a section
     */
    async getTasksForSectionRaw(requestParameters: GetTasksForSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasks200Response>> {
        if (requestParameters['sectionGid'] == null) {
            throw new runtime.RequiredError(
                'sectionGid',
                'Required parameter "sectionGid" was null or undefined when calling getTasksForSection().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['completedSince'] != null) {
            queryParameters['completed_since'] = requestParameters['completedSince'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/sections/{section_gid}/tasks`;
        urlPath = urlPath.replace(`{${"section_gid"}}`, encodeURIComponent(String(requestParameters['sectionGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  *Board view only*: Returns the compact section records for all tasks within the given section.
     * Get tasks from a section
     */
    async getTasksForSection(requestParameters: GetTasksForSectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasks200Response> {
        const response = await this.getTasksForSectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     * Get tasks from a tag
     */
    async getTasksForTagRaw(requestParameters: GetTasksForTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasks200Response>> {
        if (requestParameters['tagGid'] == null) {
            throw new runtime.RequiredError(
                'tagGid',
                'Required parameter "tagGid" was null or undefined when calling getTasksForTag().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/tags/{tag_gid}/tasks`;
        urlPath = urlPath.replace(`{${"tag_gid"}}`, encodeURIComponent(String(requestParameters['tagGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     * Get tasks from a tag
     */
    async getTasksForTag(requestParameters: GetTasksForTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasks200Response> {
        const response = await this.getTasksForTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     * Get tasks from a user task list
     */
    async getTasksForUserTaskListRaw(requestParameters: GetTasksForUserTaskListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTasks200Response>> {
        if (requestParameters['userTaskListGid'] == null) {
            throw new runtime.RequiredError(
                'userTaskListGid',
                'Required parameter "userTaskListGid" was null or undefined when calling getTasksForUserTaskList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['completedSince'] != null) {
            queryParameters['completed_since'] = requestParameters['completedSince'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/user_task_lists/{user_task_list_gid}/tasks`;
        urlPath = urlPath.replace(`{${"user_task_list_gid"}}`, encodeURIComponent(String(requestParameters['userTaskListGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     * Get tasks from a user task list
     */
    async getTasksForUserTaskList(requestParameters: GetTasksForUserTaskListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTasks200Response> {
        const response = await this.getTasksForUserTaskListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Unlinks a set of dependencies from this task.
     * Unlink dependencies from a task
     */
    async removeDependenciesForTaskRaw(requestParameters: RemoveDependenciesForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling removeDependenciesForTask().'
            );
        }

        if (requestParameters['addDependenciesForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'addDependenciesForTaskRequest',
                'Required parameter "addDependenciesForTaskRequest" was null or undefined when calling removeDependenciesForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/removeDependencies`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDependenciesForTaskRequestToJSON(requestParameters['addDependenciesForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Unlinks a set of dependencies from this task.
     * Unlink dependencies from a task
     */
    async removeDependenciesForTask(requestParameters: RemoveDependenciesForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeDependenciesForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Unlinks a set of dependents from this task.
     * Unlink dependents from a task
     */
    async removeDependentsForTaskRaw(requestParameters: RemoveDependentsForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling removeDependentsForTask().'
            );
        }

        if (requestParameters['addDependentsForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'addDependentsForTaskRequest',
                'Required parameter "addDependentsForTaskRequest" was null or undefined when calling removeDependentsForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/removeDependents`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddDependentsForTaskRequestToJSON(requestParameters['addDependentsForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Unlinks a set of dependents from this task.
     * Unlink dependents from a task
     */
    async removeDependentsForTask(requestParameters: RemoveDependentsForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeDependentsForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     * Remove followers from a task
     */
    async removeFollowerForTaskRaw(requestParameters: RemoveFollowerForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTask201Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling removeFollowerForTask().'
            );
        }

        if (requestParameters['removeFollowerForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'removeFollowerForTaskRequest',
                'Required parameter "removeFollowerForTaskRequest" was null or undefined when calling removeFollowerForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/removeFollowers`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveFollowerForTaskRequestToJSON(requestParameters['removeFollowerForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTask201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     * Remove followers from a task
     */
    async removeFollowerForTask(requestParameters: RemoveFollowerForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTask201Response> {
        const response = await this.removeFollowerForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     * Remove a project from a task
     */
    async removeProjectForTaskRaw(requestParameters: RemoveProjectForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling removeProjectForTask().'
            );
        }

        if (requestParameters['removeProjectForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'removeProjectForTaskRequest',
                'Required parameter "removeProjectForTaskRequest" was null or undefined when calling removeProjectForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/removeProject`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveProjectForTaskRequestToJSON(requestParameters['removeProjectForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     * Remove a project from a task
     */
    async removeProjectForTask(requestParameters: RemoveProjectForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeProjectForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Removes a tag from a task. Returns an empty data block.
     * Remove a tag from a task
     */
    async removeTagForTaskRaw(requestParameters: RemoveTagForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling removeTagForTask().'
            );
        }

        if (requestParameters['removeTagForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'removeTagForTaskRequest',
                'Required parameter "removeTagForTaskRequest" was null or undefined when calling removeTagForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/removeTag`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveTagForTaskRequestToJSON(requestParameters['removeTagForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  Removes a tag from a task. Returns an empty data block.
     * Remove a tag from a task
     */
    async removeTagForTask(requestParameters: RemoveTagForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeTagForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  To mirror the functionality of the Asana web app\'s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product\'s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you\'re looking for only tasks in a section, omit the `projects.any` from the request.*
     * Search tasks in a workspace
     */
    async searchTasksForWorkspaceRaw(requestParameters: SearchTasksForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchTasksForWorkspace200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling searchTasksForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['text'] != null) {
            queryParameters['text'] = requestParameters['text'];
        }

        if (requestParameters['resourceSubtype'] != null) {
            queryParameters['resource_subtype'] = requestParameters['resourceSubtype'];
        }

        if (requestParameters['assigneeAny'] != null) {
            queryParameters['assignee.any'] = requestParameters['assigneeAny'];
        }

        if (requestParameters['assigneeNot'] != null) {
            queryParameters['assignee.not'] = requestParameters['assigneeNot'];
        }

        if (requestParameters['portfoliosAny'] != null) {
            queryParameters['portfolios.any'] = requestParameters['portfoliosAny'];
        }

        if (requestParameters['projectsAny'] != null) {
            queryParameters['projects.any'] = requestParameters['projectsAny'];
        }

        if (requestParameters['projectsNot'] != null) {
            queryParameters['projects.not'] = requestParameters['projectsNot'];
        }

        if (requestParameters['projectsAll'] != null) {
            queryParameters['projects.all'] = requestParameters['projectsAll'];
        }

        if (requestParameters['sectionsAny'] != null) {
            queryParameters['sections.any'] = requestParameters['sectionsAny'];
        }

        if (requestParameters['sectionsNot'] != null) {
            queryParameters['sections.not'] = requestParameters['sectionsNot'];
        }

        if (requestParameters['sectionsAll'] != null) {
            queryParameters['sections.all'] = requestParameters['sectionsAll'];
        }

        if (requestParameters['tagsAny'] != null) {
            queryParameters['tags.any'] = requestParameters['tagsAny'];
        }

        if (requestParameters['tagsNot'] != null) {
            queryParameters['tags.not'] = requestParameters['tagsNot'];
        }

        if (requestParameters['tagsAll'] != null) {
            queryParameters['tags.all'] = requestParameters['tagsAll'];
        }

        if (requestParameters['teamsAny'] != null) {
            queryParameters['teams.any'] = requestParameters['teamsAny'];
        }

        if (requestParameters['followersAny'] != null) {
            queryParameters['followers.any'] = requestParameters['followersAny'];
        }

        if (requestParameters['followersNot'] != null) {
            queryParameters['followers.not'] = requestParameters['followersNot'];
        }

        if (requestParameters['createdByAny'] != null) {
            queryParameters['created_by.any'] = requestParameters['createdByAny'];
        }

        if (requestParameters['createdByNot'] != null) {
            queryParameters['created_by.not'] = requestParameters['createdByNot'];
        }

        if (requestParameters['assignedByAny'] != null) {
            queryParameters['assigned_by.any'] = requestParameters['assignedByAny'];
        }

        if (requestParameters['assignedByNot'] != null) {
            queryParameters['assigned_by.not'] = requestParameters['assignedByNot'];
        }

        if (requestParameters['likedByNot'] != null) {
            queryParameters['liked_by.not'] = requestParameters['likedByNot'];
        }

        if (requestParameters['commentedOnByNot'] != null) {
            queryParameters['commented_on_by.not'] = requestParameters['commentedOnByNot'];
        }

        if (requestParameters['dueOnBefore'] != null) {
            queryParameters['due_on.before'] = (requestParameters['dueOnBefore'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['dueOnAfter'] != null) {
            queryParameters['due_on.after'] = (requestParameters['dueOnAfter'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['dueOn'] != null) {
            queryParameters['due_on'] = (requestParameters['dueOn'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['dueAtBefore'] != null) {
            queryParameters['due_at.before'] = (requestParameters['dueAtBefore'] as any).toISOString();
        }

        if (requestParameters['dueAtAfter'] != null) {
            queryParameters['due_at.after'] = (requestParameters['dueAtAfter'] as any).toISOString();
        }

        if (requestParameters['startOnBefore'] != null) {
            queryParameters['start_on.before'] = (requestParameters['startOnBefore'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['startOnAfter'] != null) {
            queryParameters['start_on.after'] = (requestParameters['startOnAfter'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['startOn'] != null) {
            queryParameters['start_on'] = (requestParameters['startOn'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['createdOnBefore'] != null) {
            queryParameters['created_on.before'] = (requestParameters['createdOnBefore'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['createdOnAfter'] != null) {
            queryParameters['created_on.after'] = (requestParameters['createdOnAfter'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['createdOn'] != null) {
            queryParameters['created_on'] = (requestParameters['createdOn'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['createdAtBefore'] != null) {
            queryParameters['created_at.before'] = (requestParameters['createdAtBefore'] as any).toISOString();
        }

        if (requestParameters['createdAtAfter'] != null) {
            queryParameters['created_at.after'] = (requestParameters['createdAtAfter'] as any).toISOString();
        }

        if (requestParameters['completedOnBefore'] != null) {
            queryParameters['completed_on.before'] = (requestParameters['completedOnBefore'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['completedOnAfter'] != null) {
            queryParameters['completed_on.after'] = (requestParameters['completedOnAfter'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['completedOn'] != null) {
            queryParameters['completed_on'] = (requestParameters['completedOn'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['completedAtBefore'] != null) {
            queryParameters['completed_at.before'] = (requestParameters['completedAtBefore'] as any).toISOString();
        }

        if (requestParameters['completedAtAfter'] != null) {
            queryParameters['completed_at.after'] = (requestParameters['completedAtAfter'] as any).toISOString();
        }

        if (requestParameters['modifiedOnBefore'] != null) {
            queryParameters['modified_on.before'] = (requestParameters['modifiedOnBefore'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['modifiedOnAfter'] != null) {
            queryParameters['modified_on.after'] = (requestParameters['modifiedOnAfter'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['modifiedOn'] != null) {
            queryParameters['modified_on'] = (requestParameters['modifiedOn'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['modifiedAtBefore'] != null) {
            queryParameters['modified_at.before'] = (requestParameters['modifiedAtBefore'] as any).toISOString();
        }

        if (requestParameters['modifiedAtAfter'] != null) {
            queryParameters['modified_at.after'] = (requestParameters['modifiedAtAfter'] as any).toISOString();
        }

        if (requestParameters['isBlocking'] != null) {
            queryParameters['is_blocking'] = requestParameters['isBlocking'];
        }

        if (requestParameters['isBlocked'] != null) {
            queryParameters['is_blocked'] = requestParameters['isBlocked'];
        }

        if (requestParameters['hasAttachment'] != null) {
            queryParameters['has_attachment'] = requestParameters['hasAttachment'];
        }

        if (requestParameters['completed'] != null) {
            queryParameters['completed'] = requestParameters['completed'];
        }

        if (requestParameters['isSubtask'] != null) {
            queryParameters['is_subtask'] = requestParameters['isSubtask'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortAscending'] != null) {
            queryParameters['sort_ascending'] = requestParameters['sortAscending'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:read"]);
        }


        let urlPath = `/workspaces/{workspace_gid}/tasks/search`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTasksForWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:read</code>  To mirror the functionality of the Asana web app\'s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product\'s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you\'re looking for only tasks in a section, omit the `projects.any` from the request.*
     * Search tasks in a workspace
     */
    async searchTasksForWorkspace(requestParameters: SearchTasksForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchTasksForWorkspace200Response> {
        const response = await this.searchTasksForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
     * Set the parent of a task
     */
    async setParentForTaskRaw(requestParameters: SetParentForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTask201Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling setParentForTask().'
            );
        }

        if (requestParameters['setParentForTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'setParentForTaskRequest',
                'Required parameter "setParentForTaskRequest" was null or undefined when calling setParentForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}/setParent`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetParentForTaskRequestToJSON(requestParameters['setParentForTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTask201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
     * Set the parent of a task
     */
    async setParentForTask(requestParameters: SetParentForTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTask201Response> {
        const response = await this.setParentForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     * Update a task
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTask201Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling updateTask().'
            );
        }

        if (requestParameters['createTaskRequest'] == null) {
            throw new runtime.RequiredError(
                'createTaskRequest',
                'Required parameter "createTaskRequest" was null or undefined when calling updateTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["tasks:write"]);
        }


        let urlPath = `/tasks/{task_gid}`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskRequestToJSON(requestParameters['createTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTask201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>tasks:write</code>  A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     * Update a task
     */
    async updateTask(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTask201Response> {
        const response = await this.updateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddFollowersForTaskOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type AddFollowersForTaskOptFieldsEnum = typeof AddFollowersForTaskOptFieldsEnum[keyof typeof AddFollowersForTaskOptFieldsEnum];
/**
 * @export
 */
export const CreateSubtaskForTaskOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type CreateSubtaskForTaskOptFieldsEnum = typeof CreateSubtaskForTaskOptFieldsEnum[keyof typeof CreateSubtaskForTaskOptFieldsEnum];
/**
 * @export
 */
export const CreateTaskOperationOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type CreateTaskOperationOptFieldsEnum = typeof CreateTaskOperationOptFieldsEnum[keyof typeof CreateTaskOperationOptFieldsEnum];
/**
 * @export
 */
export const DuplicateTaskOperationOptFieldsEnum = {
    NewGraphExport: 'new_graph_export',
    NewGraphExportCompletedAt: 'new_graph_export.completed_at',
    NewGraphExportCreatedAt: 'new_graph_export.created_at',
    NewGraphExportDownloadUrl: 'new_graph_export.download_url',
    NewProject: 'new_project',
    NewProjectName: 'new_project.name',
    NewProjectTemplate: 'new_project_template',
    NewProjectTemplateName: 'new_project_template.name',
    NewResourceExport: 'new_resource_export',
    NewResourceExportCompletedAt: 'new_resource_export.completed_at',
    NewResourceExportCreatedAt: 'new_resource_export.created_at',
    NewResourceExportDownloadUrl: 'new_resource_export.download_url',
    NewTask: 'new_task',
    NewTaskCreatedBy: 'new_task.created_by',
    NewTaskName: 'new_task.name',
    NewTaskResourceSubtype: 'new_task.resource_subtype',
    NewTaskTemplate: 'new_task_template',
    NewTaskTemplateName: 'new_task_template.name',
    ResourceSubtype: 'resource_subtype',
    Status: 'status'
} as const;
export type DuplicateTaskOperationOptFieldsEnum = typeof DuplicateTaskOperationOptFieldsEnum[keyof typeof DuplicateTaskOperationOptFieldsEnum];
/**
 * @export
 */
export const GetDependenciesForTaskOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Offset: 'offset',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetDependenciesForTaskOptFieldsEnum = typeof GetDependenciesForTaskOptFieldsEnum[keyof typeof GetDependenciesForTaskOptFieldsEnum];
/**
 * @export
 */
export const GetDependentsForTaskOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Offset: 'offset',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetDependentsForTaskOptFieldsEnum = typeof GetDependentsForTaskOptFieldsEnum[keyof typeof GetDependentsForTaskOptFieldsEnum];
/**
 * @export
 */
export const GetSubtasksForTaskOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Offset: 'offset',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetSubtasksForTaskOptFieldsEnum = typeof GetSubtasksForTaskOptFieldsEnum[keyof typeof GetSubtasksForTaskOptFieldsEnum];
/**
 * @export
 */
export const GetTaskOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetTaskOptFieldsEnum = typeof GetTaskOptFieldsEnum[keyof typeof GetTaskOptFieldsEnum];
/**
 * @export
 */
export const GetTasksOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Offset: 'offset',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetTasksOptFieldsEnum = typeof GetTasksOptFieldsEnum[keyof typeof GetTasksOptFieldsEnum];
/**
 * @export
 */
export const GetTasksForProjectOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Offset: 'offset',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetTasksForProjectOptFieldsEnum = typeof GetTasksForProjectOptFieldsEnum[keyof typeof GetTasksForProjectOptFieldsEnum];
/**
 * @export
 */
export const GetTasksForSectionOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Offset: 'offset',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetTasksForSectionOptFieldsEnum = typeof GetTasksForSectionOptFieldsEnum[keyof typeof GetTasksForSectionOptFieldsEnum];
/**
 * @export
 */
export const GetTasksForTagOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Offset: 'offset',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetTasksForTagOptFieldsEnum = typeof GetTasksForTagOptFieldsEnum[keyof typeof GetTasksForTagOptFieldsEnum];
/**
 * @export
 */
export const GetTasksForUserTaskListOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Offset: 'offset',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetTasksForUserTaskListOptFieldsEnum = typeof GetTasksForUserTaskListOptFieldsEnum[keyof typeof GetTasksForUserTaskListOptFieldsEnum];
/**
 * @export
 */
export const RemoveFollowerForTaskOperationOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type RemoveFollowerForTaskOperationOptFieldsEnum = typeof RemoveFollowerForTaskOperationOptFieldsEnum[keyof typeof RemoveFollowerForTaskOperationOptFieldsEnum];
/**
 * @export
 */
export const SearchTasksForWorkspaceResourceSubtypeEnum = {
    DefaultTask: 'default_task',
    Milestone: 'milestone'
} as const;
export type SearchTasksForWorkspaceResourceSubtypeEnum = typeof SearchTasksForWorkspaceResourceSubtypeEnum[keyof typeof SearchTasksForWorkspaceResourceSubtypeEnum];
/**
 * @export
 */
export const SearchTasksForWorkspaceSortByEnum = {
    DueDate: 'due_date',
    CreatedAt: 'created_at',
    CompletedAt: 'completed_at',
    Likes: 'likes',
    ModifiedAt: 'modified_at'
} as const;
export type SearchTasksForWorkspaceSortByEnum = typeof SearchTasksForWorkspaceSortByEnum[keyof typeof SearchTasksForWorkspaceSortByEnum];
/**
 * @export
 */
export const SearchTasksForWorkspaceOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type SearchTasksForWorkspaceOptFieldsEnum = typeof SearchTasksForWorkspaceOptFieldsEnum[keyof typeof SearchTasksForWorkspaceOptFieldsEnum];
/**
 * @export
 */
export const SetParentForTaskOperationOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type SetParentForTaskOperationOptFieldsEnum = typeof SetParentForTaskOperationOptFieldsEnum[keyof typeof SetParentForTaskOperationOptFieldsEnum];
/**
 * @export
 */
export const UpdateTaskOptFieldsEnum = {
    ActualTimeMinutes: 'actual_time_minutes',
    ApprovalStatus: 'approval_status',
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    AssigneeSection: 'assignee_section',
    AssigneeSectionName: 'assignee_section.name',
    AssigneeStatus: 'assignee_status',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CustomFields: 'custom_fields',
    CustomFieldsAsanaCreatedField: 'custom_fields.asana_created_field',
    CustomFieldsCreatedBy: 'custom_fields.created_by',
    CustomFieldsCreatedByName: 'custom_fields.created_by.name',
    CustomFieldsCurrencyCode: 'custom_fields.currency_code',
    CustomFieldsCustomLabel: 'custom_fields.custom_label',
    CustomFieldsCustomLabelPosition: 'custom_fields.custom_label_position',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDefaultAccessLevel: 'custom_fields.default_access_level',
    CustomFieldsDescription: 'custom_fields.description',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsFormat: 'custom_fields.format',
    CustomFieldsHasNotificationsEnabled: 'custom_fields.has_notifications_enabled',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsIsGlobalToWorkspace: 'custom_fields.is_global_to_workspace',
    CustomFieldsIsValueReadOnly: 'custom_fields.is_value_read_only',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsPeopleValue: 'custom_fields.people_value',
    CustomFieldsPeopleValueName: 'custom_fields.people_value.name',
    CustomFieldsPrecision: 'custom_fields.precision',
    CustomFieldsPrivacySetting: 'custom_fields.privacy_setting',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsResourceSubtype: 'custom_fields.resource_subtype',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    CustomType: 'custom_type',
    CustomTypeName: 'custom_type.name',
    CustomTypeStatusOption: 'custom_type_status_option',
    CustomTypeStatusOptionName: 'custom_type_status_option.name',
    Dependencies: 'dependencies',
    Dependents: 'dependents',
    DueAt: 'due_at',
    DueOn: 'due_on',
    External: 'external',
    ExternalData: 'external.data',
    Followers: 'followers',
    FollowersName: 'followers.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlNotes: 'html_notes',
    IsRenderedAsSeparator: 'is_rendered_as_separator',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Memberships: 'memberships',
    MembershipsProject: 'memberships.project',
    MembershipsProjectName: 'memberships.project.name',
    MembershipsSection: 'memberships.section',
    MembershipsSectionName: 'memberships.section.name',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    NumSubtasks: 'num_subtasks',
    Parent: 'parent',
    ParentCreatedBy: 'parent.created_by',
    ParentName: 'parent.name',
    ParentResourceSubtype: 'parent.resource_subtype',
    PermalinkUrl: 'permalink_url',
    Projects: 'projects',
    ProjectsName: 'projects.name',
    ResourceSubtype: 'resource_subtype',
    StartAt: 'start_at',
    StartOn: 'start_on',
    Tags: 'tags',
    TagsName: 'tags.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type UpdateTaskOptFieldsEnum = typeof UpdateTaskOptFieldsEnum[keyof typeof UpdateTaskOptFieldsEnum];
