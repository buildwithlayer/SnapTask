/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  CreateStatusForObjectRequest,
  ErrorResponse,
  GetStatus200Response,
  GetStatusesForObject200Response,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateStatusForObjectRequestFromJSON,
    CreateStatusForObjectRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetStatus200ResponseFromJSON,
    GetStatus200ResponseToJSON,
    GetStatusesForObject200ResponseFromJSON,
    GetStatusesForObject200ResponseToJSON,
} from '../models/index.js';

export interface CreateStatusForObjectOperationRequest {
    createStatusForObjectRequest: CreateStatusForObjectRequest;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<CreateStatusForObjectOperationOptFieldsEnum>;
}

export interface DeleteStatusRequest {
    statusUpdateGid: string;
    optPretty?: boolean;
}

export interface GetStatusRequest {
    statusUpdateGid: string;
    optPretty?: boolean;
    optFields?: Array<GetStatusOptFieldsEnum>;
}

export interface GetStatusesForObjectRequest {
    parent: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    createdSince?: Date;
    optFields?: Array<GetStatusesForObjectOptFieldsEnum>;
}

/**
 * 
 */
export class StatusUpdatesApi extends runtime.BaseAPI {

    /**
     * Creates a new status update on an object. Returns the full record of the newly created status update.
     * Create a status update
     */
    async createStatusForObjectRaw(requestParameters: CreateStatusForObjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStatus200Response>> {
        if (requestParameters['createStatusForObjectRequest'] == null) {
            throw new runtime.RequiredError(
                'createStatusForObjectRequest',
                'Required parameter "createStatusForObjectRequest" was null or undefined when calling createStatusForObject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/status_updates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStatusForObjectRequestToJSON(requestParameters['createStatusForObjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new status update on an object. Returns the full record of the newly created status update.
     * Create a status update
     */
    async createStatusForObject(requestParameters: CreateStatusForObjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStatus200Response> {
        const response = await this.createStatusForObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific, existing status update.  Returns an empty data record.
     * Delete a status update
     */
    async deleteStatusRaw(requestParameters: DeleteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['statusUpdateGid'] == null) {
            throw new runtime.RequiredError(
                'statusUpdateGid',
                'Required parameter "statusUpdateGid" was null or undefined when calling deleteStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/status_updates/{status_update_gid}`;
        urlPath = urlPath.replace(`{${"status_update_gid"}}`, encodeURIComponent(String(requestParameters['statusUpdateGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a specific, existing status update.  Returns an empty data record.
     * Delete a status update
     */
    async deleteStatus(requestParameters: DeleteStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the complete record for a single status update.
     * Get a status update
     */
    async getStatusRaw(requestParameters: GetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStatus200Response>> {
        if (requestParameters['statusUpdateGid'] == null) {
            throw new runtime.RequiredError(
                'statusUpdateGid',
                'Required parameter "statusUpdateGid" was null or undefined when calling getStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/status_updates/{status_update_gid}`;
        urlPath = urlPath.replace(`{${"status_update_gid"}}`, encodeURIComponent(String(requestParameters['statusUpdateGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStatus200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete record for a single status update.
     * Get a status update
     */
    async getStatus(requestParameters: GetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStatus200Response> {
        const response = await this.getStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the compact status update records for all updates on the object.
     * Get status updates from an object
     */
    async getStatusesForObjectRaw(requestParameters: GetStatusesForObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStatusesForObject200Response>> {
        if (requestParameters['parent'] == null) {
            throw new runtime.RequiredError(
                'parent',
                'Required parameter "parent" was null or undefined when calling getStatusesForObject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['parent'] != null) {
            queryParameters['parent'] = requestParameters['parent'];
        }

        if (requestParameters['createdSince'] != null) {
            queryParameters['created_since'] = (requestParameters['createdSince'] as any).toISOString();
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/status_updates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStatusesForObject200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the compact status update records for all updates on the object.
     * Get status updates from an object
     */
    async getStatusesForObject(requestParameters: GetStatusesForObjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStatusesForObject200Response> {
        const response = await this.getStatusesForObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateStatusForObjectOperationOptFieldsEnum = {
    Author: 'author',
    AuthorName: 'author.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlText: 'html_text',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    ModifiedAt: 'modified_at',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    Parent: 'parent',
    ParentName: 'parent.name',
    ResourceSubtype: 'resource_subtype',
    StatusType: 'status_type',
    Text: 'text',
    Title: 'title'
} as const;
export type CreateStatusForObjectOperationOptFieldsEnum = typeof CreateStatusForObjectOperationOptFieldsEnum[keyof typeof CreateStatusForObjectOperationOptFieldsEnum];
/**
 * @export
 */
export const GetStatusOptFieldsEnum = {
    Author: 'author',
    AuthorName: 'author.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlText: 'html_text',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    ModifiedAt: 'modified_at',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    Parent: 'parent',
    ParentName: 'parent.name',
    ResourceSubtype: 'resource_subtype',
    StatusType: 'status_type',
    Text: 'text',
    Title: 'title'
} as const;
export type GetStatusOptFieldsEnum = typeof GetStatusOptFieldsEnum[keyof typeof GetStatusOptFieldsEnum];
/**
 * @export
 */
export const GetStatusesForObjectOptFieldsEnum = {
    Author: 'author',
    AuthorName: 'author.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlText: 'html_text',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    ModifiedAt: 'modified_at',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    Offset: 'offset',
    Parent: 'parent',
    ParentName: 'parent.name',
    Path: 'path',
    ResourceSubtype: 'resource_subtype',
    StatusType: 'status_type',
    Text: 'text',
    Title: 'title',
    Uri: 'uri'
} as const;
export type GetStatusesForObjectOptFieldsEnum = typeof GetStatusesForObjectOptFieldsEnum[keyof typeof GetStatusesForObjectOptFieldsEnum];
