/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  CreateCustomField201Response,
  CreateCustomFieldRequest,
  CreateEnumOptionForCustomField201Response,
  CreateEnumOptionForCustomFieldRequest,
  ErrorResponse,
  GetCustomFieldsForWorkspace200Response,
  InsertEnumOptionForCustomFieldRequest,
  UpdateCustomFieldRequest,
  UpdateEnumOptionRequest,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateCustomField201ResponseFromJSON,
    CreateCustomField201ResponseToJSON,
    CreateCustomFieldRequestFromJSON,
    CreateCustomFieldRequestToJSON,
    CreateEnumOptionForCustomField201ResponseFromJSON,
    CreateEnumOptionForCustomField201ResponseToJSON,
    CreateEnumOptionForCustomFieldRequestFromJSON,
    CreateEnumOptionForCustomFieldRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetCustomFieldsForWorkspace200ResponseFromJSON,
    GetCustomFieldsForWorkspace200ResponseToJSON,
    InsertEnumOptionForCustomFieldRequestFromJSON,
    InsertEnumOptionForCustomFieldRequestToJSON,
    UpdateCustomFieldRequestFromJSON,
    UpdateCustomFieldRequestToJSON,
    UpdateEnumOptionRequestFromJSON,
    UpdateEnumOptionRequestToJSON,
} from '../models/index.js';

export interface CreateCustomFieldOperationRequest {
    createCustomFieldRequest: CreateCustomFieldRequest;
    optPretty?: boolean;
    optFields?: Array<CreateCustomFieldOperationOptFieldsEnum>;
}

export interface CreateEnumOptionForCustomFieldOperationRequest {
    customFieldGid: string;
    optPretty?: boolean;
    optFields?: Array<CreateEnumOptionForCustomFieldOperationOptFieldsEnum>;
    createEnumOptionForCustomFieldRequest?: CreateEnumOptionForCustomFieldRequest;
}

export interface DeleteCustomFieldRequest {
    customFieldGid: string;
    optPretty?: boolean;
}

export interface GetCustomFieldRequest {
    customFieldGid: string;
    optPretty?: boolean;
    optFields?: Array<GetCustomFieldOptFieldsEnum>;
}

export interface GetCustomFieldsForWorkspaceRequest {
    workspaceGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetCustomFieldsForWorkspaceOptFieldsEnum>;
}

export interface InsertEnumOptionForCustomFieldOperationRequest {
    customFieldGid: string;
    optPretty?: boolean;
    optFields?: Array<InsertEnumOptionForCustomFieldOperationOptFieldsEnum>;
    insertEnumOptionForCustomFieldRequest?: InsertEnumOptionForCustomFieldRequest;
}

export interface UpdateCustomFieldOperationRequest {
    customFieldGid: string;
    optPretty?: boolean;
    optFields?: Array<UpdateCustomFieldOperationOptFieldsEnum>;
    updateCustomFieldRequest?: UpdateCustomFieldRequest;
}

export interface UpdateEnumOptionOperationRequest {
    enumOptionGid: string;
    optPretty?: boolean;
    optFields?: Array<UpdateEnumOptionOperationOptFieldsEnum>;
    updateEnumOptionRequest?: UpdateEnumOptionRequest;
}

/**
 * 
 */
export class CustomFieldsApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as `Due Date` or `Assignee`. A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`, `date`, or `people`.  Returns the full record of the newly created custom field.
     * Create a custom field
     */
    async createCustomFieldRaw(requestParameters: CreateCustomFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCustomField201Response>> {
        if (requestParameters['createCustomFieldRequest'] == null) {
            throw new runtime.RequiredError(
                'createCustomFieldRequest',
                'Required parameter "createCustomFieldRequest" was null or undefined when calling createCustomField().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom_fields:write"]);
        }


        let urlPath = `/custom_fields`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomFieldRequestToJSON(requestParameters['createCustomFieldRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCustomField201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as `Due Date` or `Assignee`. A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`, `date`, or `people`.  Returns the full record of the newly created custom field.
     * Create a custom field
     */
    async createCustomField(requestParameters: CreateCustomFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCustomField201Response> {
        const response = await this.createCustomFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     * Create an enum option
     */
    async createEnumOptionForCustomFieldRaw(requestParameters: CreateEnumOptionForCustomFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEnumOptionForCustomField201Response>> {
        if (requestParameters['customFieldGid'] == null) {
            throw new runtime.RequiredError(
                'customFieldGid',
                'Required parameter "customFieldGid" was null or undefined when calling createEnumOptionForCustomField().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom_fields:write"]);
        }


        let urlPath = `/custom_fields/{custom_field_gid}/enum_options`;
        urlPath = urlPath.replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(requestParameters['customFieldGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEnumOptionForCustomFieldRequestToJSON(requestParameters['createEnumOptionForCustomFieldRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEnumOptionForCustomField201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     * Create an enum option
     */
    async createEnumOptionForCustomField(requestParameters: CreateEnumOptionForCustomFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEnumOptionForCustomField201Response> {
        const response = await this.createEnumOptionForCustomFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     * Delete a custom field
     */
    async deleteCustomFieldRaw(requestParameters: DeleteCustomFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['customFieldGid'] == null) {
            throw new runtime.RequiredError(
                'customFieldGid',
                'Required parameter "customFieldGid" was null or undefined when calling deleteCustomField().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/custom_fields/{custom_field_gid}`;
        urlPath = urlPath.replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(requestParameters['customFieldGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     * Delete a custom field
     */
    async deleteCustomField(requestParameters: DeleteCustomFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteCustomFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>custom_fields:read</code>  Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     * Get a custom field
     */
    async getCustomFieldRaw(requestParameters: GetCustomFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCustomField201Response>> {
        if (requestParameters['customFieldGid'] == null) {
            throw new runtime.RequiredError(
                'customFieldGid',
                'Required parameter "customFieldGid" was null or undefined when calling getCustomField().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom_fields:read"]);
        }


        let urlPath = `/custom_fields/{custom_field_gid}`;
        urlPath = urlPath.replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(requestParameters['customFieldGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCustomField201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>custom_fields:read</code>  Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     * Get a custom field
     */
    async getCustomField(requestParameters: GetCustomFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCustomField201Response> {
        const response = await this.getCustomFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>custom_fields:read</code>  Returns a list of the compact representation of all of the custom fields in a workspace.
     * Get a workspace\'s custom fields
     */
    async getCustomFieldsForWorkspaceRaw(requestParameters: GetCustomFieldsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomFieldsForWorkspace200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling getCustomFieldsForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom_fields:read"]);
        }


        let urlPath = `/workspaces/{workspace_gid}/custom_fields`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomFieldsForWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>custom_fields:read</code>  Returns a list of the compact representation of all of the custom fields in a workspace.
     * Get a workspace\'s custom fields
     */
    async getCustomFieldsForWorkspace(requestParameters: GetCustomFieldsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomFieldsForWorkspace200Response> {
        const response = await this.getCustomFieldsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     * Reorder a custom field\'s enum
     */
    async insertEnumOptionForCustomFieldRaw(requestParameters: InsertEnumOptionForCustomFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEnumOptionForCustomField201Response>> {
        if (requestParameters['customFieldGid'] == null) {
            throw new runtime.RequiredError(
                'customFieldGid',
                'Required parameter "customFieldGid" was null or undefined when calling insertEnumOptionForCustomField().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom_fields:write"]);
        }


        let urlPath = `/custom_fields/{custom_field_gid}/enum_options/insert`;
        urlPath = urlPath.replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(requestParameters['customFieldGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsertEnumOptionForCustomFieldRequestToJSON(requestParameters['insertEnumOptionForCustomFieldRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEnumOptionForCustomField201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     * Reorder a custom field\'s enum
     */
    async insertEnumOptionForCustomField(requestParameters: InsertEnumOptionForCustomFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEnumOptionForCustomField201Response> {
        const response = await this.insertEnumOptionForCustomFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s `type` cannot be updated. An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     * Update a custom field
     */
    async updateCustomFieldRaw(requestParameters: UpdateCustomFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCustomField201Response>> {
        if (requestParameters['customFieldGid'] == null) {
            throw new runtime.RequiredError(
                'customFieldGid',
                'Required parameter "customFieldGid" was null or undefined when calling updateCustomField().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom_fields:write"]);
        }


        let urlPath = `/custom_fields/{custom_field_gid}`;
        urlPath = urlPath.replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(requestParameters['customFieldGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCustomFieldRequestToJSON(requestParameters['updateCustomFieldRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCustomField201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s `type` cannot be updated. An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     * Update a custom field
     */
    async updateCustomField(requestParameters: UpdateCustomFieldOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCustomField201Response> {
        const response = await this.updateCustomFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     * Update an enum option
     */
    async updateEnumOptionRaw(requestParameters: UpdateEnumOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEnumOptionForCustomField201Response>> {
        if (requestParameters['enumOptionGid'] == null) {
            throw new runtime.RequiredError(
                'enumOptionGid',
                'Required parameter "enumOptionGid" was null or undefined when calling updateEnumOption().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["custom_fields:write"]);
        }


        let urlPath = `/enum_options/{enum_option_gid}`;
        urlPath = urlPath.replace(`{${"enum_option_gid"}}`, encodeURIComponent(String(requestParameters['enumOptionGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEnumOptionRequestToJSON(requestParameters['updateEnumOptionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEnumOptionForCustomField201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>custom_fields:write</code>  Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     * Update an enum option
     */
    async updateEnumOption(requestParameters: UpdateEnumOptionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEnumOptionForCustomField201Response> {
        const response = await this.updateEnumOptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateCustomFieldOperationOptFieldsEnum = {
    AsanaCreatedField: 'asana_created_field',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrencyCode: 'currency_code',
    CustomLabel: 'custom_label',
    CustomLabelPosition: 'custom_label_position',
    DateValue: 'date_value',
    DateValueDate: 'date_value.date',
    DateValueDateTime: 'date_value.date_time',
    DefaultAccessLevel: 'default_access_level',
    Description: 'description',
    DisplayValue: 'display_value',
    Enabled: 'enabled',
    EnumOptions: 'enum_options',
    EnumOptionsColor: 'enum_options.color',
    EnumOptionsEnabled: 'enum_options.enabled',
    EnumOptionsName: 'enum_options.name',
    EnumValue: 'enum_value',
    EnumValueColor: 'enum_value.color',
    EnumValueEnabled: 'enum_value.enabled',
    EnumValueName: 'enum_value.name',
    Format: 'format',
    HasNotificationsEnabled: 'has_notifications_enabled',
    IdPrefix: 'id_prefix',
    IsFormulaField: 'is_formula_field',
    IsGlobalToWorkspace: 'is_global_to_workspace',
    IsValueReadOnly: 'is_value_read_only',
    MultiEnumValues: 'multi_enum_values',
    MultiEnumValuesColor: 'multi_enum_values.color',
    MultiEnumValuesEnabled: 'multi_enum_values.enabled',
    MultiEnumValuesName: 'multi_enum_values.name',
    Name: 'name',
    NumberValue: 'number_value',
    PeopleValue: 'people_value',
    PeopleValueName: 'people_value.name',
    Precision: 'precision',
    PrivacySetting: 'privacy_setting',
    RepresentationType: 'representation_type',
    ResourceSubtype: 'resource_subtype',
    TextValue: 'text_value',
    Type: 'type'
} as const;
export type CreateCustomFieldOperationOptFieldsEnum = typeof CreateCustomFieldOperationOptFieldsEnum[keyof typeof CreateCustomFieldOperationOptFieldsEnum];
/**
 * @export
 */
export const CreateEnumOptionForCustomFieldOperationOptFieldsEnum = {
    Color: 'color',
    Enabled: 'enabled',
    Name: 'name'
} as const;
export type CreateEnumOptionForCustomFieldOperationOptFieldsEnum = typeof CreateEnumOptionForCustomFieldOperationOptFieldsEnum[keyof typeof CreateEnumOptionForCustomFieldOperationOptFieldsEnum];
/**
 * @export
 */
export const GetCustomFieldOptFieldsEnum = {
    AsanaCreatedField: 'asana_created_field',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrencyCode: 'currency_code',
    CustomLabel: 'custom_label',
    CustomLabelPosition: 'custom_label_position',
    DateValue: 'date_value',
    DateValueDate: 'date_value.date',
    DateValueDateTime: 'date_value.date_time',
    DefaultAccessLevel: 'default_access_level',
    Description: 'description',
    DisplayValue: 'display_value',
    Enabled: 'enabled',
    EnumOptions: 'enum_options',
    EnumOptionsColor: 'enum_options.color',
    EnumOptionsEnabled: 'enum_options.enabled',
    EnumOptionsName: 'enum_options.name',
    EnumValue: 'enum_value',
    EnumValueColor: 'enum_value.color',
    EnumValueEnabled: 'enum_value.enabled',
    EnumValueName: 'enum_value.name',
    Format: 'format',
    HasNotificationsEnabled: 'has_notifications_enabled',
    IdPrefix: 'id_prefix',
    IsFormulaField: 'is_formula_field',
    IsGlobalToWorkspace: 'is_global_to_workspace',
    IsValueReadOnly: 'is_value_read_only',
    MultiEnumValues: 'multi_enum_values',
    MultiEnumValuesColor: 'multi_enum_values.color',
    MultiEnumValuesEnabled: 'multi_enum_values.enabled',
    MultiEnumValuesName: 'multi_enum_values.name',
    Name: 'name',
    NumberValue: 'number_value',
    PeopleValue: 'people_value',
    PeopleValueName: 'people_value.name',
    Precision: 'precision',
    PrivacySetting: 'privacy_setting',
    RepresentationType: 'representation_type',
    ResourceSubtype: 'resource_subtype',
    TextValue: 'text_value',
    Type: 'type'
} as const;
export type GetCustomFieldOptFieldsEnum = typeof GetCustomFieldOptFieldsEnum[keyof typeof GetCustomFieldOptFieldsEnum];
/**
 * @export
 */
export const GetCustomFieldsForWorkspaceOptFieldsEnum = {
    AsanaCreatedField: 'asana_created_field',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrencyCode: 'currency_code',
    CustomLabel: 'custom_label',
    CustomLabelPosition: 'custom_label_position',
    DateValue: 'date_value',
    DateValueDate: 'date_value.date',
    DateValueDateTime: 'date_value.date_time',
    DefaultAccessLevel: 'default_access_level',
    Description: 'description',
    DisplayValue: 'display_value',
    Enabled: 'enabled',
    EnumOptions: 'enum_options',
    EnumOptionsColor: 'enum_options.color',
    EnumOptionsEnabled: 'enum_options.enabled',
    EnumOptionsName: 'enum_options.name',
    EnumValue: 'enum_value',
    EnumValueColor: 'enum_value.color',
    EnumValueEnabled: 'enum_value.enabled',
    EnumValueName: 'enum_value.name',
    Format: 'format',
    HasNotificationsEnabled: 'has_notifications_enabled',
    IdPrefix: 'id_prefix',
    IsFormulaField: 'is_formula_field',
    IsGlobalToWorkspace: 'is_global_to_workspace',
    IsValueReadOnly: 'is_value_read_only',
    MultiEnumValues: 'multi_enum_values',
    MultiEnumValuesColor: 'multi_enum_values.color',
    MultiEnumValuesEnabled: 'multi_enum_values.enabled',
    MultiEnumValuesName: 'multi_enum_values.name',
    Name: 'name',
    NumberValue: 'number_value',
    Offset: 'offset',
    Path: 'path',
    PeopleValue: 'people_value',
    PeopleValueName: 'people_value.name',
    Precision: 'precision',
    PrivacySetting: 'privacy_setting',
    RepresentationType: 'representation_type',
    ResourceSubtype: 'resource_subtype',
    TextValue: 'text_value',
    Type: 'type',
    Uri: 'uri'
} as const;
export type GetCustomFieldsForWorkspaceOptFieldsEnum = typeof GetCustomFieldsForWorkspaceOptFieldsEnum[keyof typeof GetCustomFieldsForWorkspaceOptFieldsEnum];
/**
 * @export
 */
export const InsertEnumOptionForCustomFieldOperationOptFieldsEnum = {
    Color: 'color',
    Enabled: 'enabled',
    Name: 'name'
} as const;
export type InsertEnumOptionForCustomFieldOperationOptFieldsEnum = typeof InsertEnumOptionForCustomFieldOperationOptFieldsEnum[keyof typeof InsertEnumOptionForCustomFieldOperationOptFieldsEnum];
/**
 * @export
 */
export const UpdateCustomFieldOperationOptFieldsEnum = {
    AsanaCreatedField: 'asana_created_field',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CurrencyCode: 'currency_code',
    CustomLabel: 'custom_label',
    CustomLabelPosition: 'custom_label_position',
    DateValue: 'date_value',
    DateValueDate: 'date_value.date',
    DateValueDateTime: 'date_value.date_time',
    DefaultAccessLevel: 'default_access_level',
    Description: 'description',
    DisplayValue: 'display_value',
    Enabled: 'enabled',
    EnumOptions: 'enum_options',
    EnumOptionsColor: 'enum_options.color',
    EnumOptionsEnabled: 'enum_options.enabled',
    EnumOptionsName: 'enum_options.name',
    EnumValue: 'enum_value',
    EnumValueColor: 'enum_value.color',
    EnumValueEnabled: 'enum_value.enabled',
    EnumValueName: 'enum_value.name',
    Format: 'format',
    HasNotificationsEnabled: 'has_notifications_enabled',
    IdPrefix: 'id_prefix',
    IsFormulaField: 'is_formula_field',
    IsGlobalToWorkspace: 'is_global_to_workspace',
    IsValueReadOnly: 'is_value_read_only',
    MultiEnumValues: 'multi_enum_values',
    MultiEnumValuesColor: 'multi_enum_values.color',
    MultiEnumValuesEnabled: 'multi_enum_values.enabled',
    MultiEnumValuesName: 'multi_enum_values.name',
    Name: 'name',
    NumberValue: 'number_value',
    PeopleValue: 'people_value',
    PeopleValueName: 'people_value.name',
    Precision: 'precision',
    PrivacySetting: 'privacy_setting',
    RepresentationType: 'representation_type',
    ResourceSubtype: 'resource_subtype',
    TextValue: 'text_value',
    Type: 'type'
} as const;
export type UpdateCustomFieldOperationOptFieldsEnum = typeof UpdateCustomFieldOperationOptFieldsEnum[keyof typeof UpdateCustomFieldOperationOptFieldsEnum];
/**
 * @export
 */
export const UpdateEnumOptionOperationOptFieldsEnum = {
    Color: 'color',
    Enabled: 'enabled',
    Name: 'name'
} as const;
export type UpdateEnumOptionOperationOptFieldsEnum = typeof UpdateEnumOptionOperationOptFieldsEnum[keyof typeof UpdateEnumOptionOperationOptFieldsEnum];
