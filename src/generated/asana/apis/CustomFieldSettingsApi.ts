/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetCustomFieldSettingsForProject200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetCustomFieldSettingsForProject200ResponseFromJSON,
    GetCustomFieldSettingsForProject200ResponseToJSON,
} from '../models/index.js';

export interface GetCustomFieldSettingsForPortfolioRequest {
    portfolioGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetCustomFieldSettingsForPortfolioOptFieldsEnum>;
}

export interface GetCustomFieldSettingsForProjectRequest {
    projectGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetCustomFieldSettingsForProjectOptFieldsEnum>;
}

/**
 * 
 */
export class CustomFieldSettingsApi extends runtime.BaseAPI {

    /**
     * Returns a list of all of the custom fields settings on a portfolio, in compact form.
     * Get a portfolio\'s custom fields
     */
    async getCustomFieldSettingsForPortfolioRaw(requestParameters: GetCustomFieldSettingsForPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomFieldSettingsForProject200Response>> {
        if (requestParameters['portfolioGid'] == null) {
            throw new runtime.RequiredError(
                'portfolioGid',
                'Required parameter "portfolioGid" was null or undefined when calling getCustomFieldSettingsForPortfolio().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/portfolios/{portfolio_gid}/custom_field_settings`;
        urlPath = urlPath.replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(requestParameters['portfolioGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomFieldSettingsForProject200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all of the custom fields settings on a portfolio, in compact form.
     * Get a portfolio\'s custom fields
     */
    async getCustomFieldSettingsForPortfolio(requestParameters: GetCustomFieldSettingsForPortfolioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomFieldSettingsForProject200Response> {
        const response = await this.getCustomFieldSettingsForPortfolioRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [documentation for input/output options](https://developers.asana.com/docs/inputoutput-options) for more information.
     * Get a project\'s custom fields
     */
    async getCustomFieldSettingsForProjectRaw(requestParameters: GetCustomFieldSettingsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomFieldSettingsForProject200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling getCustomFieldSettingsForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/custom_field_settings`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomFieldSettingsForProject200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [documentation for input/output options](https://developers.asana.com/docs/inputoutput-options) for more information.
     * Get a project\'s custom fields
     */
    async getCustomFieldSettingsForProject(requestParameters: GetCustomFieldSettingsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomFieldSettingsForProject200Response> {
        const response = await this.getCustomFieldSettingsForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCustomFieldSettingsForPortfolioOptFieldsEnum = {
    CustomField: 'custom_field',
    CustomFieldAsanaCreatedField: 'custom_field.asana_created_field',
    CustomFieldCreatedBy: 'custom_field.created_by',
    CustomFieldCreatedByName: 'custom_field.created_by.name',
    CustomFieldCurrencyCode: 'custom_field.currency_code',
    CustomFieldCustomLabel: 'custom_field.custom_label',
    CustomFieldCustomLabelPosition: 'custom_field.custom_label_position',
    CustomFieldDateValue: 'custom_field.date_value',
    CustomFieldDateValueDate: 'custom_field.date_value.date',
    CustomFieldDateValueDateTime: 'custom_field.date_value.date_time',
    CustomFieldDefaultAccessLevel: 'custom_field.default_access_level',
    CustomFieldDescription: 'custom_field.description',
    CustomFieldDisplayValue: 'custom_field.display_value',
    CustomFieldEnabled: 'custom_field.enabled',
    CustomFieldEnumOptions: 'custom_field.enum_options',
    CustomFieldEnumOptionsColor: 'custom_field.enum_options.color',
    CustomFieldEnumOptionsEnabled: 'custom_field.enum_options.enabled',
    CustomFieldEnumOptionsName: 'custom_field.enum_options.name',
    CustomFieldEnumValue: 'custom_field.enum_value',
    CustomFieldEnumValueColor: 'custom_field.enum_value.color',
    CustomFieldEnumValueEnabled: 'custom_field.enum_value.enabled',
    CustomFieldEnumValueName: 'custom_field.enum_value.name',
    CustomFieldFormat: 'custom_field.format',
    CustomFieldHasNotificationsEnabled: 'custom_field.has_notifications_enabled',
    CustomFieldIdPrefix: 'custom_field.id_prefix',
    CustomFieldIsFormulaField: 'custom_field.is_formula_field',
    CustomFieldIsGlobalToWorkspace: 'custom_field.is_global_to_workspace',
    CustomFieldIsValueReadOnly: 'custom_field.is_value_read_only',
    CustomFieldMultiEnumValues: 'custom_field.multi_enum_values',
    CustomFieldMultiEnumValuesColor: 'custom_field.multi_enum_values.color',
    CustomFieldMultiEnumValuesEnabled: 'custom_field.multi_enum_values.enabled',
    CustomFieldMultiEnumValuesName: 'custom_field.multi_enum_values.name',
    CustomFieldName: 'custom_field.name',
    CustomFieldNumberValue: 'custom_field.number_value',
    CustomFieldPeopleValue: 'custom_field.people_value',
    CustomFieldPeopleValueName: 'custom_field.people_value.name',
    CustomFieldPrecision: 'custom_field.precision',
    CustomFieldPrivacySetting: 'custom_field.privacy_setting',
    CustomFieldRepresentationType: 'custom_field.representation_type',
    CustomFieldResourceSubtype: 'custom_field.resource_subtype',
    CustomFieldTextValue: 'custom_field.text_value',
    CustomFieldType: 'custom_field.type',
    IsImportant: 'is_important',
    Offset: 'offset',
    Parent: 'parent',
    ParentName: 'parent.name',
    Path: 'path',
    Project: 'project',
    ProjectName: 'project.name',
    Uri: 'uri'
} as const;
export type GetCustomFieldSettingsForPortfolioOptFieldsEnum = typeof GetCustomFieldSettingsForPortfolioOptFieldsEnum[keyof typeof GetCustomFieldSettingsForPortfolioOptFieldsEnum];
/**
 * @export
 */
export const GetCustomFieldSettingsForProjectOptFieldsEnum = {
    CustomField: 'custom_field',
    CustomFieldAsanaCreatedField: 'custom_field.asana_created_field',
    CustomFieldCreatedBy: 'custom_field.created_by',
    CustomFieldCreatedByName: 'custom_field.created_by.name',
    CustomFieldCurrencyCode: 'custom_field.currency_code',
    CustomFieldCustomLabel: 'custom_field.custom_label',
    CustomFieldCustomLabelPosition: 'custom_field.custom_label_position',
    CustomFieldDateValue: 'custom_field.date_value',
    CustomFieldDateValueDate: 'custom_field.date_value.date',
    CustomFieldDateValueDateTime: 'custom_field.date_value.date_time',
    CustomFieldDefaultAccessLevel: 'custom_field.default_access_level',
    CustomFieldDescription: 'custom_field.description',
    CustomFieldDisplayValue: 'custom_field.display_value',
    CustomFieldEnabled: 'custom_field.enabled',
    CustomFieldEnumOptions: 'custom_field.enum_options',
    CustomFieldEnumOptionsColor: 'custom_field.enum_options.color',
    CustomFieldEnumOptionsEnabled: 'custom_field.enum_options.enabled',
    CustomFieldEnumOptionsName: 'custom_field.enum_options.name',
    CustomFieldEnumValue: 'custom_field.enum_value',
    CustomFieldEnumValueColor: 'custom_field.enum_value.color',
    CustomFieldEnumValueEnabled: 'custom_field.enum_value.enabled',
    CustomFieldEnumValueName: 'custom_field.enum_value.name',
    CustomFieldFormat: 'custom_field.format',
    CustomFieldHasNotificationsEnabled: 'custom_field.has_notifications_enabled',
    CustomFieldIdPrefix: 'custom_field.id_prefix',
    CustomFieldIsFormulaField: 'custom_field.is_formula_field',
    CustomFieldIsGlobalToWorkspace: 'custom_field.is_global_to_workspace',
    CustomFieldIsValueReadOnly: 'custom_field.is_value_read_only',
    CustomFieldMultiEnumValues: 'custom_field.multi_enum_values',
    CustomFieldMultiEnumValuesColor: 'custom_field.multi_enum_values.color',
    CustomFieldMultiEnumValuesEnabled: 'custom_field.multi_enum_values.enabled',
    CustomFieldMultiEnumValuesName: 'custom_field.multi_enum_values.name',
    CustomFieldName: 'custom_field.name',
    CustomFieldNumberValue: 'custom_field.number_value',
    CustomFieldPeopleValue: 'custom_field.people_value',
    CustomFieldPeopleValueName: 'custom_field.people_value.name',
    CustomFieldPrecision: 'custom_field.precision',
    CustomFieldPrivacySetting: 'custom_field.privacy_setting',
    CustomFieldRepresentationType: 'custom_field.representation_type',
    CustomFieldResourceSubtype: 'custom_field.resource_subtype',
    CustomFieldTextValue: 'custom_field.text_value',
    CustomFieldType: 'custom_field.type',
    IsImportant: 'is_important',
    Offset: 'offset',
    Parent: 'parent',
    ParentName: 'parent.name',
    Path: 'path',
    Project: 'project',
    ProjectName: 'project.name',
    Uri: 'uri'
} as const;
export type GetCustomFieldSettingsForProjectOptFieldsEnum = typeof GetCustomFieldSettingsForProjectOptFieldsEnum[keyof typeof GetCustomFieldSettingsForProjectOptFieldsEnum];
