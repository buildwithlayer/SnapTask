/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddFollowersRequest,
  ApproveAccessRequest200Response,
  CreateGoalMetricRequest,
  CreateGoalRequest,
  ErrorResponse,
  GetGoal200Response,
  GetGoals200Response,
  GetParentGoalsForGoal200Response,
  UpdateGoalMetricRequest,
  UpdateGoalRequest,
} from '../models/index.js';
import {
    AddFollowersRequestFromJSON,
    AddFollowersRequestToJSON,
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateGoalMetricRequestFromJSON,
    CreateGoalMetricRequestToJSON,
    CreateGoalRequestFromJSON,
    CreateGoalRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetGoal200ResponseFromJSON,
    GetGoal200ResponseToJSON,
    GetGoals200ResponseFromJSON,
    GetGoals200ResponseToJSON,
    GetParentGoalsForGoal200ResponseFromJSON,
    GetParentGoalsForGoal200ResponseToJSON,
    UpdateGoalMetricRequestFromJSON,
    UpdateGoalMetricRequestToJSON,
    UpdateGoalRequestFromJSON,
    UpdateGoalRequestToJSON,
} from '../models/index.js';

export interface AddFollowersOperationRequest {
    goalGid: string;
    addFollowersRequest: AddFollowersRequest;
    optPretty?: boolean;
    optFields?: Array<AddFollowersOperationOptFieldsEnum>;
}

export interface CreateGoalOperationRequest {
    createGoalRequest: CreateGoalRequest;
    optPretty?: boolean;
    optFields?: Array<CreateGoalOperationOptFieldsEnum>;
}

export interface CreateGoalMetricOperationRequest {
    goalGid: string;
    createGoalMetricRequest: CreateGoalMetricRequest;
    optPretty?: boolean;
    optFields?: Array<CreateGoalMetricOperationOptFieldsEnum>;
}

export interface DeleteGoalRequest {
    goalGid: string;
    optPretty?: boolean;
}

export interface GetGoalRequest {
    goalGid: string;
    optPretty?: boolean;
    optFields?: Array<GetGoalOptFieldsEnum>;
}

export interface GetGoalsRequest {
    optPretty?: boolean;
    portfolio?: string;
    project?: string;
    task?: string;
    isWorkspaceLevel?: boolean;
    team?: string;
    workspace?: string;
    timePeriods?: Array<string>;
    limit?: number;
    offset?: string;
    optFields?: Array<GetGoalsOptFieldsEnum>;
}

export interface GetParentGoalsForGoalRequest {
    goalGid: string;
    optPretty?: boolean;
    optFields?: Array<GetParentGoalsForGoalOptFieldsEnum>;
}

export interface RemoveFollowersRequest {
    goalGid: string;
    addFollowersRequest: AddFollowersRequest;
    optPretty?: boolean;
    optFields?: Array<RemoveFollowersOptFieldsEnum>;
}

export interface UpdateGoalOperationRequest {
    goalGid: string;
    updateGoalRequest: UpdateGoalRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateGoalOperationOptFieldsEnum>;
}

export interface UpdateGoalMetricOperationRequest {
    goalGid: string;
    updateGoalMetricRequest: UpdateGoalMetricRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateGoalMetricOperationOptFieldsEnum>;
}

/**
 * 
 */
export class GoalsApi extends runtime.BaseAPI {

    /**
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * Add a collaborator to a goal
     */
    async addFollowersRaw(requestParameters: AddFollowersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoal200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling addFollowers().'
            );
        }

        if (requestParameters['addFollowersRequest'] == null) {
            throw new runtime.RequiredError(
                'addFollowersRequest',
                'Required parameter "addFollowersRequest" was null or undefined when calling addFollowers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals/{goal_gid}/addFollowers`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFollowersRequestToJSON(requestParameters['addFollowersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoal200ResponseFromJSON(jsonValue));
    }

    /**
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * Add a collaborator to a goal
     */
    async addFollowers(requestParameters: AddFollowersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoal200Response> {
        const response = await this.addFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     * Create a goal
     */
    async createGoalRaw(requestParameters: CreateGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoal200Response>> {
        if (requestParameters['createGoalRequest'] == null) {
            throw new runtime.RequiredError(
                'createGoalRequest',
                'Required parameter "createGoalRequest" was null or undefined when calling createGoal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGoalRequestToJSON(requestParameters['createGoalRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoal200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     * Create a goal
     */
    async createGoal(requestParameters: CreateGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoal200Response> {
        const response = await this.createGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     * Create a goal metric
     */
    async createGoalMetricRaw(requestParameters: CreateGoalMetricOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoal200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling createGoalMetric().'
            );
        }

        if (requestParameters['createGoalMetricRequest'] == null) {
            throw new runtime.RequiredError(
                'createGoalMetricRequest',
                'Required parameter "createGoalMetricRequest" was null or undefined when calling createGoalMetric().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals/{goal_gid}/setMetric`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGoalMetricRequestToJSON(requestParameters['createGoalMetricRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoal200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     * Create a goal metric
     */
    async createGoalMetric(requestParameters: CreateGoalMetricOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoal200Response> {
        const response = await this.createGoalMetricRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     * Delete a goal
     */
    async deleteGoalRaw(requestParameters: DeleteGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling deleteGoal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals/{goal_gid}`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     * Delete a goal
     */
    async deleteGoal(requestParameters: DeleteGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>goals:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>time_period</code></td>     <td><code>time_periods:read</code></td>   </tr> </table>  Returns the complete goal record for a single goal.
     * Get a goal
     */
    async getGoalRaw(requestParameters: GetGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoal200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling getGoal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["goals:read"]);
        }


        let urlPath = `/goals/{goal_gid}`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoal200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>goals:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>time_period</code></td>     <td><code>time_periods:read</code></td>   </tr> </table>  Returns the complete goal record for a single goal.
     * Get a goal
     */
    async getGoal(requestParameters: GetGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoal200Response> {
        const response = await this.getGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>goals:read</code>  Returns compact goal records.
     * Get goals
     */
    async getGoalsRaw(requestParameters: GetGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoals200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['portfolio'] != null) {
            queryParameters['portfolio'] = requestParameters['portfolio'];
        }

        if (requestParameters['project'] != null) {
            queryParameters['project'] = requestParameters['project'];
        }

        if (requestParameters['task'] != null) {
            queryParameters['task'] = requestParameters['task'];
        }

        if (requestParameters['isWorkspaceLevel'] != null) {
            queryParameters['is_workspace_level'] = requestParameters['isWorkspaceLevel'];
        }

        if (requestParameters['team'] != null) {
            queryParameters['team'] = requestParameters['team'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['timePeriods'] != null) {
            queryParameters['time_periods'] = requestParameters['timePeriods'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["goals:read"]);
        }


        let urlPath = `/goals`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoals200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>goals:read</code>  Returns compact goal records.
     * Get goals
     */
    async getGoals(requestParameters: GetGoalsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoals200Response> {
        const response = await this.getGoalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>goals:read</code>  Returns a compact representation of all of the parent goals of a goal.
     * Get parent goals from a goal
     */
    async getParentGoalsForGoalRaw(requestParameters: GetParentGoalsForGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetParentGoalsForGoal200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling getParentGoalsForGoal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["goals:read"]);
        }


        let urlPath = `/goals/{goal_gid}/parentGoals`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetParentGoalsForGoal200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>goals:read</code>  Returns a compact representation of all of the parent goals of a goal.
     * Get parent goals from a goal
     */
    async getParentGoalsForGoal(requestParameters: GetParentGoalsForGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetParentGoalsForGoal200Response> {
        const response = await this.getParentGoalsForGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * Remove a collaborator from a goal
     */
    async removeFollowersRaw(requestParameters: RemoveFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoal200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling removeFollowers().'
            );
        }

        if (requestParameters['addFollowersRequest'] == null) {
            throw new runtime.RequiredError(
                'addFollowersRequest',
                'Required parameter "addFollowersRequest" was null or undefined when calling removeFollowers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals/{goal_gid}/removeFollowers`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFollowersRequestToJSON(requestParameters['addFollowersRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoal200ResponseFromJSON(jsonValue));
    }

    /**
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * Remove a collaborator from a goal
     */
    async removeFollowers(requestParameters: RemoveFollowersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoal200Response> {
        const response = await this.removeFollowersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     * Update a goal
     */
    async updateGoalRaw(requestParameters: UpdateGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoal200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling updateGoal().'
            );
        }

        if (requestParameters['updateGoalRequest'] == null) {
            throw new runtime.RequiredError(
                'updateGoalRequest',
                'Required parameter "updateGoalRequest" was null or undefined when calling updateGoal().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals/{goal_gid}`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGoalRequestToJSON(requestParameters['updateGoalRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoal200ResponseFromJSON(jsonValue));
    }

    /**
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     * Update a goal
     */
    async updateGoal(requestParameters: UpdateGoalOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoal200Response> {
        const response = await this.updateGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     * Update a goal metric
     */
    async updateGoalMetricRaw(requestParameters: UpdateGoalMetricOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoal200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling updateGoalMetric().'
            );
        }

        if (requestParameters['updateGoalMetricRequest'] == null) {
            throw new runtime.RequiredError(
                'updateGoalMetricRequest',
                'Required parameter "updateGoalMetricRequest" was null or undefined when calling updateGoalMetric().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals/{goal_gid}/setMetricCurrentValue`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGoalMetricRequestToJSON(requestParameters['updateGoalMetricRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoal200ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     * Update a goal metric
     */
    async updateGoalMetric(requestParameters: UpdateGoalMetricOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoal200Response> {
        const response = await this.updateGoalMetricRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddFollowersOperationOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Owner: 'owner',
    OwnerName: 'owner.name',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type AddFollowersOperationOptFieldsEnum = typeof AddFollowersOperationOptFieldsEnum[keyof typeof AddFollowersOperationOptFieldsEnum];
/**
 * @export
 */
export const CreateGoalOperationOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Owner: 'owner',
    OwnerName: 'owner.name',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type CreateGoalOperationOptFieldsEnum = typeof CreateGoalOperationOptFieldsEnum[keyof typeof CreateGoalOperationOptFieldsEnum];
/**
 * @export
 */
export const CreateGoalMetricOperationOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Owner: 'owner',
    OwnerName: 'owner.name',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type CreateGoalMetricOperationOptFieldsEnum = typeof CreateGoalMetricOperationOptFieldsEnum[keyof typeof CreateGoalMetricOperationOptFieldsEnum];
/**
 * @export
 */
export const GetGoalOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Owner: 'owner',
    OwnerName: 'owner.name',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetGoalOptFieldsEnum = typeof GetGoalOptFieldsEnum[keyof typeof GetGoalOptFieldsEnum];
/**
 * @export
 */
export const GetGoalsOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Offset: 'offset',
    Owner: 'owner',
    OwnerName: 'owner.name',
    Path: 'path',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetGoalsOptFieldsEnum = typeof GetGoalsOptFieldsEnum[keyof typeof GetGoalsOptFieldsEnum];
/**
 * @export
 */
export const GetParentGoalsForGoalOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Owner: 'owner',
    OwnerName: 'owner.name',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetParentGoalsForGoalOptFieldsEnum = typeof GetParentGoalsForGoalOptFieldsEnum[keyof typeof GetParentGoalsForGoalOptFieldsEnum];
/**
 * @export
 */
export const RemoveFollowersOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Owner: 'owner',
    OwnerName: 'owner.name',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type RemoveFollowersOptFieldsEnum = typeof RemoveFollowersOptFieldsEnum[keyof typeof RemoveFollowersOptFieldsEnum];
/**
 * @export
 */
export const UpdateGoalOperationOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Owner: 'owner',
    OwnerName: 'owner.name',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type UpdateGoalOperationOptFieldsEnum = typeof UpdateGoalOperationOptFieldsEnum[keyof typeof UpdateGoalOperationOptFieldsEnum];
/**
 * @export
 */
export const UpdateGoalMetricOperationOptFieldsEnum = {
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    IsWorkspaceLevel: 'is_workspace_level',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    Metric: 'metric',
    MetricCanManage: 'metric.can_manage',
    MetricCurrencyCode: 'metric.currency_code',
    MetricCurrentDisplayValue: 'metric.current_display_value',
    MetricCurrentNumberValue: 'metric.current_number_value',
    MetricInitialNumberValue: 'metric.initial_number_value',
    MetricIsCustomWeight: 'metric.is_custom_weight',
    MetricPrecision: 'metric.precision',
    MetricProgressSource: 'metric.progress_source',
    MetricResourceSubtype: 'metric.resource_subtype',
    MetricTargetNumberValue: 'metric.target_number_value',
    MetricUnit: 'metric.unit',
    Name: 'name',
    Notes: 'notes',
    NumLikes: 'num_likes',
    Owner: 'owner',
    OwnerName: 'owner.name',
    StartOn: 'start_on',
    Status: 'status',
    Team: 'team',
    TeamName: 'team.name',
    TimePeriod: 'time_period',
    TimePeriodDisplayName: 'time_period.display_name',
    TimePeriodEndOn: 'time_period.end_on',
    TimePeriodPeriod: 'time_period.period',
    TimePeriodStartOn: 'time_period.start_on',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type UpdateGoalMetricOperationOptFieldsEnum = typeof UpdateGoalMetricOperationOptFieldsEnum[keyof typeof UpdateGoalMetricOperationOptFieldsEnum];
