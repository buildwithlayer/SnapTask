/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  CreateMembership201Response,
  CreateMembershipRequest,
  ErrorResponse,
  GetMemberships200Response,
  UpdateMembershipRequest,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateMembership201ResponseFromJSON,
    CreateMembership201ResponseToJSON,
    CreateMembershipRequestFromJSON,
    CreateMembershipRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetMemberships200ResponseFromJSON,
    GetMemberships200ResponseToJSON,
    UpdateMembershipRequestFromJSON,
    UpdateMembershipRequestToJSON,
} from '../models/index.js';

export interface CreateMembershipOperationRequest {
    optPretty?: boolean;
    createMembershipRequest?: CreateMembershipRequest;
}

export interface DeleteMembershipRequest {
    membershipGid: string;
    optPretty?: boolean;
}

export interface GetMembershipRequest {
    membershipGid: string;
    optPretty?: boolean;
}

export interface GetMembershipsRequest {
    optPretty?: boolean;
    parent?: string;
    member?: string;
    limit?: number;
    offset?: string;
    optFields?: Array<GetMembershipsOptFieldsEnum>;
}

export interface UpdateMembershipOperationRequest {
    membershipGid: string;
    updateMembershipRequest: UpdateMembershipRequest;
    optPretty?: boolean;
}

/**
 * 
 */
export class MembershipsApi extends runtime.BaseAPI {

    /**
     * Creates a new membership in a `goal`, `project`, `portfolio`, or `custom_field`, where members can be Teams or Users.  Returns the full record of the newly created membership.
     * Create a membership
     */
    async createMembershipRaw(requestParameters: CreateMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMembership201Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/memberships`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMembershipRequestToJSON(requestParameters['createMembershipRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMembership201ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new membership in a `goal`, `project`, `portfolio`, or `custom_field`, where members can be Teams or Users.  Returns the full record of the newly created membership.
     * Create a membership
     */
    async createMembership(requestParameters: CreateMembershipOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMembership201Response> {
        const response = await this.createMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A specific, existing membership for a `goal`, `project`, `portfolio` or `custom_field` can be deleted by making a `DELETE` request on the URL for that membership.  Returns an empty data record.
     * Delete a membership
     */
    async deleteMembershipRaw(requestParameters: DeleteMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['membershipGid'] == null) {
            throw new runtime.RequiredError(
                'membershipGid',
                'Required parameter "membershipGid" was null or undefined when calling deleteMembership().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/memberships/{membership_gid}`;
        urlPath = urlPath.replace(`{${"membership_gid"}}`, encodeURIComponent(String(requestParameters['membershipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing membership for a `goal`, `project`, `portfolio` or `custom_field` can be deleted by making a `DELETE` request on the URL for that membership.  Returns an empty data record.
     * Delete a membership
     */
    async deleteMembership(requestParameters: DeleteMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a `project_membership`, `goal_membership`, `portfolio_membership`, or `custom_field_membership` record for a membership id.
     * Get a membership
     */
    async getMembershipRaw(requestParameters: GetMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMembership201Response>> {
        if (requestParameters['membershipGid'] == null) {
            throw new runtime.RequiredError(
                'membershipGid',
                'Required parameter "membershipGid" was null or undefined when calling getMembership().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/memberships/{membership_gid}`;
        urlPath = urlPath.replace(`{${"membership_gid"}}`, encodeURIComponent(String(requestParameters['membershipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMembership201ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a `project_membership`, `goal_membership`, `portfolio_membership`, or `custom_field_membership` record for a membership id.
     * Get a membership
     */
    async getMembership(requestParameters: GetMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMembership201Response> {
        const response = await this.getMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns compact `goal_membership`, `project_membership`, `portfolio_membership`, or `custom_field_membership` records. The possible types for `parent` in this request are `goal`, `project`, `portfolio`, or `custom_field`. An additional member (user GID or team GID) can be passed in to filter to a specific membership.
     * Get multiple memberships
     */
    async getMembershipsRaw(requestParameters: GetMembershipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMemberships200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['parent'] != null) {
            queryParameters['parent'] = requestParameters['parent'];
        }

        if (requestParameters['member'] != null) {
            queryParameters['member'] = requestParameters['member'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/memberships`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMemberships200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns compact `goal_membership`, `project_membership`, `portfolio_membership`, or `custom_field_membership` records. The possible types for `parent` in this request are `goal`, `project`, `portfolio`, or `custom_field`. An additional member (user GID or team GID) can be passed in to filter to a specific membership.
     * Get multiple memberships
     */
    async getMemberships(requestParameters: GetMembershipsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMemberships200Response> {
        const response = await this.getMembershipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An existing membership can be updated by making a `PUT` request on the membership. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged. Memberships on `goals`, `projects`, `portfolios`, and `custom_fields` can be updated.  Returns the full record of the updated membership.
     * Update a membership
     */
    async updateMembershipRaw(requestParameters: UpdateMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateMembership201Response>> {
        if (requestParameters['membershipGid'] == null) {
            throw new runtime.RequiredError(
                'membershipGid',
                'Required parameter "membershipGid" was null or undefined when calling updateMembership().'
            );
        }

        if (requestParameters['updateMembershipRequest'] == null) {
            throw new runtime.RequiredError(
                'updateMembershipRequest',
                'Required parameter "updateMembershipRequest" was null or undefined when calling updateMembership().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/memberships/{membership_gid}`;
        urlPath = urlPath.replace(`{${"membership_gid"}}`, encodeURIComponent(String(requestParameters['membershipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMembershipRequestToJSON(requestParameters['updateMembershipRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMembership201ResponseFromJSON(jsonValue));
    }

    /**
     * An existing membership can be updated by making a `PUT` request on the membership. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged. Memberships on `goals`, `projects`, `portfolios`, and `custom_fields` can be updated.  Returns the full record of the updated membership.
     * Update a membership
     */
    async updateMembership(requestParameters: UpdateMembershipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateMembership201Response> {
        const response = await this.updateMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetMembershipsOptFieldsEnum = {
    Offset: 'offset',
    Path: 'path',
    Uri: 'uri'
} as const;
export type GetMembershipsOptFieldsEnum = typeof GetMembershipsOptFieldsEnum[keyof typeof GetMembershipsOptFieldsEnum];
