/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetFavoritesForUser200Response,
  GetUser200Response,
  GetUsers200Response,
  GetUsersForTeam200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetFavoritesForUser200ResponseFromJSON,
    GetFavoritesForUser200ResponseToJSON,
    GetUser200ResponseFromJSON,
    GetUser200ResponseToJSON,
    GetUsers200ResponseFromJSON,
    GetUsers200ResponseToJSON,
    GetUsersForTeam200ResponseFromJSON,
    GetUsersForTeam200ResponseToJSON,
} from '../models/index.js';

export interface GetFavoritesForUserRequest {
    userGid: string;
    resourceType: GetFavoritesForUserResourceTypeEnum;
    workspace: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetFavoritesForUserOptFieldsEnum>;
}

export interface GetUserRequest {
    userGid: string;
    optPretty?: boolean;
    optFields?: Array<GetUserOptFieldsEnum>;
}

export interface GetUsersRequest {
    workspace?: string;
    team?: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetUsersOptFieldsEnum>;
}

export interface GetUsersForTeamRequest {
    teamGid: string;
    optPretty?: boolean;
    offset?: string;
    optFields?: Array<GetUsersForTeamOptFieldsEnum>;
}

export interface GetUsersForWorkspaceRequest {
    workspaceGid: string;
    optPretty?: boolean;
    offset?: string;
    optFields?: Array<GetUsersForWorkspaceOptFieldsEnum>;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns all of a user\'s favorites within a specified workspace and of a given type. The results are ordered exactly as they appear in the user\'s Asana sidebar in the web application. Note that this endpoint currently only returns favorites for the current user (i.e., the user associated with the authentication token).
     * Get a user\'s favorites
     */
    async getFavoritesForUserRaw(requestParameters: GetFavoritesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetFavoritesForUser200Response>> {
        if (requestParameters['userGid'] == null) {
            throw new runtime.RequiredError(
                'userGid',
                'Required parameter "userGid" was null or undefined when calling getFavoritesForUser().'
            );
        }

        if (requestParameters['resourceType'] == null) {
            throw new runtime.RequiredError(
                'resourceType',
                'Required parameter "resourceType" was null or undefined when calling getFavoritesForUser().'
            );
        }

        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getFavoritesForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['resourceType'] != null) {
            queryParameters['resource_type'] = requestParameters['resourceType'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }


        let urlPath = `/users/{user_gid}/favorites`;
        urlPath = urlPath.replace(`{${"user_gid"}}`, encodeURIComponent(String(requestParameters['userGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFavoritesForUser200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns all of a user\'s favorites within a specified workspace and of a given type. The results are ordered exactly as they appear in the user\'s Asana sidebar in the web application. Note that this endpoint currently only returns favorites for the current user (i.e., the user associated with the authentication token).
     * Get a user\'s favorites
     */
    async getFavoritesForUser(requestParameters: GetFavoritesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetFavoritesForUser200Response> {
        const response = await this.getFavoritesForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns the full user record for the single user with the provided ID.
     * Get a user
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUser200Response>> {
        if (requestParameters['userGid'] == null) {
            throw new runtime.RequiredError(
                'userGid',
                'Required parameter "userGid" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }


        let urlPath = `/users/{user_gid}`;
        urlPath = urlPath.replace(`{${"user_gid"}}`, encodeURIComponent(String(requestParameters['userGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUser200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns the full user record for the single user with the provided ID.
     * Get a user
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUser200Response> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
     * Get multiple users
     */
    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUsers200Response>> {
        const queryParameters: any = {};

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['team'] != null) {
            queryParameters['team'] = requestParameters['team'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }


        let urlPath = `/users`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsers200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter. Results are sorted by user ID.
     * Get multiple users
     */
    async getUsers(requestParameters: GetUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUsers200Response> {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
     * Get users in a team
     */
    async getUsersForTeamRaw(requestParameters: GetUsersForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUsersForTeam200Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling getUsersForTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }


        let urlPath = `/teams/{team_gid}/users`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsersForTeam200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns the compact records for all users that are members of the team. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
     * Get users in a team
     */
    async getUsersForTeam(requestParameters: GetUsersForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUsersForTeam200Response> {
        const response = await this.getUsersForTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
     * Get users in a workspace or organization
     */
    async getUsersForWorkspaceRaw(requestParameters: GetUsersForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUsersForTeam200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling getUsersForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["users:read"]);
        }


        let urlPath = `/workspaces/{workspace_gid}/users`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUsersForTeam200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>users:read</code>  Returns the compact records for all users in the specified workspace or organization. Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
     * Get users in a workspace or organization
     */
    async getUsersForWorkspace(requestParameters: GetUsersForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUsersForTeam200Response> {
        const response = await this.getUsersForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetFavoritesForUserResourceTypeEnum = {
    Portfolio: 'portfolio',
    Project: 'project',
    Tag: 'tag',
    Task: 'task',
    User: 'user',
    ProjectTemplate: 'project_template'
} as const;
export type GetFavoritesForUserResourceTypeEnum = typeof GetFavoritesForUserResourceTypeEnum[keyof typeof GetFavoritesForUserResourceTypeEnum];
/**
 * @export
 */
export const GetFavoritesForUserOptFieldsEnum = {
    Name: 'name',
    Offset: 'offset',
    Path: 'path',
    Uri: 'uri'
} as const;
export type GetFavoritesForUserOptFieldsEnum = typeof GetFavoritesForUserOptFieldsEnum[keyof typeof GetFavoritesForUserOptFieldsEnum];
/**
 * @export
 */
export const GetUserOptFieldsEnum = {
    Email: 'email',
    Name: 'name',
    Photo: 'photo',
    PhotoImage1024x1024: 'photo.image_1024x1024',
    PhotoImage128x128: 'photo.image_128x128',
    PhotoImage21x21: 'photo.image_21x21',
    PhotoImage27x27: 'photo.image_27x27',
    PhotoImage36x36: 'photo.image_36x36',
    PhotoImage60x60: 'photo.image_60x60',
    Workspaces: 'workspaces',
    WorkspacesName: 'workspaces.name'
} as const;
export type GetUserOptFieldsEnum = typeof GetUserOptFieldsEnum[keyof typeof GetUserOptFieldsEnum];
/**
 * @export
 */
export const GetUsersOptFieldsEnum = {
    Email: 'email',
    Name: 'name',
    Offset: 'offset',
    Path: 'path',
    Photo: 'photo',
    PhotoImage1024x1024: 'photo.image_1024x1024',
    PhotoImage128x128: 'photo.image_128x128',
    PhotoImage21x21: 'photo.image_21x21',
    PhotoImage27x27: 'photo.image_27x27',
    PhotoImage36x36: 'photo.image_36x36',
    PhotoImage60x60: 'photo.image_60x60',
    Uri: 'uri',
    Workspaces: 'workspaces',
    WorkspacesName: 'workspaces.name'
} as const;
export type GetUsersOptFieldsEnum = typeof GetUsersOptFieldsEnum[keyof typeof GetUsersOptFieldsEnum];
/**
 * @export
 */
export const GetUsersForTeamOptFieldsEnum = {
    Email: 'email',
    Name: 'name',
    Photo: 'photo',
    PhotoImage1024x1024: 'photo.image_1024x1024',
    PhotoImage128x128: 'photo.image_128x128',
    PhotoImage21x21: 'photo.image_21x21',
    PhotoImage27x27: 'photo.image_27x27',
    PhotoImage36x36: 'photo.image_36x36',
    PhotoImage60x60: 'photo.image_60x60',
    Workspaces: 'workspaces',
    WorkspacesName: 'workspaces.name'
} as const;
export type GetUsersForTeamOptFieldsEnum = typeof GetUsersForTeamOptFieldsEnum[keyof typeof GetUsersForTeamOptFieldsEnum];
/**
 * @export
 */
export const GetUsersForWorkspaceOptFieldsEnum = {
    Email: 'email',
    Name: 'name',
    Photo: 'photo',
    PhotoImage1024x1024: 'photo.image_1024x1024',
    PhotoImage128x128: 'photo.image_128x128',
    PhotoImage21x21: 'photo.image_21x21',
    PhotoImage27x27: 'photo.image_27x27',
    PhotoImage36x36: 'photo.image_36x36',
    PhotoImage60x60: 'photo.image_60x60',
    Workspaces: 'workspaces',
    WorkspacesName: 'workspaces.name'
} as const;
export type GetUsersForWorkspaceOptFieldsEnum = typeof GetUsersForWorkspaceOptFieldsEnum[keyof typeof GetUsersForWorkspaceOptFieldsEnum];
