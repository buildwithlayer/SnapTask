/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddUserForTeamRequest,
  ApproveAccessRequest200Response,
  CreateTeam201Response,
  CreateTeamRequest,
  ErrorResponse,
  GetTeamMembership200Response,
  GetTeamsForWorkspace200Response,
  RemoveUserForTeamRequest,
} from '../models/index.js';
import {
    AddUserForTeamRequestFromJSON,
    AddUserForTeamRequestToJSON,
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateTeam201ResponseFromJSON,
    CreateTeam201ResponseToJSON,
    CreateTeamRequestFromJSON,
    CreateTeamRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetTeamMembership200ResponseFromJSON,
    GetTeamMembership200ResponseToJSON,
    GetTeamsForWorkspace200ResponseFromJSON,
    GetTeamsForWorkspace200ResponseToJSON,
    RemoveUserForTeamRequestFromJSON,
    RemoveUserForTeamRequestToJSON,
} from '../models/index.js';

export interface AddUserForTeamOperationRequest {
    teamGid: string;
    addUserForTeamRequest: AddUserForTeamRequest;
    optPretty?: boolean;
    optFields?: Array<AddUserForTeamOperationOptFieldsEnum>;
}

export interface CreateTeamOperationRequest {
    createTeamRequest: CreateTeamRequest;
    optPretty?: boolean;
    optFields?: Array<CreateTeamOperationOptFieldsEnum>;
}

export interface GetTeamRequest {
    teamGid: string;
    optPretty?: boolean;
    optFields?: Array<GetTeamOptFieldsEnum>;
}

export interface GetTeamsForUserRequest {
    userGid: string;
    organization: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetTeamsForUserOptFieldsEnum>;
}

export interface GetTeamsForWorkspaceRequest {
    workspaceGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetTeamsForWorkspaceOptFieldsEnum>;
}

export interface RemoveUserForTeamOperationRequest {
    teamGid: string;
    removeUserForTeamRequest: RemoveUserForTeamRequest;
    optPretty?: boolean;
}

export interface UpdateTeamRequest {
    teamGid: string;
    createTeamRequest: CreateTeamRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateTeamOptFieldsEnum>;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.
     * Add a user to a team
     */
    async addUserForTeamRaw(requestParameters: AddUserForTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamMembership200Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling addUserForTeam().'
            );
        }

        if (requestParameters['addUserForTeamRequest'] == null) {
            throw new runtime.RequiredError(
                'addUserForTeamRequest',
                'Required parameter "addUserForTeamRequest" was null or undefined when calling addUserForTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/teams/{team_gid}/addUser`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserForTeamRequestToJSON(requestParameters['addUserForTeamRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamMembership200ResponseFromJSON(jsonValue));
    }

    /**
     * The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.
     * Add a user to a team
     */
    async addUserForTeam(requestParameters: AddUserForTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamMembership200Response> {
        const response = await this.addUserForTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a team within the current workspace.
     * Create a team
     */
    async createTeamRaw(requestParameters: CreateTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTeam201Response>> {
        if (requestParameters['createTeamRequest'] == null) {
            throw new runtime.RequiredError(
                'createTeamRequest',
                'Required parameter "createTeamRequest" was null or undefined when calling createTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/teams`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamRequestToJSON(requestParameters['createTeamRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTeam201ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a team within the current workspace.
     * Create a team
     */
    async createTeam(requestParameters: CreateTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTeam201Response> {
        const response = await this.createTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>teams:read</code>  Returns the full record for a single team.
     * Get a team
     */
    async getTeamRaw(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTeam201Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling getTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["teams:read"]);
        }


        let urlPath = `/teams/{team_gid}`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTeam201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>teams:read</code>  Returns the full record for a single team.
     * Get a team
     */
    async getTeam(requestParameters: GetTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTeam201Response> {
        const response = await this.getTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>teams:read</code>  Returns the compact records for all teams to which the given user is assigned.
     * Get teams for a user
     */
    async getTeamsForUserRaw(requestParameters: GetTeamsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamsForWorkspace200Response>> {
        if (requestParameters['userGid'] == null) {
            throw new runtime.RequiredError(
                'userGid',
                'Required parameter "userGid" was null or undefined when calling getTeamsForUser().'
            );
        }

        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getTeamsForUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['organization'] != null) {
            queryParameters['organization'] = requestParameters['organization'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["teams:read"]);
        }


        let urlPath = `/users/{user_gid}/teams`;
        urlPath = urlPath.replace(`{${"user_gid"}}`, encodeURIComponent(String(requestParameters['userGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamsForWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>teams:read</code>  Returns the compact records for all teams to which the given user is assigned.
     * Get teams for a user
     */
    async getTeamsForUser(requestParameters: GetTeamsForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamsForWorkspace200Response> {
        const response = await this.getTeamsForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>teams:read</code>  Returns the compact records for all teams in the workspace visible to the authorized user.
     * Get teams in a workspace
     */
    async getTeamsForWorkspaceRaw(requestParameters: GetTeamsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamsForWorkspace200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling getTeamsForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["teams:read"]);
        }


        let urlPath = `/workspaces/{workspace_gid}/teams`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamsForWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>teams:read</code>  Returns the compact records for all teams in the workspace visible to the authorized user.
     * Get teams in a workspace
     */
    async getTeamsForWorkspace(requestParameters: GetTeamsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamsForWorkspace200Response> {
        const response = await this.getTeamsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The user making this call must be a member of the team in order to remove themselves or others.
     * Remove a user from a team
     */
    async removeUserForTeamRaw(requestParameters: RemoveUserForTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling removeUserForTeam().'
            );
        }

        if (requestParameters['removeUserForTeamRequest'] == null) {
            throw new runtime.RequiredError(
                'removeUserForTeamRequest',
                'Required parameter "removeUserForTeamRequest" was null or undefined when calling removeUserForTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/teams/{team_gid}/removeUser`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveUserForTeamRequestToJSON(requestParameters['removeUserForTeamRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * The user making this call must be a member of the team in order to remove themselves or others.
     * Remove a user from a team
     */
    async removeUserForTeam(requestParameters: RemoveUserForTeamOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeUserForTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a team within the current workspace.
     * Update a team
     */
    async updateTeamRaw(requestParameters: UpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTeam201Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling updateTeam().'
            );
        }

        if (requestParameters['createTeamRequest'] == null) {
            throw new runtime.RequiredError(
                'createTeamRequest',
                'Required parameter "createTeamRequest" was null or undefined when calling updateTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/teams/{team_gid}`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamRequestToJSON(requestParameters['createTeamRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTeam201ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a team within the current workspace.
     * Update a team
     */
    async updateTeam(requestParameters: UpdateTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTeam201Response> {
        const response = await this.updateTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddUserForTeamOperationOptFieldsEnum = {
    IsAdmin: 'is_admin',
    IsGuest: 'is_guest',
    IsLimitedAccess: 'is_limited_access',
    Team: 'team',
    TeamName: 'team.name',
    User: 'user',
    UserName: 'user.name'
} as const;
export type AddUserForTeamOperationOptFieldsEnum = typeof AddUserForTeamOperationOptFieldsEnum[keyof typeof AddUserForTeamOperationOptFieldsEnum];
/**
 * @export
 */
export const CreateTeamOperationOptFieldsEnum = {
    Description: 'description',
    EditTeamNameOrDescriptionAccessLevel: 'edit_team_name_or_description_access_level',
    EditTeamVisibilityOrTrashTeamAccessLevel: 'edit_team_visibility_or_trash_team_access_level',
    Endorsed: 'endorsed',
    GuestInviteManagementAccessLevel: 'guest_invite_management_access_level',
    HtmlDescription: 'html_description',
    JoinRequestManagementAccessLevel: 'join_request_management_access_level',
    MemberInviteManagementAccessLevel: 'member_invite_management_access_level',
    Name: 'name',
    Organization: 'organization',
    OrganizationName: 'organization.name',
    PermalinkUrl: 'permalink_url',
    TeamContentManagementAccessLevel: 'team_content_management_access_level',
    TeamMemberRemovalAccessLevel: 'team_member_removal_access_level',
    Visibility: 'visibility'
} as const;
export type CreateTeamOperationOptFieldsEnum = typeof CreateTeamOperationOptFieldsEnum[keyof typeof CreateTeamOperationOptFieldsEnum];
/**
 * @export
 */
export const GetTeamOptFieldsEnum = {
    Description: 'description',
    EditTeamNameOrDescriptionAccessLevel: 'edit_team_name_or_description_access_level',
    EditTeamVisibilityOrTrashTeamAccessLevel: 'edit_team_visibility_or_trash_team_access_level',
    Endorsed: 'endorsed',
    GuestInviteManagementAccessLevel: 'guest_invite_management_access_level',
    HtmlDescription: 'html_description',
    JoinRequestManagementAccessLevel: 'join_request_management_access_level',
    MemberInviteManagementAccessLevel: 'member_invite_management_access_level',
    Name: 'name',
    Organization: 'organization',
    OrganizationName: 'organization.name',
    PermalinkUrl: 'permalink_url',
    TeamContentManagementAccessLevel: 'team_content_management_access_level',
    TeamMemberRemovalAccessLevel: 'team_member_removal_access_level',
    Visibility: 'visibility'
} as const;
export type GetTeamOptFieldsEnum = typeof GetTeamOptFieldsEnum[keyof typeof GetTeamOptFieldsEnum];
/**
 * @export
 */
export const GetTeamsForUserOptFieldsEnum = {
    Description: 'description',
    EditTeamNameOrDescriptionAccessLevel: 'edit_team_name_or_description_access_level',
    EditTeamVisibilityOrTrashTeamAccessLevel: 'edit_team_visibility_or_trash_team_access_level',
    Endorsed: 'endorsed',
    GuestInviteManagementAccessLevel: 'guest_invite_management_access_level',
    HtmlDescription: 'html_description',
    JoinRequestManagementAccessLevel: 'join_request_management_access_level',
    MemberInviteManagementAccessLevel: 'member_invite_management_access_level',
    Name: 'name',
    Offset: 'offset',
    Organization: 'organization',
    OrganizationName: 'organization.name',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    TeamContentManagementAccessLevel: 'team_content_management_access_level',
    TeamMemberRemovalAccessLevel: 'team_member_removal_access_level',
    Uri: 'uri',
    Visibility: 'visibility'
} as const;
export type GetTeamsForUserOptFieldsEnum = typeof GetTeamsForUserOptFieldsEnum[keyof typeof GetTeamsForUserOptFieldsEnum];
/**
 * @export
 */
export const GetTeamsForWorkspaceOptFieldsEnum = {
    Description: 'description',
    EditTeamNameOrDescriptionAccessLevel: 'edit_team_name_or_description_access_level',
    EditTeamVisibilityOrTrashTeamAccessLevel: 'edit_team_visibility_or_trash_team_access_level',
    Endorsed: 'endorsed',
    GuestInviteManagementAccessLevel: 'guest_invite_management_access_level',
    HtmlDescription: 'html_description',
    JoinRequestManagementAccessLevel: 'join_request_management_access_level',
    MemberInviteManagementAccessLevel: 'member_invite_management_access_level',
    Name: 'name',
    Offset: 'offset',
    Organization: 'organization',
    OrganizationName: 'organization.name',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    TeamContentManagementAccessLevel: 'team_content_management_access_level',
    TeamMemberRemovalAccessLevel: 'team_member_removal_access_level',
    Uri: 'uri',
    Visibility: 'visibility'
} as const;
export type GetTeamsForWorkspaceOptFieldsEnum = typeof GetTeamsForWorkspaceOptFieldsEnum[keyof typeof GetTeamsForWorkspaceOptFieldsEnum];
/**
 * @export
 */
export const UpdateTeamOptFieldsEnum = {
    Description: 'description',
    EditTeamNameOrDescriptionAccessLevel: 'edit_team_name_or_description_access_level',
    EditTeamVisibilityOrTrashTeamAccessLevel: 'edit_team_visibility_or_trash_team_access_level',
    Endorsed: 'endorsed',
    GuestInviteManagementAccessLevel: 'guest_invite_management_access_level',
    HtmlDescription: 'html_description',
    JoinRequestManagementAccessLevel: 'join_request_management_access_level',
    MemberInviteManagementAccessLevel: 'member_invite_management_access_level',
    Name: 'name',
    Organization: 'organization',
    OrganizationName: 'organization.name',
    PermalinkUrl: 'permalink_url',
    TeamContentManagementAccessLevel: 'team_content_management_access_level',
    TeamMemberRemovalAccessLevel: 'team_member_removal_access_level',
    Visibility: 'visibility'
} as const;
export type UpdateTeamOptFieldsEnum = typeof UpdateTeamOptFieldsEnum[keyof typeof UpdateTeamOptFieldsEnum];
