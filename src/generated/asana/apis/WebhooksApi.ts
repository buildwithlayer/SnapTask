/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  CreateWebhook201Response,
  CreateWebhookRequest,
  ErrorResponse,
  GetWebhook200Response,
  GetWebhooks200Response,
  UpdateWebhookRequest,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateWebhook201ResponseFromJSON,
    CreateWebhook201ResponseToJSON,
    CreateWebhookRequestFromJSON,
    CreateWebhookRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetWebhook200ResponseFromJSON,
    GetWebhook200ResponseToJSON,
    GetWebhooks200ResponseFromJSON,
    GetWebhooks200ResponseToJSON,
    UpdateWebhookRequestFromJSON,
    UpdateWebhookRequestToJSON,
} from '../models/index.js';

export interface CreateWebhookOperationRequest {
    createWebhookRequest: CreateWebhookRequest;
    optPretty?: boolean;
    optFields?: Array<CreateWebhookOperationOptFieldsEnum>;
}

export interface DeleteWebhookRequest {
    webhookGid: string;
    optPretty?: boolean;
}

export interface GetWebhookRequest {
    webhookGid: string;
    optPretty?: boolean;
    optFields?: Array<GetWebhookOptFieldsEnum>;
}

export interface GetWebhooksRequest {
    workspace: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    resource?: string;
    optFields?: Array<GetWebhooksOptFieldsEnum>;
}

export interface UpdateWebhookOperationRequest {
    webhookGid: string;
    updateWebhookRequest: UpdateWebhookRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateWebhookOperationOptFieldsEnum>;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>webhooks:write</code>  Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will receive a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   },   \"X-Hook-Secret\": \"b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\" } ```
     * Establish a webhook
     */
    async createWebhookRaw(requestParameters: CreateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateWebhook201Response>> {
        if (requestParameters['createWebhookRequest'] == null) {
            throw new runtime.RequiredError(
                'createWebhookRequest',
                'Required parameter "createWebhookRequest" was null or undefined when calling createWebhook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["webhooks:write"]);
        }


        let urlPath = `/webhooks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWebhookRequestToJSON(requestParameters['createWebhookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateWebhook201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>webhooks:write</code>  Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will receive a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   },   \"X-Hook-Secret\": \"b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\" } ```
     * Establish a webhook
     */
    async createWebhook(requestParameters: CreateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateWebhook201Response> {
        const response = await this.createWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>webhooks:delete</code>  This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
     * Delete a webhook
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['webhookGid'] == null) {
            throw new runtime.RequiredError(
                'webhookGid',
                'Required parameter "webhookGid" was null or undefined when calling deleteWebhook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["webhooks:delete"]);
        }


        let urlPath = `/webhooks/{webhook_gid}`;
        urlPath = urlPath.replace(`{${"webhook_gid"}}`, encodeURIComponent(String(requestParameters['webhookGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>webhooks:delete</code>  This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
     * Delete a webhook
     */
    async deleteWebhook(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>webhooks:read</code>  Returns the full record for the given webhook.
     * Get a webhook
     */
    async getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhook200Response>> {
        if (requestParameters['webhookGid'] == null) {
            throw new runtime.RequiredError(
                'webhookGid',
                'Required parameter "webhookGid" was null or undefined when calling getWebhook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["webhooks:read"]);
        }


        let urlPath = `/webhooks/{webhook_gid}`;
        urlPath = urlPath.replace(`{${"webhook_gid"}}`, encodeURIComponent(String(requestParameters['webhookGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWebhook200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>webhooks:read</code>  Returns the full record for the given webhook.
     * Get a webhook
     */
    async getWebhook(requestParameters: GetWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhook200Response> {
        const response = await this.getWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>webhooks:read</code>  Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
     * Get multiple webhooks
     */
    async getWebhooksRaw(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhooks200Response>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getWebhooks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['resource'] != null) {
            queryParameters['resource'] = requestParameters['resource'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["webhooks:read"]);
        }


        let urlPath = `/webhooks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWebhooks200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>webhooks:read</code>  Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
     * Get multiple webhooks
     */
    async getWebhooks(requestParameters: GetWebhooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhooks200Response> {
        const response = await this.getWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>webhooks:write</code>  An existing webhook\'s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook\'s previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
     * Update a webhook
     */
    async updateWebhookRaw(requestParameters: UpdateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWebhook200Response>> {
        if (requestParameters['webhookGid'] == null) {
            throw new runtime.RequiredError(
                'webhookGid',
                'Required parameter "webhookGid" was null or undefined when calling updateWebhook().'
            );
        }

        if (requestParameters['updateWebhookRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWebhookRequest',
                'Required parameter "updateWebhookRequest" was null or undefined when calling updateWebhook().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["webhooks:write"]);
        }


        let urlPath = `/webhooks/{webhook_gid}`;
        urlPath = urlPath.replace(`{${"webhook_gid"}}`, encodeURIComponent(String(requestParameters['webhookGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWebhookRequestToJSON(requestParameters['updateWebhookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWebhook200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>webhooks:write</code>  An existing webhook\'s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook\'s previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
     * Update a webhook
     */
    async updateWebhook(requestParameters: UpdateWebhookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWebhook200Response> {
        const response = await this.updateWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateWebhookOperationOptFieldsEnum = {
    Active: 'active',
    CreatedAt: 'created_at',
    DeliveryRetryCount: 'delivery_retry_count',
    FailureDeletionTimestamp: 'failure_deletion_timestamp',
    Filters: 'filters',
    FiltersAction: 'filters.action',
    FiltersFields: 'filters.fields',
    FiltersResourceSubtype: 'filters.resource_subtype',
    LastFailureAt: 'last_failure_at',
    LastFailureContent: 'last_failure_content',
    LastSuccessAt: 'last_success_at',
    NextAttemptAfter: 'next_attempt_after',
    Resource: 'resource',
    ResourceName: 'resource.name',
    Target: 'target'
} as const;
export type CreateWebhookOperationOptFieldsEnum = typeof CreateWebhookOperationOptFieldsEnum[keyof typeof CreateWebhookOperationOptFieldsEnum];
/**
 * @export
 */
export const GetWebhookOptFieldsEnum = {
    Active: 'active',
    CreatedAt: 'created_at',
    DeliveryRetryCount: 'delivery_retry_count',
    FailureDeletionTimestamp: 'failure_deletion_timestamp',
    Filters: 'filters',
    FiltersAction: 'filters.action',
    FiltersFields: 'filters.fields',
    FiltersResourceSubtype: 'filters.resource_subtype',
    LastFailureAt: 'last_failure_at',
    LastFailureContent: 'last_failure_content',
    LastSuccessAt: 'last_success_at',
    NextAttemptAfter: 'next_attempt_after',
    Resource: 'resource',
    ResourceName: 'resource.name',
    Target: 'target'
} as const;
export type GetWebhookOptFieldsEnum = typeof GetWebhookOptFieldsEnum[keyof typeof GetWebhookOptFieldsEnum];
/**
 * @export
 */
export const GetWebhooksOptFieldsEnum = {
    Active: 'active',
    CreatedAt: 'created_at',
    DeliveryRetryCount: 'delivery_retry_count',
    FailureDeletionTimestamp: 'failure_deletion_timestamp',
    Filters: 'filters',
    FiltersAction: 'filters.action',
    FiltersFields: 'filters.fields',
    FiltersResourceSubtype: 'filters.resource_subtype',
    LastFailureAt: 'last_failure_at',
    LastFailureContent: 'last_failure_content',
    LastSuccessAt: 'last_success_at',
    NextAttemptAfter: 'next_attempt_after',
    Offset: 'offset',
    Path: 'path',
    Resource: 'resource',
    ResourceName: 'resource.name',
    Target: 'target',
    Uri: 'uri'
} as const;
export type GetWebhooksOptFieldsEnum = typeof GetWebhooksOptFieldsEnum[keyof typeof GetWebhooksOptFieldsEnum];
/**
 * @export
 */
export const UpdateWebhookOperationOptFieldsEnum = {
    Active: 'active',
    CreatedAt: 'created_at',
    DeliveryRetryCount: 'delivery_retry_count',
    FailureDeletionTimestamp: 'failure_deletion_timestamp',
    Filters: 'filters',
    FiltersAction: 'filters.action',
    FiltersFields: 'filters.fields',
    FiltersResourceSubtype: 'filters.resource_subtype',
    LastFailureAt: 'last_failure_at',
    LastFailureContent: 'last_failure_content',
    LastSuccessAt: 'last_success_at',
    NextAttemptAfter: 'next_attempt_after',
    Resource: 'resource',
    ResourceName: 'resource.name',
    Target: 'target'
} as const;
export type UpdateWebhookOperationOptFieldsEnum = typeof UpdateWebhookOperationOptFieldsEnum[keyof typeof UpdateWebhookOperationOptFieldsEnum];
