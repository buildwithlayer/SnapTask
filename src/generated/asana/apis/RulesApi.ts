/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  TriggerRule200Response,
  TriggerRuleRequest,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TriggerRule200ResponseFromJSON,
    TriggerRule200ResponseToJSON,
    TriggerRuleRequestFromJSON,
    TriggerRuleRequestToJSON,
} from '../models/index.js';

export interface TriggerRuleOperationRequest {
    ruleTriggerGid: string;
    triggerRuleRequest: TriggerRuleRequest;
}

/**
 * 
 */
export class RulesApi extends runtime.BaseAPI {

    /**
     * Trigger a rule which uses an [\"incoming web request\"](/docs/incoming-web-requests) trigger.
     * Trigger a rule
     */
    async triggerRuleRaw(requestParameters: TriggerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TriggerRule200Response>> {
        if (requestParameters['ruleTriggerGid'] == null) {
            throw new runtime.RequiredError(
                'ruleTriggerGid',
                'Required parameter "ruleTriggerGid" was null or undefined when calling triggerRule().'
            );
        }

        if (requestParameters['triggerRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'triggerRuleRequest',
                'Required parameter "triggerRuleRequest" was null or undefined when calling triggerRule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/rule_triggers/{rule_trigger_gid}/run`;
        urlPath = urlPath.replace(`{${"rule_trigger_gid"}}`, encodeURIComponent(String(requestParameters['ruleTriggerGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TriggerRuleRequestToJSON(requestParameters['triggerRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TriggerRule200ResponseFromJSON(jsonValue));
    }

    /**
     * Trigger a rule which uses an [\"incoming web request\"](/docs/incoming-web-requests) trigger.
     * Trigger a rule
     */
    async triggerRule(requestParameters: TriggerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TriggerRule200Response> {
        const response = await this.triggerRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
