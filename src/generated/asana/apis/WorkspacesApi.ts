/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddUserForWorkspace200Response,
  AddUserForWorkspaceRequest,
  ApproveAccessRequest200Response,
  ErrorResponse,
  GetEvents200Response,
  GetWorkspace200Response,
  GetWorkspaces200Response,
  RemoveUserForWorkspaceRequest,
  UpdateWorkspaceRequest,
} from '../models/index.js';
import {
    AddUserForWorkspace200ResponseFromJSON,
    AddUserForWorkspace200ResponseToJSON,
    AddUserForWorkspaceRequestFromJSON,
    AddUserForWorkspaceRequestToJSON,
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetEvents200ResponseFromJSON,
    GetEvents200ResponseToJSON,
    GetWorkspace200ResponseFromJSON,
    GetWorkspace200ResponseToJSON,
    GetWorkspaces200ResponseFromJSON,
    GetWorkspaces200ResponseToJSON,
    RemoveUserForWorkspaceRequestFromJSON,
    RemoveUserForWorkspaceRequestToJSON,
    UpdateWorkspaceRequestFromJSON,
    UpdateWorkspaceRequestToJSON,
} from '../models/index.js';

export interface AddUserForWorkspaceOperationRequest {
    workspaceGid: string;
    addUserForWorkspaceRequest: AddUserForWorkspaceRequest;
    optPretty?: boolean;
    optFields?: Array<AddUserForWorkspaceOperationOptFieldsEnum>;
}

export interface GetWorkspaceRequest {
    workspaceGid: string;
    optPretty?: boolean;
    optFields?: Array<GetWorkspaceOptFieldsEnum>;
}

export interface GetWorkspaceEventsRequest {
    workspaceGid: string;
    optPretty?: boolean;
    sync?: string;
}

export interface GetWorkspacesRequest {
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetWorkspacesOptFieldsEnum>;
}

export interface RemoveUserForWorkspaceOperationRequest {
    workspaceGid: string;
    removeUserForWorkspaceRequest: RemoveUserForWorkspaceRequest;
    optPretty?: boolean;
}

export interface UpdateWorkspaceOperationRequest {
    workspaceGid: string;
    updateWorkspaceRequest: UpdateWorkspaceRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateWorkspaceOperationOptFieldsEnum>;
}

/**
 * 
 */
export class WorkspacesApi extends runtime.BaseAPI {

    /**
     * Add a user to a workspace or organization. The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
     * Add a user to a workspace or organization
     */
    async addUserForWorkspaceRaw(requestParameters: AddUserForWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddUserForWorkspace200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling addUserForWorkspace().'
            );
        }

        if (requestParameters['addUserForWorkspaceRequest'] == null) {
            throw new runtime.RequiredError(
                'addUserForWorkspaceRequest',
                'Required parameter "addUserForWorkspaceRequest" was null or undefined when calling addUserForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/workspaces/{workspace_gid}/addUser`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserForWorkspaceRequestToJSON(requestParameters['addUserForWorkspaceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddUserForWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * Add a user to a workspace or organization. The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
     * Add a user to a workspace or organization
     */
    async addUserForWorkspace(requestParameters: AddUserForWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddUserForWorkspace200Response> {
        const response = await this.addUserForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>workspaces:read</code>  Returns the full workspace record for a single workspace.
     * Get a workspace
     */
    async getWorkspaceRaw(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspace200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling getWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["workspaces:read"]);
        }


        let urlPath = `/workspaces/{workspace_gid}`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>workspaces:read</code>  Returns the full workspace record for a single workspace.
     * Get a workspace
     */
    async getWorkspace(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspace200Response> {
        const response = await this.getWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the full record for all events that have occurred since the sync token was created. The response is a list of events and the schema of each event is as described [here](/reference/events). Asana limits a single sync token to 1000 events. If more than 1000 events exist for a given domain, `has_more: true` will be returned in the response, indicating that there are more events to pull.
     * Get workspace events
     */
    async getWorkspaceEventsRaw(requestParameters: GetWorkspaceEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEvents200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling getWorkspaceEvents().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['sync'] != null) {
            queryParameters['sync'] = requestParameters['sync'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/workspaces/{workspace_gid}/events`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEvents200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the full record for all events that have occurred since the sync token was created. The response is a list of events and the schema of each event is as described [here](/reference/events). Asana limits a single sync token to 1000 events. If more than 1000 events exist for a given domain, `has_more: true` will be returned in the response, indicating that there are more events to pull.
     * Get workspace events
     */
    async getWorkspaceEvents(requestParameters: GetWorkspaceEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEvents200Response> {
        const response = await this.getWorkspaceEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>workspaces:read</code>  Returns the compact records for all workspaces visible to the authorized user.
     * Get multiple workspaces
     */
    async getWorkspacesRaw(requestParameters: GetWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspaces200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["workspaces:read"]);
        }


        let urlPath = `/workspaces`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspaces200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>workspaces:read</code>  Returns the compact records for all workspaces visible to the authorized user.
     * Get multiple workspaces
     */
    async getWorkspaces(requestParameters: GetWorkspacesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspaces200Response> {
        const response = await this.getWorkspacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
     * Remove a user from a workspace or organization
     */
    async removeUserForWorkspaceRaw(requestParameters: RemoveUserForWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling removeUserForWorkspace().'
            );
        }

        if (requestParameters['removeUserForWorkspaceRequest'] == null) {
            throw new runtime.RequiredError(
                'removeUserForWorkspaceRequest',
                'Required parameter "removeUserForWorkspaceRequest" was null or undefined when calling removeUserForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/workspaces/{workspace_gid}/removeUser`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveUserForWorkspaceRequestToJSON(requestParameters['removeUserForWorkspaceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
     * Remove a user from a workspace or organization
     */
    async removeUserForWorkspace(requestParameters: RemoveUserForWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeUserForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
     * Update a workspace
     */
    async updateWorkspaceRaw(requestParameters: UpdateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkspace200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling updateWorkspace().'
            );
        }

        if (requestParameters['updateWorkspaceRequest'] == null) {
            throw new runtime.RequiredError(
                'updateWorkspaceRequest',
                'Required parameter "updateWorkspaceRequest" was null or undefined when calling updateWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/workspaces/{workspace_gid}`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWorkspaceRequestToJSON(requestParameters['updateWorkspaceRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkspace200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
     * Update a workspace
     */
    async updateWorkspace(requestParameters: UpdateWorkspaceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkspace200Response> {
        const response = await this.updateWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddUserForWorkspaceOperationOptFieldsEnum = {
    Email: 'email',
    Name: 'name',
    Photo: 'photo',
    PhotoImage1024x1024: 'photo.image_1024x1024',
    PhotoImage128x128: 'photo.image_128x128',
    PhotoImage21x21: 'photo.image_21x21',
    PhotoImage27x27: 'photo.image_27x27',
    PhotoImage36x36: 'photo.image_36x36',
    PhotoImage60x60: 'photo.image_60x60'
} as const;
export type AddUserForWorkspaceOperationOptFieldsEnum = typeof AddUserForWorkspaceOperationOptFieldsEnum[keyof typeof AddUserForWorkspaceOperationOptFieldsEnum];
/**
 * @export
 */
export const GetWorkspaceOptFieldsEnum = {
    EmailDomains: 'email_domains',
    IsOrganization: 'is_organization',
    Name: 'name'
} as const;
export type GetWorkspaceOptFieldsEnum = typeof GetWorkspaceOptFieldsEnum[keyof typeof GetWorkspaceOptFieldsEnum];
/**
 * @export
 */
export const GetWorkspacesOptFieldsEnum = {
    EmailDomains: 'email_domains',
    IsOrganization: 'is_organization',
    Name: 'name',
    Offset: 'offset',
    Path: 'path',
    Uri: 'uri'
} as const;
export type GetWorkspacesOptFieldsEnum = typeof GetWorkspacesOptFieldsEnum[keyof typeof GetWorkspacesOptFieldsEnum];
/**
 * @export
 */
export const UpdateWorkspaceOperationOptFieldsEnum = {
    EmailDomains: 'email_domains',
    IsOrganization: 'is_organization',
    Name: 'name'
} as const;
export type UpdateWorkspaceOperationOptFieldsEnum = typeof UpdateWorkspaceOperationOptFieldsEnum[keyof typeof UpdateWorkspaceOperationOptFieldsEnum];
