/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddCustomFieldSettingForPortfolio200Response,
  AddCustomFieldSettingForPortfolioRequest,
  AddFollowersForProjectRequest,
  AddMembersForPortfolioRequest,
  ApproveAccessRequest200Response,
  CreateProject201Response,
  CreateProjectRequest,
  DuplicateProjectRequest,
  ErrorResponse,
  GetItemsForPortfolio200Response,
  GetJob200Response,
  GetTaskCountsForProject200Response,
  ProjectSaveAsTemplateRequest,
  RemoveCustomFieldSettingForPortfolioRequest,
  RemoveFollowersForProjectRequest,
  RemoveMembersForPortfolioRequest,
  UpdateProjectRequest,
} from '../models/index.js';
import {
    AddCustomFieldSettingForPortfolio200ResponseFromJSON,
    AddCustomFieldSettingForPortfolio200ResponseToJSON,
    AddCustomFieldSettingForPortfolioRequestFromJSON,
    AddCustomFieldSettingForPortfolioRequestToJSON,
    AddFollowersForProjectRequestFromJSON,
    AddFollowersForProjectRequestToJSON,
    AddMembersForPortfolioRequestFromJSON,
    AddMembersForPortfolioRequestToJSON,
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateProject201ResponseFromJSON,
    CreateProject201ResponseToJSON,
    CreateProjectRequestFromJSON,
    CreateProjectRequestToJSON,
    DuplicateProjectRequestFromJSON,
    DuplicateProjectRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetItemsForPortfolio200ResponseFromJSON,
    GetItemsForPortfolio200ResponseToJSON,
    GetJob200ResponseFromJSON,
    GetJob200ResponseToJSON,
    GetTaskCountsForProject200ResponseFromJSON,
    GetTaskCountsForProject200ResponseToJSON,
    ProjectSaveAsTemplateRequestFromJSON,
    ProjectSaveAsTemplateRequestToJSON,
    RemoveCustomFieldSettingForPortfolioRequestFromJSON,
    RemoveCustomFieldSettingForPortfolioRequestToJSON,
    RemoveFollowersForProjectRequestFromJSON,
    RemoveFollowersForProjectRequestToJSON,
    RemoveMembersForPortfolioRequestFromJSON,
    RemoveMembersForPortfolioRequestToJSON,
    UpdateProjectRequestFromJSON,
    UpdateProjectRequestToJSON,
} from '../models/index.js';

export interface AddCustomFieldSettingForProjectRequest {
    projectGid: string;
    addCustomFieldSettingForPortfolioRequest: AddCustomFieldSettingForPortfolioRequest;
    optPretty?: boolean;
    optFields?: Array<AddCustomFieldSettingForProjectOptFieldsEnum>;
}

export interface AddFollowersForProjectOperationRequest {
    projectGid: string;
    addFollowersForProjectRequest: AddFollowersForProjectRequest;
    optPretty?: boolean;
    optFields?: Array<AddFollowersForProjectOperationOptFieldsEnum>;
}

export interface AddMembersForProjectRequest {
    projectGid: string;
    addMembersForPortfolioRequest: AddMembersForPortfolioRequest;
    optPretty?: boolean;
    optFields?: Array<AddMembersForProjectOptFieldsEnum>;
}

export interface CreateProjectOperationRequest {
    createProjectRequest: CreateProjectRequest;
    optPretty?: boolean;
    optFields?: Array<CreateProjectOperationOptFieldsEnum>;
}

export interface CreateProjectForTeamRequest {
    teamGid: string;
    createProjectRequest: CreateProjectRequest;
    optPretty?: boolean;
    optFields?: Array<CreateProjectForTeamOptFieldsEnum>;
}

export interface CreateProjectForWorkspaceRequest {
    workspaceGid: string;
    createProjectRequest: CreateProjectRequest;
    optPretty?: boolean;
    optFields?: Array<CreateProjectForWorkspaceOptFieldsEnum>;
}

export interface DeleteProjectRequest {
    projectGid: string;
    optPretty?: boolean;
}

export interface DuplicateProjectOperationRequest {
    projectGid: string;
    optPretty?: boolean;
    optFields?: Array<DuplicateProjectOperationOptFieldsEnum>;
    duplicateProjectRequest?: DuplicateProjectRequest;
}

export interface GetProjectRequest {
    projectGid: string;
    optPretty?: boolean;
    optFields?: Array<GetProjectOptFieldsEnum>;
}

export interface GetProjectsRequest {
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    workspace?: string;
    team?: string;
    archived?: boolean;
    optFields?: Array<GetProjectsOptFieldsEnum>;
}

export interface GetProjectsForTaskRequest {
    taskGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetProjectsForTaskOptFieldsEnum>;
}

export interface GetProjectsForTeamRequest {
    teamGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    archived?: boolean;
    optFields?: Array<GetProjectsForTeamOptFieldsEnum>;
}

export interface GetProjectsForWorkspaceRequest {
    workspaceGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    archived?: boolean;
    optFields?: Array<GetProjectsForWorkspaceOptFieldsEnum>;
}

export interface GetTaskCountsForProjectRequest {
    projectGid: string;
    optPretty?: boolean;
    optFields?: Array<GetTaskCountsForProjectOptFieldsEnum>;
}

export interface ProjectSaveAsTemplateOperationRequest {
    projectGid: string;
    projectSaveAsTemplateRequest: ProjectSaveAsTemplateRequest;
    optPretty?: boolean;
    optFields?: Array<ProjectSaveAsTemplateOperationOptFieldsEnum>;
}

export interface RemoveCustomFieldSettingForProjectRequest {
    projectGid: string;
    removeCustomFieldSettingForPortfolioRequest: RemoveCustomFieldSettingForPortfolioRequest;
    optPretty?: boolean;
}

export interface RemoveFollowersForProjectOperationRequest {
    projectGid: string;
    removeFollowersForProjectRequest: RemoveFollowersForProjectRequest;
    optPretty?: boolean;
    optFields?: Array<RemoveFollowersForProjectOperationOptFieldsEnum>;
}

export interface RemoveMembersForProjectRequest {
    projectGid: string;
    removeMembersForPortfolioRequest: RemoveMembersForPortfolioRequest;
    optPretty?: boolean;
    optFields?: Array<RemoveMembersForProjectOptFieldsEnum>;
}

export interface UpdateProjectOperationRequest {
    projectGid: string;
    updateProjectRequest: UpdateProjectRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateProjectOperationOptFieldsEnum>;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>projects:write</code>  Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.
     * Add a custom field to a project
     */
    async addCustomFieldSettingForProjectRaw(requestParameters: AddCustomFieldSettingForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCustomFieldSettingForPortfolio200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling addCustomFieldSettingForProject().'
            );
        }

        if (requestParameters['addCustomFieldSettingForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'addCustomFieldSettingForPortfolioRequest',
                'Required parameter "addCustomFieldSettingForPortfolioRequest" was null or undefined when calling addCustomFieldSettingForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:write"]);
        }


        let urlPath = `/projects/{project_gid}/addCustomFieldSetting`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCustomFieldSettingForPortfolioRequestToJSON(requestParameters['addCustomFieldSettingForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCustomFieldSettingForPortfolio200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.
     * Add a custom field to a project
     */
    async addCustomFieldSettingForProject(requestParameters: AddCustomFieldSettingForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCustomFieldSettingForPortfolio200Response> {
        const response = await this.addCustomFieldSettingForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation. Returns the updated project record.
     * Add followers to a project
     */
    async addFollowersForProjectRaw(requestParameters: AddFollowersForProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling addFollowersForProject().'
            );
        }

        if (requestParameters['addFollowersForProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'addFollowersForProjectRequest',
                'Required parameter "addFollowersForProjectRequest" was null or undefined when calling addFollowersForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/addFollowers`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddFollowersForProjectRequestToJSON(requestParameters['addFollowersForProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation. Returns the updated project record.
     * Add followers to a project
     */
    async addFollowersForProject(requestParameters: AddFollowersForProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.addFollowersForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user\'s default notification settings (i.e., in the \"Notifications\" tab of \"My Profile Settings\") will override this endpoint\'s default behavior of setting \"Tasks added\" notifications to `false`. Returns the updated project record.
     * Add users to a project
     */
    async addMembersForProjectRaw(requestParameters: AddMembersForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling addMembersForProject().'
            );
        }

        if (requestParameters['addMembersForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'addMembersForPortfolioRequest',
                'Required parameter "addMembersForPortfolioRequest" was null or undefined when calling addMembersForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/addMembers`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddMembersForPortfolioRequestToJSON(requestParameters['addMembersForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user\'s default notification settings (i.e., in the \"Notifications\" tab of \"My Profile Settings\") will override this endpoint\'s default behavior of setting \"Tasks added\" notifications to `false`. Returns the updated project record.
     * Add users to a project
     */
    async addMembersForProject(requestParameters: AddMembersForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.addMembersForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Create a new project in a workspace or team.  Every project is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the `workspace` parameter regardless of whether or not it is an organization.  If the workspace for your project is an organization, you must also supply a `team` to share the project with.  Returns the full record of the newly created project.
     * Create a project
     */
    async createProjectRaw(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['createProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'createProjectRequest',
                'Required parameter "createProjectRequest" was null or undefined when calling createProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:write"]);
        }


        let urlPath = `/projects`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters['createProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Create a new project in a workspace or team.  Every project is required to be created in a specific workspace or organization, and this cannot be changed once set. Note that you can use the `workspace` parameter regardless of whether or not it is an organization.  If the workspace for your project is an organization, you must also supply a `team` to share the project with.  Returns the full record of the newly created project.
     * Create a project
     */
    async createProject(requestParameters: CreateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Creates a project shared with the given team.  Returns the full record of the newly created project.
     * Create a project in a team
     */
    async createProjectForTeamRaw(requestParameters: CreateProjectForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling createProjectForTeam().'
            );
        }

        if (requestParameters['createProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'createProjectRequest',
                'Required parameter "createProjectRequest" was null or undefined when calling createProjectForTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:write"]);
        }


        let urlPath = `/teams/{team_gid}/projects`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters['createProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Creates a project shared with the given team.  Returns the full record of the newly created project.
     * Create a project in a team
     */
    async createProjectForTeam(requestParameters: CreateProjectForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.createProjectForTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Creates a project in the workspace.  If the workspace for your project is an organization, you must also supply a team to share the project with.  Returns the full record of the newly created project.
     * Create a project in a workspace
     */
    async createProjectForWorkspaceRaw(requestParameters: CreateProjectForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling createProjectForWorkspace().'
            );
        }

        if (requestParameters['createProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'createProjectRequest',
                'Required parameter "createProjectRequest" was null or undefined when calling createProjectForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:write"]);
        }


        let urlPath = `/workspaces/{workspace_gid}/projects`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters['createProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Creates a project in the workspace.  If the workspace for your project is an organization, you must also supply a team to share the project with.  Returns the full record of the newly created project.
     * Create a project in a workspace
     */
    async createProjectForWorkspace(requestParameters: CreateProjectForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.createProjectForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:delete</code>  A specific, existing project can be deleted by making a DELETE request on the URL for that project.  Returns an empty data record.
     * Delete a project
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling deleteProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:delete"]);
        }


        let urlPath = `/projects/{project_gid}`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:delete</code>  A specific, existing project can be deleted by making a DELETE request on the URL for that project.  Returns an empty data record.
     * Delete a project
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Creates and returns a job that will asynchronously handle the duplication.
     * Duplicate a project
     */
    async duplicateProjectRaw(requestParameters: DuplicateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetJob200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling duplicateProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:write"]);
        }


        let urlPath = `/projects/{project_gid}/duplicate`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DuplicateProjectRequestToJSON(requestParameters['duplicateProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJob200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Creates and returns a job that will asynchronously handle the duplication.
     * Duplicate a project
     */
    async duplicateProject(requestParameters: DuplicateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetJob200Response> {
        const response = await this.duplicateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>custom_field_settings</code></td>     <td><code>custom_fields:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Returns the complete project record for a single project.
     * Get a project
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling getProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:read"]);
        }


        let urlPath = `/projects/{project_gid}`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>custom_field_settings</code></td>     <td><code>custom_fields:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Returns the complete project record for a single project.
     * Get a project
     */
    async getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.getProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. *Note: This endpoint may timeout for large domains. Try filtering by team!*
     * Get multiple projects
     */
    async getProjectsRaw(requestParameters: GetProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetItemsForPortfolio200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['team'] != null) {
            queryParameters['team'] = requestParameters['team'];
        }

        if (requestParameters['archived'] != null) {
            queryParameters['archived'] = requestParameters['archived'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:read"]);
        }


        let urlPath = `/projects`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetItemsForPortfolio200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned. *Note: This endpoint may timeout for large domains. Try filtering by team!*
     * Get multiple projects
     */
    async getProjects(requestParameters: GetProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetItemsForPortfolio200Response> {
        const response = await this.getProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  Returns a compact representation of all of the projects the task is in.
     * Get projects a task is in
     */
    async getProjectsForTaskRaw(requestParameters: GetProjectsForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetItemsForPortfolio200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling getProjectsForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:read"]);
        }


        let urlPath = `/tasks/{task_gid}/projects`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetItemsForPortfolio200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  Returns a compact representation of all of the projects the task is in.
     * Get projects a task is in
     */
    async getProjectsForTask(requestParameters: GetProjectsForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetItemsForPortfolio200Response> {
        const response = await this.getProjectsForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  Returns the compact project records for all projects in the team.
     * Get a team\'s projects
     */
    async getProjectsForTeamRaw(requestParameters: GetProjectsForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetItemsForPortfolio200Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling getProjectsForTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['archived'] != null) {
            queryParameters['archived'] = requestParameters['archived'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:read"]);
        }


        let urlPath = `/teams/{team_gid}/projects`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetItemsForPortfolio200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  Returns the compact project records for all projects in the team.
     * Get a team\'s projects
     */
    async getProjectsForTeam(requestParameters: GetProjectsForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetItemsForPortfolio200Response> {
        const response = await this.getProjectsForTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  Returns the compact project records for all projects in the workspace. *Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*
     * Get all projects in a workspace
     */
    async getProjectsForWorkspaceRaw(requestParameters: GetProjectsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetItemsForPortfolio200Response>> {
        if (requestParameters['workspaceGid'] == null) {
            throw new runtime.RequiredError(
                'workspaceGid',
                'Required parameter "workspaceGid" was null or undefined when calling getProjectsForWorkspace().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['archived'] != null) {
            queryParameters['archived'] = requestParameters['archived'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:read"]);
        }


        let urlPath = `/workspaces/{workspace_gid}/projects`;
        urlPath = urlPath.replace(`{${"workspace_gid"}}`, encodeURIComponent(String(requestParameters['workspaceGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetItemsForPortfolio200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  Returns the compact project records for all projects in the workspace. *Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*
     * Get all projects in a workspace
     */
    async getProjectsForWorkspace(requestParameters: GetProjectsForWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetItemsForPortfolio200Response> {
        const response = await this.getProjectsForWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>custom_field_settings</code></td>     <td><code>custom_fields:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/inputoutput-options) using `opt_fields` to get any information from this endpoint.  This endpoint has an additional [rate limit](/docs/rate-limits) and each field counts especially high against our [cost limits](/docs/rate-limits#cost-limits).  Milestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.
     * Get task count of a project
     */
    async getTaskCountsForProjectRaw(requestParameters: GetTaskCountsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskCountsForProject200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling getTaskCountsForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:read"]);
        }


        let urlPath = `/projects/{project_gid}/task_counts`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskCountsForProject200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>custom_field_settings</code></td>     <td><code>custom_fields:read</code></td>   </tr>   <tr>     <td><code>custom_fields</code></td>     <td><code>custom_fields:read</code></td>   </tr> </table>  Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/inputoutput-options) using `opt_fields` to get any information from this endpoint.  This endpoint has an additional [rate limit](/docs/rate-limits) and each field counts especially high against our [cost limits](/docs/rate-limits#cost-limits).  Milestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.
     * Get task count of a project
     */
    async getTaskCountsForProject(requestParameters: GetTaskCountsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskCountsForProject200Response> {
        const response = await this.getTaskCountsForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates and returns a job that will asynchronously handle the project template creation.
     * Create a project template from a project
     */
    async projectSaveAsTemplateRaw(requestParameters: ProjectSaveAsTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetJob200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling projectSaveAsTemplate().'
            );
        }

        if (requestParameters['projectSaveAsTemplateRequest'] == null) {
            throw new runtime.RequiredError(
                'projectSaveAsTemplateRequest',
                'Required parameter "projectSaveAsTemplateRequest" was null or undefined when calling projectSaveAsTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/saveAsTemplate`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectSaveAsTemplateRequestToJSON(requestParameters['projectSaveAsTemplateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJob200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates and returns a job that will asynchronously handle the project template creation.
     * Create a project template from a project
     */
    async projectSaveAsTemplate(requestParameters: ProjectSaveAsTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetJob200Response> {
        const response = await this.projectSaveAsTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Removes a custom field setting from a project.
     * Remove a custom field from a project
     */
    async removeCustomFieldSettingForProjectRaw(requestParameters: RemoveCustomFieldSettingForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling removeCustomFieldSettingForProject().'
            );
        }

        if (requestParameters['removeCustomFieldSettingForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'removeCustomFieldSettingForPortfolioRequest',
                'Required parameter "removeCustomFieldSettingForPortfolioRequest" was null or undefined when calling removeCustomFieldSettingForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:write"]);
        }


        let urlPath = `/projects/{project_gid}/removeCustomFieldSetting`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveCustomFieldSettingForPortfolioRequestToJSON(requestParameters['removeCustomFieldSettingForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Removes a custom field setting from a project.
     * Remove a custom field from a project
     */
    async removeCustomFieldSettingForProject(requestParameters: RemoveCustomFieldSettingForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeCustomFieldSettingForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the specified list of users from following the project, this will not affect project membership status. Returns the updated project record.
     * Remove followers from a project
     */
    async removeFollowersForProjectRaw(requestParameters: RemoveFollowersForProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling removeFollowersForProject().'
            );
        }

        if (requestParameters['removeFollowersForProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'removeFollowersForProjectRequest',
                'Required parameter "removeFollowersForProjectRequest" was null or undefined when calling removeFollowersForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/removeFollowers`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveFollowersForProjectRequestToJSON(requestParameters['removeFollowersForProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * Removes the specified list of users from following the project, this will not affect project membership status. Returns the updated project record.
     * Remove followers from a project
     */
    async removeFollowersForProject(requestParameters: RemoveFollowersForProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.removeFollowersForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes the specified list of users from members of the project. Returns the updated project record.
     * Remove users from a project
     */
    async removeMembersForProjectRaw(requestParameters: RemoveMembersForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling removeMembersForProject().'
            );
        }

        if (requestParameters['removeMembersForPortfolioRequest'] == null) {
            throw new runtime.RequiredError(
                'removeMembersForPortfolioRequest',
                'Required parameter "removeMembersForPortfolioRequest" was null or undefined when calling removeMembersForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/removeMembers`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveMembersForPortfolioRequestToJSON(requestParameters['removeMembersForPortfolioRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * Removes the specified list of users from members of the project. Returns the updated project record.
     * Remove users from a project
     */
    async removeMembersForProject(requestParameters: RemoveMembersForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.removeMembersForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  A specific, existing project can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated project record.
     * Update a project
     */
    async updateProjectRaw(requestParameters: UpdateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProject201Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling updateProject().'
            );
        }

        if (requestParameters['updateProjectRequest'] == null) {
            throw new runtime.RequiredError(
                'updateProjectRequest',
                'Required parameter "updateProjectRequest" was null or undefined when calling updateProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:write"]);
        }


        let urlPath = `/projects/{project_gid}`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectRequestToJSON(requestParameters['updateProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProject201ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  A specific, existing project can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated project record.
     * Update a project
     */
    async updateProject(requestParameters: UpdateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProject201Response> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddCustomFieldSettingForProjectOptFieldsEnum = {
    CustomField: 'custom_field',
    CustomFieldAsanaCreatedField: 'custom_field.asana_created_field',
    CustomFieldCreatedBy: 'custom_field.created_by',
    CustomFieldCreatedByName: 'custom_field.created_by.name',
    CustomFieldCurrencyCode: 'custom_field.currency_code',
    CustomFieldCustomLabel: 'custom_field.custom_label',
    CustomFieldCustomLabelPosition: 'custom_field.custom_label_position',
    CustomFieldDateValue: 'custom_field.date_value',
    CustomFieldDateValueDate: 'custom_field.date_value.date',
    CustomFieldDateValueDateTime: 'custom_field.date_value.date_time',
    CustomFieldDefaultAccessLevel: 'custom_field.default_access_level',
    CustomFieldDescription: 'custom_field.description',
    CustomFieldDisplayValue: 'custom_field.display_value',
    CustomFieldEnabled: 'custom_field.enabled',
    CustomFieldEnumOptions: 'custom_field.enum_options',
    CustomFieldEnumOptionsColor: 'custom_field.enum_options.color',
    CustomFieldEnumOptionsEnabled: 'custom_field.enum_options.enabled',
    CustomFieldEnumOptionsName: 'custom_field.enum_options.name',
    CustomFieldEnumValue: 'custom_field.enum_value',
    CustomFieldEnumValueColor: 'custom_field.enum_value.color',
    CustomFieldEnumValueEnabled: 'custom_field.enum_value.enabled',
    CustomFieldEnumValueName: 'custom_field.enum_value.name',
    CustomFieldFormat: 'custom_field.format',
    CustomFieldHasNotificationsEnabled: 'custom_field.has_notifications_enabled',
    CustomFieldIdPrefix: 'custom_field.id_prefix',
    CustomFieldIsFormulaField: 'custom_field.is_formula_field',
    CustomFieldIsGlobalToWorkspace: 'custom_field.is_global_to_workspace',
    CustomFieldIsValueReadOnly: 'custom_field.is_value_read_only',
    CustomFieldMultiEnumValues: 'custom_field.multi_enum_values',
    CustomFieldMultiEnumValuesColor: 'custom_field.multi_enum_values.color',
    CustomFieldMultiEnumValuesEnabled: 'custom_field.multi_enum_values.enabled',
    CustomFieldMultiEnumValuesName: 'custom_field.multi_enum_values.name',
    CustomFieldName: 'custom_field.name',
    CustomFieldNumberValue: 'custom_field.number_value',
    CustomFieldPeopleValue: 'custom_field.people_value',
    CustomFieldPeopleValueName: 'custom_field.people_value.name',
    CustomFieldPrecision: 'custom_field.precision',
    CustomFieldPrivacySetting: 'custom_field.privacy_setting',
    CustomFieldRepresentationType: 'custom_field.representation_type',
    CustomFieldResourceSubtype: 'custom_field.resource_subtype',
    CustomFieldTextValue: 'custom_field.text_value',
    CustomFieldType: 'custom_field.type',
    IsImportant: 'is_important',
    Parent: 'parent',
    ParentName: 'parent.name',
    Project: 'project',
    ProjectName: 'project.name'
} as const;
export type AddCustomFieldSettingForProjectOptFieldsEnum = typeof AddCustomFieldSettingForProjectOptFieldsEnum[keyof typeof AddCustomFieldSettingForProjectOptFieldsEnum];
/**
 * @export
 */
export const AddFollowersForProjectOperationOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type AddFollowersForProjectOperationOptFieldsEnum = typeof AddFollowersForProjectOperationOptFieldsEnum[keyof typeof AddFollowersForProjectOperationOptFieldsEnum];
/**
 * @export
 */
export const AddMembersForProjectOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type AddMembersForProjectOptFieldsEnum = typeof AddMembersForProjectOptFieldsEnum[keyof typeof AddMembersForProjectOptFieldsEnum];
/**
 * @export
 */
export const CreateProjectOperationOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type CreateProjectOperationOptFieldsEnum = typeof CreateProjectOperationOptFieldsEnum[keyof typeof CreateProjectOperationOptFieldsEnum];
/**
 * @export
 */
export const CreateProjectForTeamOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type CreateProjectForTeamOptFieldsEnum = typeof CreateProjectForTeamOptFieldsEnum[keyof typeof CreateProjectForTeamOptFieldsEnum];
/**
 * @export
 */
export const CreateProjectForWorkspaceOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type CreateProjectForWorkspaceOptFieldsEnum = typeof CreateProjectForWorkspaceOptFieldsEnum[keyof typeof CreateProjectForWorkspaceOptFieldsEnum];
/**
 * @export
 */
export const DuplicateProjectOperationOptFieldsEnum = {
    NewGraphExport: 'new_graph_export',
    NewGraphExportCompletedAt: 'new_graph_export.completed_at',
    NewGraphExportCreatedAt: 'new_graph_export.created_at',
    NewGraphExportDownloadUrl: 'new_graph_export.download_url',
    NewProject: 'new_project',
    NewProjectName: 'new_project.name',
    NewProjectTemplate: 'new_project_template',
    NewProjectTemplateName: 'new_project_template.name',
    NewResourceExport: 'new_resource_export',
    NewResourceExportCompletedAt: 'new_resource_export.completed_at',
    NewResourceExportCreatedAt: 'new_resource_export.created_at',
    NewResourceExportDownloadUrl: 'new_resource_export.download_url',
    NewTask: 'new_task',
    NewTaskCreatedBy: 'new_task.created_by',
    NewTaskName: 'new_task.name',
    NewTaskResourceSubtype: 'new_task.resource_subtype',
    NewTaskTemplate: 'new_task_template',
    NewTaskTemplateName: 'new_task_template.name',
    ResourceSubtype: 'resource_subtype',
    Status: 'status'
} as const;
export type DuplicateProjectOperationOptFieldsEnum = typeof DuplicateProjectOperationOptFieldsEnum[keyof typeof DuplicateProjectOperationOptFieldsEnum];
/**
 * @export
 */
export const GetProjectOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetProjectOptFieldsEnum = typeof GetProjectOptFieldsEnum[keyof typeof GetProjectOptFieldsEnum];
/**
 * @export
 */
export const GetProjectsOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Offset: 'offset',
    Owner: 'owner',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetProjectsOptFieldsEnum = typeof GetProjectsOptFieldsEnum[keyof typeof GetProjectsOptFieldsEnum];
/**
 * @export
 */
export const GetProjectsForTaskOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Offset: 'offset',
    Owner: 'owner',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetProjectsForTaskOptFieldsEnum = typeof GetProjectsForTaskOptFieldsEnum[keyof typeof GetProjectsForTaskOptFieldsEnum];
/**
 * @export
 */
export const GetProjectsForTeamOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Offset: 'offset',
    Owner: 'owner',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetProjectsForTeamOptFieldsEnum = typeof GetProjectsForTeamOptFieldsEnum[keyof typeof GetProjectsForTeamOptFieldsEnum];
/**
 * @export
 */
export const GetProjectsForWorkspaceOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Offset: 'offset',
    Owner: 'owner',
    Path: 'path',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type GetProjectsForWorkspaceOptFieldsEnum = typeof GetProjectsForWorkspaceOptFieldsEnum[keyof typeof GetProjectsForWorkspaceOptFieldsEnum];
/**
 * @export
 */
export const GetTaskCountsForProjectOptFieldsEnum = {
    NumCompletedMilestones: 'num_completed_milestones',
    NumCompletedTasks: 'num_completed_tasks',
    NumIncompleteMilestones: 'num_incomplete_milestones',
    NumIncompleteTasks: 'num_incomplete_tasks',
    NumMilestones: 'num_milestones',
    NumTasks: 'num_tasks'
} as const;
export type GetTaskCountsForProjectOptFieldsEnum = typeof GetTaskCountsForProjectOptFieldsEnum[keyof typeof GetTaskCountsForProjectOptFieldsEnum];
/**
 * @export
 */
export const ProjectSaveAsTemplateOperationOptFieldsEnum = {
    NewGraphExport: 'new_graph_export',
    NewGraphExportCompletedAt: 'new_graph_export.completed_at',
    NewGraphExportCreatedAt: 'new_graph_export.created_at',
    NewGraphExportDownloadUrl: 'new_graph_export.download_url',
    NewProject: 'new_project',
    NewProjectName: 'new_project.name',
    NewProjectTemplate: 'new_project_template',
    NewProjectTemplateName: 'new_project_template.name',
    NewResourceExport: 'new_resource_export',
    NewResourceExportCompletedAt: 'new_resource_export.completed_at',
    NewResourceExportCreatedAt: 'new_resource_export.created_at',
    NewResourceExportDownloadUrl: 'new_resource_export.download_url',
    NewTask: 'new_task',
    NewTaskCreatedBy: 'new_task.created_by',
    NewTaskName: 'new_task.name',
    NewTaskResourceSubtype: 'new_task.resource_subtype',
    NewTaskTemplate: 'new_task_template',
    NewTaskTemplateName: 'new_task_template.name',
    ResourceSubtype: 'resource_subtype',
    Status: 'status'
} as const;
export type ProjectSaveAsTemplateOperationOptFieldsEnum = typeof ProjectSaveAsTemplateOperationOptFieldsEnum[keyof typeof ProjectSaveAsTemplateOperationOptFieldsEnum];
/**
 * @export
 */
export const RemoveFollowersForProjectOperationOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type RemoveFollowersForProjectOperationOptFieldsEnum = typeof RemoveFollowersForProjectOperationOptFieldsEnum[keyof typeof RemoveFollowersForProjectOperationOptFieldsEnum];
/**
 * @export
 */
export const RemoveMembersForProjectOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type RemoveMembersForProjectOptFieldsEnum = typeof RemoveMembersForProjectOptFieldsEnum[keyof typeof RemoveMembersForProjectOptFieldsEnum];
/**
 * @export
 */
export const UpdateProjectOperationOptFieldsEnum = {
    Archived: 'archived',
    Color: 'color',
    Completed: 'completed',
    CompletedAt: 'completed_at',
    CompletedBy: 'completed_by',
    CompletedByName: 'completed_by.name',
    CreatedAt: 'created_at',
    CreatedFromTemplate: 'created_from_template',
    CreatedFromTemplateName: 'created_from_template.name',
    CurrentStatus: 'current_status',
    CurrentStatusAuthor: 'current_status.author',
    CurrentStatusAuthorName: 'current_status.author.name',
    CurrentStatusColor: 'current_status.color',
    CurrentStatusCreatedAt: 'current_status.created_at',
    CurrentStatusCreatedBy: 'current_status.created_by',
    CurrentStatusCreatedByName: 'current_status.created_by.name',
    CurrentStatusHtmlText: 'current_status.html_text',
    CurrentStatusModifiedAt: 'current_status.modified_at',
    CurrentStatusText: 'current_status.text',
    CurrentStatusTitle: 'current_status.title',
    CurrentStatusUpdate: 'current_status_update',
    CurrentStatusUpdateResourceSubtype: 'current_status_update.resource_subtype',
    CurrentStatusUpdateTitle: 'current_status_update.title',
    CustomFieldSettings: 'custom_field_settings',
    CustomFieldSettingsCustomField: 'custom_field_settings.custom_field',
    CustomFieldSettingsCustomFieldAsanaCreatedField: 'custom_field_settings.custom_field.asana_created_field',
    CustomFieldSettingsCustomFieldCreatedBy: 'custom_field_settings.custom_field.created_by',
    CustomFieldSettingsCustomFieldCreatedByName: 'custom_field_settings.custom_field.created_by.name',
    CustomFieldSettingsCustomFieldCurrencyCode: 'custom_field_settings.custom_field.currency_code',
    CustomFieldSettingsCustomFieldCustomLabel: 'custom_field_settings.custom_field.custom_label',
    CustomFieldSettingsCustomFieldCustomLabelPosition: 'custom_field_settings.custom_field.custom_label_position',
    CustomFieldSettingsCustomFieldDateValue: 'custom_field_settings.custom_field.date_value',
    CustomFieldSettingsCustomFieldDateValueDate: 'custom_field_settings.custom_field.date_value.date',
    CustomFieldSettingsCustomFieldDateValueDateTime: 'custom_field_settings.custom_field.date_value.date_time',
    CustomFieldSettingsCustomFieldDefaultAccessLevel: 'custom_field_settings.custom_field.default_access_level',
    CustomFieldSettingsCustomFieldDescription: 'custom_field_settings.custom_field.description',
    CustomFieldSettingsCustomFieldDisplayValue: 'custom_field_settings.custom_field.display_value',
    CustomFieldSettingsCustomFieldEnabled: 'custom_field_settings.custom_field.enabled',
    CustomFieldSettingsCustomFieldEnumOptions: 'custom_field_settings.custom_field.enum_options',
    CustomFieldSettingsCustomFieldEnumOptionsColor: 'custom_field_settings.custom_field.enum_options.color',
    CustomFieldSettingsCustomFieldEnumOptionsEnabled: 'custom_field_settings.custom_field.enum_options.enabled',
    CustomFieldSettingsCustomFieldEnumOptionsName: 'custom_field_settings.custom_field.enum_options.name',
    CustomFieldSettingsCustomFieldEnumValue: 'custom_field_settings.custom_field.enum_value',
    CustomFieldSettingsCustomFieldEnumValueColor: 'custom_field_settings.custom_field.enum_value.color',
    CustomFieldSettingsCustomFieldEnumValueEnabled: 'custom_field_settings.custom_field.enum_value.enabled',
    CustomFieldSettingsCustomFieldEnumValueName: 'custom_field_settings.custom_field.enum_value.name',
    CustomFieldSettingsCustomFieldFormat: 'custom_field_settings.custom_field.format',
    CustomFieldSettingsCustomFieldHasNotificationsEnabled: 'custom_field_settings.custom_field.has_notifications_enabled',
    CustomFieldSettingsCustomFieldIdPrefix: 'custom_field_settings.custom_field.id_prefix',
    CustomFieldSettingsCustomFieldIsFormulaField: 'custom_field_settings.custom_field.is_formula_field',
    CustomFieldSettingsCustomFieldIsGlobalToWorkspace: 'custom_field_settings.custom_field.is_global_to_workspace',
    CustomFieldSettingsCustomFieldIsValueReadOnly: 'custom_field_settings.custom_field.is_value_read_only',
    CustomFieldSettingsCustomFieldMultiEnumValues: 'custom_field_settings.custom_field.multi_enum_values',
    CustomFieldSettingsCustomFieldMultiEnumValuesColor: 'custom_field_settings.custom_field.multi_enum_values.color',
    CustomFieldSettingsCustomFieldMultiEnumValuesEnabled: 'custom_field_settings.custom_field.multi_enum_values.enabled',
    CustomFieldSettingsCustomFieldMultiEnumValuesName: 'custom_field_settings.custom_field.multi_enum_values.name',
    CustomFieldSettingsCustomFieldName: 'custom_field_settings.custom_field.name',
    CustomFieldSettingsCustomFieldNumberValue: 'custom_field_settings.custom_field.number_value',
    CustomFieldSettingsCustomFieldPeopleValue: 'custom_field_settings.custom_field.people_value',
    CustomFieldSettingsCustomFieldPeopleValueName: 'custom_field_settings.custom_field.people_value.name',
    CustomFieldSettingsCustomFieldPrecision: 'custom_field_settings.custom_field.precision',
    CustomFieldSettingsCustomFieldPrivacySetting: 'custom_field_settings.custom_field.privacy_setting',
    CustomFieldSettingsCustomFieldRepresentationType: 'custom_field_settings.custom_field.representation_type',
    CustomFieldSettingsCustomFieldResourceSubtype: 'custom_field_settings.custom_field.resource_subtype',
    CustomFieldSettingsCustomFieldTextValue: 'custom_field_settings.custom_field.text_value',
    CustomFieldSettingsCustomFieldType: 'custom_field_settings.custom_field.type',
    CustomFieldSettingsIsImportant: 'custom_field_settings.is_important',
    CustomFieldSettingsParent: 'custom_field_settings.parent',
    CustomFieldSettingsParentName: 'custom_field_settings.parent.name',
    CustomFieldSettingsProject: 'custom_field_settings.project',
    CustomFieldSettingsProjectName: 'custom_field_settings.project.name',
    CustomFields: 'custom_fields',
    CustomFieldsDateValue: 'custom_fields.date_value',
    CustomFieldsDateValueDate: 'custom_fields.date_value.date',
    CustomFieldsDateValueDateTime: 'custom_fields.date_value.date_time',
    CustomFieldsDisplayValue: 'custom_fields.display_value',
    CustomFieldsEnabled: 'custom_fields.enabled',
    CustomFieldsEnumOptions: 'custom_fields.enum_options',
    CustomFieldsEnumOptionsColor: 'custom_fields.enum_options.color',
    CustomFieldsEnumOptionsEnabled: 'custom_fields.enum_options.enabled',
    CustomFieldsEnumOptionsName: 'custom_fields.enum_options.name',
    CustomFieldsEnumValue: 'custom_fields.enum_value',
    CustomFieldsEnumValueColor: 'custom_fields.enum_value.color',
    CustomFieldsEnumValueEnabled: 'custom_fields.enum_value.enabled',
    CustomFieldsEnumValueName: 'custom_fields.enum_value.name',
    CustomFieldsIdPrefix: 'custom_fields.id_prefix',
    CustomFieldsIsFormulaField: 'custom_fields.is_formula_field',
    CustomFieldsMultiEnumValues: 'custom_fields.multi_enum_values',
    CustomFieldsMultiEnumValuesColor: 'custom_fields.multi_enum_values.color',
    CustomFieldsMultiEnumValuesEnabled: 'custom_fields.multi_enum_values.enabled',
    CustomFieldsMultiEnumValuesName: 'custom_fields.multi_enum_values.name',
    CustomFieldsName: 'custom_fields.name',
    CustomFieldsNumberValue: 'custom_fields.number_value',
    CustomFieldsRepresentationType: 'custom_fields.representation_type',
    CustomFieldsTextValue: 'custom_fields.text_value',
    CustomFieldsType: 'custom_fields.type',
    DefaultAccessLevel: 'default_access_level',
    DefaultView: 'default_view',
    DueDate: 'due_date',
    DueOn: 'due_on',
    Followers: 'followers',
    FollowersName: 'followers.name',
    HtmlNotes: 'html_notes',
    Icon: 'icon',
    Members: 'members',
    MembersName: 'members.name',
    MinimumAccessLevelForCustomization: 'minimum_access_level_for_customization',
    MinimumAccessLevelForSharing: 'minimum_access_level_for_sharing',
    ModifiedAt: 'modified_at',
    Name: 'name',
    Notes: 'notes',
    Owner: 'owner',
    PermalinkUrl: 'permalink_url',
    PrivacySetting: 'privacy_setting',
    ProjectBrief: 'project_brief',
    Public: 'public',
    StartOn: 'start_on',
    Team: 'team',
    TeamName: 'team.name',
    Workspace: 'workspace',
    WorkspaceName: 'workspace.name'
} as const;
export type UpdateProjectOperationOptFieldsEnum = typeof UpdateProjectOperationOptFieldsEnum[keyof typeof UpdateProjectOperationOptFieldsEnum];
