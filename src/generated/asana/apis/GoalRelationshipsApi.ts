/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  AddSupportingRelationshipRequest,
  ApproveAccessRequest200Response,
  ErrorResponse,
  GetGoalRelationship200Response,
  GetGoalRelationships200Response,
  RemoveSupportingRelationshipRequest,
  UpdateGoalRelationshipRequest,
} from '../models/index.js';
import {
    AddSupportingRelationshipRequestFromJSON,
    AddSupportingRelationshipRequestToJSON,
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetGoalRelationship200ResponseFromJSON,
    GetGoalRelationship200ResponseToJSON,
    GetGoalRelationships200ResponseFromJSON,
    GetGoalRelationships200ResponseToJSON,
    RemoveSupportingRelationshipRequestFromJSON,
    RemoveSupportingRelationshipRequestToJSON,
    UpdateGoalRelationshipRequestFromJSON,
    UpdateGoalRelationshipRequestToJSON,
} from '../models/index.js';

export interface AddSupportingRelationshipOperationRequest {
    goalGid: string;
    addSupportingRelationshipRequest: AddSupportingRelationshipRequest;
    optPretty?: boolean;
    optFields?: Array<AddSupportingRelationshipOperationOptFieldsEnum>;
}

export interface GetGoalRelationshipRequest {
    goalRelationshipGid: string;
    optPretty?: boolean;
    optFields?: Array<GetGoalRelationshipOptFieldsEnum>;
}

export interface GetGoalRelationshipsRequest {
    supportedGoal: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    resourceSubtype?: string;
    optFields?: Array<GetGoalRelationshipsOptFieldsEnum>;
}

export interface RemoveSupportingRelationshipOperationRequest {
    goalGid: string;
    removeSupportingRelationshipRequest: RemoveSupportingRelationshipRequest;
    optPretty?: boolean;
}

export interface UpdateGoalRelationshipOperationRequest {
    goalRelationshipGid: string;
    updateGoalRelationshipRequest: UpdateGoalRelationshipRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateGoalRelationshipOperationOptFieldsEnum>;
}

/**
 * 
 */
export class GoalRelationshipsApi extends runtime.BaseAPI {

    /**
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     * Add a supporting goal relationship
     */
    async addSupportingRelationshipRaw(requestParameters: AddSupportingRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoalRelationship200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling addSupportingRelationship().'
            );
        }

        if (requestParameters['addSupportingRelationshipRequest'] == null) {
            throw new runtime.RequiredError(
                'addSupportingRelationshipRequest',
                'Required parameter "addSupportingRelationshipRequest" was null or undefined when calling addSupportingRelationship().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals/{goal_gid}/addSupportingRelationship`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddSupportingRelationshipRequestToJSON(requestParameters['addSupportingRelationshipRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoalRelationship200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     * Add a supporting goal relationship
     */
    async addSupportingRelationship(requestParameters: AddSupportingRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoalRelationship200Response> {
        const response = await this.addSupportingRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the complete updated goal relationship record for a single goal relationship.
     * Get a goal relationship
     */
    async getGoalRelationshipRaw(requestParameters: GetGoalRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoalRelationship200Response>> {
        if (requestParameters['goalRelationshipGid'] == null) {
            throw new runtime.RequiredError(
                'goalRelationshipGid',
                'Required parameter "goalRelationshipGid" was null or undefined when calling getGoalRelationship().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goal_relationships/{goal_relationship_gid}`;
        urlPath = urlPath.replace(`{${"goal_relationship_gid"}}`, encodeURIComponent(String(requestParameters['goalRelationshipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoalRelationship200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete updated goal relationship record for a single goal relationship.
     * Get a goal relationship
     */
    async getGoalRelationship(requestParameters: GetGoalRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoalRelationship200Response> {
        const response = await this.getGoalRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns compact goal relationship records.
     * Get goal relationships
     */
    async getGoalRelationshipsRaw(requestParameters: GetGoalRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoalRelationships200Response>> {
        if (requestParameters['supportedGoal'] == null) {
            throw new runtime.RequiredError(
                'supportedGoal',
                'Required parameter "supportedGoal" was null or undefined when calling getGoalRelationships().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['supportedGoal'] != null) {
            queryParameters['supported_goal'] = requestParameters['supportedGoal'];
        }

        if (requestParameters['resourceSubtype'] != null) {
            queryParameters['resource_subtype'] = requestParameters['resourceSubtype'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goal_relationships`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoalRelationships200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns compact goal relationship records.
     * Get goal relationships
     */
    async getGoalRelationships(requestParameters: GetGoalRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoalRelationships200Response> {
        const response = await this.getGoalRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a goal relationship for a given parent goal.
     * Removes a supporting goal relationship
     */
    async removeSupportingRelationshipRaw(requestParameters: RemoveSupportingRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['goalGid'] == null) {
            throw new runtime.RequiredError(
                'goalGid',
                'Required parameter "goalGid" was null or undefined when calling removeSupportingRelationship().'
            );
        }

        if (requestParameters['removeSupportingRelationshipRequest'] == null) {
            throw new runtime.RequiredError(
                'removeSupportingRelationshipRequest',
                'Required parameter "removeSupportingRelationshipRequest" was null or undefined when calling removeSupportingRelationship().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goals/{goal_gid}/removeSupportingRelationship`;
        urlPath = urlPath.replace(`{${"goal_gid"}}`, encodeURIComponent(String(requestParameters['goalGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RemoveSupportingRelationshipRequestToJSON(requestParameters['removeSupportingRelationshipRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Removes a goal relationship for a given parent goal.
     * Removes a supporting goal relationship
     */
    async removeSupportingRelationship(requestParameters: RemoveSupportingRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.removeSupportingRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     * Update a goal relationship
     */
    async updateGoalRelationshipRaw(requestParameters: UpdateGoalRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGoalRelationship200Response>> {
        if (requestParameters['goalRelationshipGid'] == null) {
            throw new runtime.RequiredError(
                'goalRelationshipGid',
                'Required parameter "goalRelationshipGid" was null or undefined when calling updateGoalRelationship().'
            );
        }

        if (requestParameters['updateGoalRelationshipRequest'] == null) {
            throw new runtime.RequiredError(
                'updateGoalRelationshipRequest',
                'Required parameter "updateGoalRelationshipRequest" was null or undefined when calling updateGoalRelationship().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/goal_relationships/{goal_relationship_gid}`;
        urlPath = urlPath.replace(`{${"goal_relationship_gid"}}`, encodeURIComponent(String(requestParameters['goalRelationshipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGoalRelationshipRequestToJSON(requestParameters['updateGoalRelationshipRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGoalRelationship200ResponseFromJSON(jsonValue));
    }

    /**
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     * Update a goal relationship
     */
    async updateGoalRelationship(requestParameters: UpdateGoalRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGoalRelationship200Response> {
        const response = await this.updateGoalRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AddSupportingRelationshipOperationOptFieldsEnum = {
    ContributionWeight: 'contribution_weight',
    ResourceSubtype: 'resource_subtype',
    SupportedGoal: 'supported_goal',
    SupportedGoalName: 'supported_goal.name',
    SupportedGoalOwner: 'supported_goal.owner',
    SupportedGoalOwnerName: 'supported_goal.owner.name',
    SupportingResource: 'supporting_resource',
    SupportingResourceName: 'supporting_resource.name'
} as const;
export type AddSupportingRelationshipOperationOptFieldsEnum = typeof AddSupportingRelationshipOperationOptFieldsEnum[keyof typeof AddSupportingRelationshipOperationOptFieldsEnum];
/**
 * @export
 */
export const GetGoalRelationshipOptFieldsEnum = {
    ContributionWeight: 'contribution_weight',
    ResourceSubtype: 'resource_subtype',
    SupportedGoal: 'supported_goal',
    SupportedGoalName: 'supported_goal.name',
    SupportedGoalOwner: 'supported_goal.owner',
    SupportedGoalOwnerName: 'supported_goal.owner.name',
    SupportingResource: 'supporting_resource',
    SupportingResourceName: 'supporting_resource.name'
} as const;
export type GetGoalRelationshipOptFieldsEnum = typeof GetGoalRelationshipOptFieldsEnum[keyof typeof GetGoalRelationshipOptFieldsEnum];
/**
 * @export
 */
export const GetGoalRelationshipsOptFieldsEnum = {
    ContributionWeight: 'contribution_weight',
    Offset: 'offset',
    Path: 'path',
    ResourceSubtype: 'resource_subtype',
    SupportedGoal: 'supported_goal',
    SupportedGoalName: 'supported_goal.name',
    SupportedGoalOwner: 'supported_goal.owner',
    SupportedGoalOwnerName: 'supported_goal.owner.name',
    SupportingResource: 'supporting_resource',
    SupportingResourceName: 'supporting_resource.name',
    Uri: 'uri'
} as const;
export type GetGoalRelationshipsOptFieldsEnum = typeof GetGoalRelationshipsOptFieldsEnum[keyof typeof GetGoalRelationshipsOptFieldsEnum];
/**
 * @export
 */
export const UpdateGoalRelationshipOperationOptFieldsEnum = {
    ContributionWeight: 'contribution_weight',
    ResourceSubtype: 'resource_subtype',
    SupportedGoal: 'supported_goal',
    SupportedGoalName: 'supported_goal.name',
    SupportedGoalOwner: 'supported_goal.owner',
    SupportedGoalOwnerName: 'supported_goal.owner.name',
    SupportingResource: 'supporting_resource',
    SupportingResourceName: 'supporting_resource.name'
} as const;
export type UpdateGoalRelationshipOperationOptFieldsEnum = typeof UpdateGoalRelationshipOperationOptFieldsEnum[keyof typeof UpdateGoalRelationshipOperationOptFieldsEnum];
