/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetTimePeriod200Response,
  GetTimePeriods200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetTimePeriod200ResponseFromJSON,
    GetTimePeriod200ResponseToJSON,
    GetTimePeriods200ResponseFromJSON,
    GetTimePeriods200ResponseToJSON,
} from '../models/index.js';

export interface GetTimePeriodRequest {
    timePeriodGid: string;
    optPretty?: boolean;
    optFields?: Array<GetTimePeriodOptFieldsEnum>;
}

export interface GetTimePeriodsRequest {
    workspace: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    startOn?: Date;
    endOn?: Date;
    optFields?: Array<GetTimePeriodsOptFieldsEnum>;
}

/**
 * 
 */
export class TimePeriodsApi extends runtime.BaseAPI {

    /**
     * Returns the full record for a single time period.
     * Get a time period
     */
    async getTimePeriodRaw(requestParameters: GetTimePeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTimePeriod200Response>> {
        if (requestParameters['timePeriodGid'] == null) {
            throw new runtime.RequiredError(
                'timePeriodGid',
                'Required parameter "timePeriodGid" was null or undefined when calling getTimePeriod().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/time_periods/{time_period_gid}`;
        urlPath = urlPath.replace(`{${"time_period_gid"}}`, encodeURIComponent(String(requestParameters['timePeriodGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTimePeriod200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the full record for a single time period.
     * Get a time period
     */
    async getTimePeriod(requestParameters: GetTimePeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTimePeriod200Response> {
        const response = await this.getTimePeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns compact time period records.
     * Get time periods
     */
    async getTimePeriodsRaw(requestParameters: GetTimePeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTimePeriods200Response>> {
        if (requestParameters['workspace'] == null) {
            throw new runtime.RequiredError(
                'workspace',
                'Required parameter "workspace" was null or undefined when calling getTimePeriods().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['startOn'] != null) {
            queryParameters['start_on'] = (requestParameters['startOn'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['endOn'] != null) {
            queryParameters['end_on'] = (requestParameters['endOn'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/time_periods`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTimePeriods200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns compact time period records.
     * Get time periods
     */
    async getTimePeriods(requestParameters: GetTimePeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTimePeriods200Response> {
        const response = await this.getTimePeriodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetTimePeriodOptFieldsEnum = {
    DisplayName: 'display_name',
    EndOn: 'end_on',
    Parent: 'parent',
    ParentDisplayName: 'parent.display_name',
    ParentEndOn: 'parent.end_on',
    ParentPeriod: 'parent.period',
    ParentStartOn: 'parent.start_on',
    Period: 'period',
    StartOn: 'start_on'
} as const;
export type GetTimePeriodOptFieldsEnum = typeof GetTimePeriodOptFieldsEnum[keyof typeof GetTimePeriodOptFieldsEnum];
/**
 * @export
 */
export const GetTimePeriodsOptFieldsEnum = {
    DisplayName: 'display_name',
    EndOn: 'end_on',
    Offset: 'offset',
    Parent: 'parent',
    ParentDisplayName: 'parent.display_name',
    ParentEndOn: 'parent.end_on',
    ParentPeriod: 'parent.period',
    ParentStartOn: 'parent.start_on',
    Path: 'path',
    Period: 'period',
    StartOn: 'start_on',
    Uri: 'uri'
} as const;
export type GetTimePeriodsOptFieldsEnum = typeof GetTimePeriodsOptFieldsEnum[keyof typeof GetTimePeriodsOptFieldsEnum];
