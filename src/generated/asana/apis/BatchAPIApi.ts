/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  CreateBatchRequest200Response,
  CreateBatchRequestRequest,
  ErrorResponse,
} from '../models/index.js';
import {
    CreateBatchRequest200ResponseFromJSON,
    CreateBatchRequest200ResponseToJSON,
    CreateBatchRequestRequestFromJSON,
    CreateBatchRequestRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index.js';

export interface CreateBatchRequestOperationRequest {
    createBatchRequestRequest: CreateBatchRequestRequest;
    optPretty?: boolean;
    optFields?: Array<CreateBatchRequestOperationOptFieldsEnum>;
}

/**
 * 
 */
export class BatchAPIApi extends runtime.BaseAPI {

    /**
     * Make multiple requests in parallel to Asana\'s API.
     * Submit parallel requests
     */
    async createBatchRequestRaw(requestParameters: CreateBatchRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateBatchRequest200Response>> {
        if (requestParameters['createBatchRequestRequest'] == null) {
            throw new runtime.RequiredError(
                'createBatchRequestRequest',
                'Required parameter "createBatchRequestRequest" was null or undefined when calling createBatchRequest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/batch`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBatchRequestRequestToJSON(requestParameters['createBatchRequestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateBatchRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Make multiple requests in parallel to Asana\'s API.
     * Submit parallel requests
     */
    async createBatchRequest(requestParameters: CreateBatchRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateBatchRequest200Response> {
        const response = await this.createBatchRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateBatchRequestOperationOptFieldsEnum = {
    Body: 'body',
    Headers: 'headers',
    StatusCode: 'status_code'
} as const;
export type CreateBatchRequestOperationOptFieldsEnum = typeof CreateBatchRequestOperationOptFieldsEnum[keyof typeof CreateBatchRequestOperationOptFieldsEnum];
