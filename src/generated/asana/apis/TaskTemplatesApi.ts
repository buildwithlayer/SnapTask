/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  ErrorResponse,
  GetJob200Response,
  GetTaskTemplate200Response,
  GetTaskTemplates200Response,
  InstantiateTaskRequest,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetJob200ResponseFromJSON,
    GetJob200ResponseToJSON,
    GetTaskTemplate200ResponseFromJSON,
    GetTaskTemplate200ResponseToJSON,
    GetTaskTemplates200ResponseFromJSON,
    GetTaskTemplates200ResponseToJSON,
    InstantiateTaskRequestFromJSON,
    InstantiateTaskRequestToJSON,
} from '../models/index.js';

export interface DeleteTaskTemplateRequest {
    taskTemplateGid: string;
    optPretty?: boolean;
}

export interface GetTaskTemplateRequest {
    taskTemplateGid: string;
    optPretty?: boolean;
    optFields?: Array<GetTaskTemplateOptFieldsEnum>;
}

export interface GetTaskTemplatesRequest {
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    project?: string;
    optFields?: Array<GetTaskTemplatesOptFieldsEnum>;
}

export interface InstantiateTaskOperationRequest {
    taskTemplateGid: string;
    optPretty?: boolean;
    optFields?: Array<InstantiateTaskOperationOptFieldsEnum>;
    instantiateTaskRequest?: InstantiateTaskRequest;
}

/**
 * 
 */
export class TaskTemplatesApi extends runtime.BaseAPI {

    /**
     * A specific, existing task template can be deleted by making a DELETE request on the URL for that task template. Returns an empty data record.
     * Delete a task template
     */
    async deleteTaskTemplateRaw(requestParameters: DeleteTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['taskTemplateGid'] == null) {
            throw new runtime.RequiredError(
                'taskTemplateGid',
                'Required parameter "taskTemplateGid" was null or undefined when calling deleteTaskTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/task_templates/{task_template_gid}`;
        urlPath = urlPath.replace(`{${"task_template_gid"}}`, encodeURIComponent(String(requestParameters['taskTemplateGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing task template can be deleted by making a DELETE request on the URL for that task template. Returns an empty data record.
     * Delete a task template
     */
    async deleteTaskTemplate(requestParameters: DeleteTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteTaskTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>task_templates:read</code>  Returns the complete task template record for a single task template.
     * Get a task template
     */
    async getTaskTemplateRaw(requestParameters: GetTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskTemplate200Response>> {
        if (requestParameters['taskTemplateGid'] == null) {
            throw new runtime.RequiredError(
                'taskTemplateGid',
                'Required parameter "taskTemplateGid" was null or undefined when calling getTaskTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["task_templates:read"]);
        }


        let urlPath = `/task_templates/{task_template_gid}`;
        urlPath = urlPath.replace(`{${"task_template_gid"}}`, encodeURIComponent(String(requestParameters['taskTemplateGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskTemplate200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>task_templates:read</code>  Returns the complete task template record for a single task template.
     * Get a task template
     */
    async getTaskTemplate(requestParameters: GetTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskTemplate200Response> {
        const response = await this.getTaskTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>task_templates:read</code>  Returns the compact task template records for some filtered set of task templates. You must specify a `project`
     * Get multiple task templates
     */
    async getTaskTemplatesRaw(requestParameters: GetTaskTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTaskTemplates200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['project'] != null) {
            queryParameters['project'] = requestParameters['project'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["task_templates:read"]);
        }


        let urlPath = `/task_templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTaskTemplates200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>task_templates:read</code>  Returns the compact task template records for some filtered set of task templates. You must specify a `project`
     * Get multiple task templates
     */
    async getTaskTemplates(requestParameters: GetTaskTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTaskTemplates200Response> {
        const response = await this.getTaskTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates and returns a job that will asynchronously handle the task instantiation.
     * Instantiate a task from a task template
     */
    async instantiateTaskRaw(requestParameters: InstantiateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetJob200Response>> {
        if (requestParameters['taskTemplateGid'] == null) {
            throw new runtime.RequiredError(
                'taskTemplateGid',
                'Required parameter "taskTemplateGid" was null or undefined when calling instantiateTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/task_templates/{task_template_gid}/instantiateTask`;
        urlPath = urlPath.replace(`{${"task_template_gid"}}`, encodeURIComponent(String(requestParameters['taskTemplateGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstantiateTaskRequestToJSON(requestParameters['instantiateTaskRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJob200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates and returns a job that will asynchronously handle the task instantiation.
     * Instantiate a task from a task template
     */
    async instantiateTask(requestParameters: InstantiateTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetJob200Response> {
        const response = await this.instantiateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetTaskTemplateOptFieldsEnum = {
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    Name: 'name',
    Project: 'project',
    Template: 'template'
} as const;
export type GetTaskTemplateOptFieldsEnum = typeof GetTaskTemplateOptFieldsEnum[keyof typeof GetTaskTemplateOptFieldsEnum];
/**
 * @export
 */
export const GetTaskTemplatesOptFieldsEnum = {
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    Name: 'name',
    Project: 'project',
    Template: 'template'
} as const;
export type GetTaskTemplatesOptFieldsEnum = typeof GetTaskTemplatesOptFieldsEnum[keyof typeof GetTaskTemplatesOptFieldsEnum];
/**
 * @export
 */
export const InstantiateTaskOperationOptFieldsEnum = {
    NewGraphExport: 'new_graph_export',
    NewGraphExportCompletedAt: 'new_graph_export.completed_at',
    NewGraphExportCreatedAt: 'new_graph_export.created_at',
    NewGraphExportDownloadUrl: 'new_graph_export.download_url',
    NewProject: 'new_project',
    NewProjectName: 'new_project.name',
    NewProjectTemplate: 'new_project_template',
    NewProjectTemplateName: 'new_project_template.name',
    NewResourceExport: 'new_resource_export',
    NewResourceExportCompletedAt: 'new_resource_export.completed_at',
    NewResourceExportCreatedAt: 'new_resource_export.created_at',
    NewResourceExportDownloadUrl: 'new_resource_export.download_url',
    NewTask: 'new_task',
    NewTaskCreatedBy: 'new_task.created_by',
    NewTaskName: 'new_task.name',
    NewTaskResourceSubtype: 'new_task.resource_subtype',
    NewTaskTemplate: 'new_task_template',
    NewTaskTemplateName: 'new_task_template.name',
    ResourceSubtype: 'resource_subtype',
    Status: 'status'
} as const;
export type InstantiateTaskOperationOptFieldsEnum = typeof InstantiateTaskOperationOptFieldsEnum[keyof typeof InstantiateTaskOperationOptFieldsEnum];
