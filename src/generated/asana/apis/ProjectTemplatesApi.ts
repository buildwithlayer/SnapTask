/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  ErrorResponse,
  GetJob200Response,
  GetProjectTemplate200Response,
  GetProjectTemplates200Response,
  InstantiateProjectRequest,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetJob200ResponseFromJSON,
    GetJob200ResponseToJSON,
    GetProjectTemplate200ResponseFromJSON,
    GetProjectTemplate200ResponseToJSON,
    GetProjectTemplates200ResponseFromJSON,
    GetProjectTemplates200ResponseToJSON,
    InstantiateProjectRequestFromJSON,
    InstantiateProjectRequestToJSON,
} from '../models/index.js';

export interface DeleteProjectTemplateRequest {
    projectTemplateGid: string;
    optPretty?: boolean;
}

export interface GetProjectTemplateRequest {
    projectTemplateGid: string;
    optPretty?: boolean;
    optFields?: Array<GetProjectTemplateOptFieldsEnum>;
}

export interface GetProjectTemplatesRequest {
    optPretty?: boolean;
    workspace?: string;
    team?: string;
    limit?: number;
    offset?: string;
    optFields?: Array<GetProjectTemplatesOptFieldsEnum>;
}

export interface GetProjectTemplatesForTeamRequest {
    teamGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetProjectTemplatesForTeamOptFieldsEnum>;
}

export interface InstantiateProjectOperationRequest {
    projectTemplateGid: string;
    optPretty?: boolean;
    optFields?: Array<InstantiateProjectOperationOptFieldsEnum>;
    instantiateProjectRequest?: InstantiateProjectRequest;
}

/**
 * 
 */
export class ProjectTemplatesApi extends runtime.BaseAPI {

    /**
     * A specific, existing project template can be deleted by making a DELETE request on the URL for that project template.  Returns an empty data record.
     * Delete a project template
     */
    async deleteProjectTemplateRaw(requestParameters: DeleteProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['projectTemplateGid'] == null) {
            throw new runtime.RequiredError(
                'projectTemplateGid',
                'Required parameter "projectTemplateGid" was null or undefined when calling deleteProjectTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/project_templates/{project_template_gid}`;
        urlPath = urlPath.replace(`{${"project_template_gid"}}`, encodeURIComponent(String(requestParameters['projectTemplateGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing project template can be deleted by making a DELETE request on the URL for that project template.  Returns an empty data record.
     * Delete a project template
     */
    async deleteProjectTemplate(requestParameters: DeleteProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteProjectTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>project_templates:read</code>  Returns the complete project template record for a single project template.
     * Get a project template
     */
    async getProjectTemplateRaw(requestParameters: GetProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectTemplate200Response>> {
        if (requestParameters['projectTemplateGid'] == null) {
            throw new runtime.RequiredError(
                'projectTemplateGid',
                'Required parameter "projectTemplateGid" was null or undefined when calling getProjectTemplate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["project_templates:read"]);
        }


        let urlPath = `/project_templates/{project_template_gid}`;
        urlPath = urlPath.replace(`{${"project_template_gid"}}`, encodeURIComponent(String(requestParameters['projectTemplateGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectTemplate200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>project_templates:read</code>  Returns the complete project template record for a single project template.
     * Get a project template
     */
    async getProjectTemplate(requestParameters: GetProjectTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectTemplate200Response> {
        const response = await this.getProjectTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>project_templates:read</code>  Returns the compact project template records for all project templates in the given team or workspace.
     * Get multiple project templates
     */
    async getProjectTemplatesRaw(requestParameters: GetProjectTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectTemplates200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['team'] != null) {
            queryParameters['team'] = requestParameters['team'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["project_templates:read"]);
        }


        let urlPath = `/project_templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectTemplates200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>project_templates:read</code>  Returns the compact project template records for all project templates in the given team or workspace.
     * Get multiple project templates
     */
    async getProjectTemplates(requestParameters: GetProjectTemplatesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectTemplates200Response> {
        const response = await this.getProjectTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>project_templates:read</code>  Returns the compact project template records for all project templates in the team.
     * Get a team\'s project templates
     */
    async getProjectTemplatesForTeamRaw(requestParameters: GetProjectTemplatesForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectTemplates200Response>> {
        if (requestParameters['teamGid'] == null) {
            throw new runtime.RequiredError(
                'teamGid',
                'Required parameter "teamGid" was null or undefined when calling getProjectTemplatesForTeam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["project_templates:read"]);
        }


        let urlPath = `/teams/{team_gid}/project_templates`;
        urlPath = urlPath.replace(`{${"team_gid"}}`, encodeURIComponent(String(requestParameters['teamGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectTemplates200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>project_templates:read</code>  Returns the compact project template records for all project templates in the team.
     * Get a team\'s project templates
     */
    async getProjectTemplatesForTeam(requestParameters: GetProjectTemplatesForTeamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectTemplates200Response> {
        const response = await this.getProjectTemplatesForTeamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](/reference/getprojecttemplate). Then, from the response, copy the `gid` from the object in the `requested_dates` array. This `gid` should be used in `requested_dates` to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](/reference/workspaces) parameter._
     * Instantiate a project from a project template
     */
    async instantiateProjectRaw(requestParameters: InstantiateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetJob200Response>> {
        if (requestParameters['projectTemplateGid'] == null) {
            throw new runtime.RequiredError(
                'projectTemplateGid',
                'Required parameter "projectTemplateGid" was null or undefined when calling instantiateProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["projects:write"]);
        }


        let urlPath = `/project_templates/{project_template_gid}/instantiateProject`;
        urlPath = urlPath.replace(`{${"project_template_gid"}}`, encodeURIComponent(String(requestParameters['projectTemplateGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InstantiateProjectRequestToJSON(requestParameters['instantiateProjectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetJob200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>projects:write</code>  Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](/reference/getprojecttemplate). Then, from the response, copy the `gid` from the object in the `requested_dates` array. This `gid` should be used in `requested_dates` to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](/reference/workspaces) parameter._
     * Instantiate a project from a project template
     */
    async instantiateProject(requestParameters: InstantiateProjectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetJob200Response> {
        const response = await this.instantiateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetProjectTemplateOptFieldsEnum = {
    Color: 'color',
    Description: 'description',
    HtmlDescription: 'html_description',
    Name: 'name',
    Owner: 'owner',
    Public: 'public',
    RequestedDates: 'requested_dates',
    RequestedDatesDescription: 'requested_dates.description',
    RequestedDatesName: 'requested_dates.name',
    RequestedRoles: 'requested_roles',
    RequestedRolesName: 'requested_roles.name',
    Team: 'team',
    TeamName: 'team.name'
} as const;
export type GetProjectTemplateOptFieldsEnum = typeof GetProjectTemplateOptFieldsEnum[keyof typeof GetProjectTemplateOptFieldsEnum];
/**
 * @export
 */
export const GetProjectTemplatesOptFieldsEnum = {
    Color: 'color',
    Description: 'description',
    HtmlDescription: 'html_description',
    Name: 'name',
    Offset: 'offset',
    Owner: 'owner',
    Path: 'path',
    Public: 'public',
    RequestedDates: 'requested_dates',
    RequestedDatesDescription: 'requested_dates.description',
    RequestedDatesName: 'requested_dates.name',
    RequestedRoles: 'requested_roles',
    RequestedRolesName: 'requested_roles.name',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri'
} as const;
export type GetProjectTemplatesOptFieldsEnum = typeof GetProjectTemplatesOptFieldsEnum[keyof typeof GetProjectTemplatesOptFieldsEnum];
/**
 * @export
 */
export const GetProjectTemplatesForTeamOptFieldsEnum = {
    Color: 'color',
    Description: 'description',
    HtmlDescription: 'html_description',
    Name: 'name',
    Offset: 'offset',
    Owner: 'owner',
    Path: 'path',
    Public: 'public',
    RequestedDates: 'requested_dates',
    RequestedDatesDescription: 'requested_dates.description',
    RequestedDatesName: 'requested_dates.name',
    RequestedRoles: 'requested_roles',
    RequestedRolesName: 'requested_roles.name',
    Team: 'team',
    TeamName: 'team.name',
    Uri: 'uri'
} as const;
export type GetProjectTemplatesForTeamOptFieldsEnum = typeof GetProjectTemplatesForTeamOptFieldsEnum[keyof typeof GetProjectTemplatesForTeamOptFieldsEnum];
/**
 * @export
 */
export const InstantiateProjectOperationOptFieldsEnum = {
    NewGraphExport: 'new_graph_export',
    NewGraphExportCompletedAt: 'new_graph_export.completed_at',
    NewGraphExportCreatedAt: 'new_graph_export.created_at',
    NewGraphExportDownloadUrl: 'new_graph_export.download_url',
    NewProject: 'new_project',
    NewProjectName: 'new_project.name',
    NewProjectTemplate: 'new_project_template',
    NewProjectTemplateName: 'new_project_template.name',
    NewResourceExport: 'new_resource_export',
    NewResourceExportCompletedAt: 'new_resource_export.completed_at',
    NewResourceExportCreatedAt: 'new_resource_export.created_at',
    NewResourceExportDownloadUrl: 'new_resource_export.download_url',
    NewTask: 'new_task',
    NewTaskCreatedBy: 'new_task.created_by',
    NewTaskName: 'new_task.name',
    NewTaskResourceSubtype: 'new_task.resource_subtype',
    NewTaskTemplate: 'new_task_template',
    NewTaskTemplateName: 'new_task_template.name',
    ResourceSubtype: 'resource_subtype',
    Status: 'status'
} as const;
export type InstantiateProjectOperationOptFieldsEnum = typeof InstantiateProjectOperationOptFieldsEnum[keyof typeof InstantiateProjectOperationOptFieldsEnum];
