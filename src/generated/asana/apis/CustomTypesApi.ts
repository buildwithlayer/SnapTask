/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetCustomType200Response,
  GetCustomTypes200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetCustomType200ResponseFromJSON,
    GetCustomType200ResponseToJSON,
    GetCustomTypes200ResponseFromJSON,
    GetCustomTypes200ResponseToJSON,
} from '../models/index.js';

export interface GetCustomTypeRequest {
    customTypeGid: string;
    optPretty?: boolean;
    optFields?: Array<GetCustomTypeOptFieldsEnum>;
}

export interface GetCustomTypesRequest {
    project: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetCustomTypesOptFieldsEnum>;
}

/**
 * 
 */
export class CustomTypesApi extends runtime.BaseAPI {

    /**
     * Returns the complete custom type record for a single custom type.
     * Get a custom type
     */
    async getCustomTypeRaw(requestParameters: GetCustomTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomType200Response>> {
        if (requestParameters['customTypeGid'] == null) {
            throw new runtime.RequiredError(
                'customTypeGid',
                'Required parameter "customTypeGid" was null or undefined when calling getCustomType().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/custom_types/{custom_type_gid}`;
        urlPath = urlPath.replace(`{${"custom_type_gid"}}`, encodeURIComponent(String(requestParameters['customTypeGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomType200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete custom type record for a single custom type.
     * Get a custom type
     */
    async getCustomType(requestParameters: GetCustomTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomType200Response> {
        const response = await this.getCustomTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all of the custom types associated with an object. Currently, only projects are supported. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [documentation for input/output options](https://developers.asana.com/docs/inputoutput-options) for more information.
     * Get all custom types associated with an object
     */
    async getCustomTypesRaw(requestParameters: GetCustomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomTypes200Response>> {
        if (requestParameters['project'] == null) {
            throw new runtime.RequiredError(
                'project',
                'Required parameter "project" was null or undefined when calling getCustomTypes().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['project'] != null) {
            queryParameters['project'] = requestParameters['project'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/custom_types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomTypes200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of all of the custom types associated with an object. Currently, only projects are supported. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [documentation for input/output options](https://developers.asana.com/docs/inputoutput-options) for more information.
     * Get all custom types associated with an object
     */
    async getCustomTypes(requestParameters: GetCustomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomTypes200Response> {
        const response = await this.getCustomTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCustomTypeOptFieldsEnum = {
    Name: 'name',
    StatusOptions: 'status_options',
    StatusOptionsColor: 'status_options.color',
    StatusOptionsCompletionState: 'status_options.completion_state',
    StatusOptionsEnabled: 'status_options.enabled',
    StatusOptionsName: 'status_options.name'
} as const;
export type GetCustomTypeOptFieldsEnum = typeof GetCustomTypeOptFieldsEnum[keyof typeof GetCustomTypeOptFieldsEnum];
/**
 * @export
 */
export const GetCustomTypesOptFieldsEnum = {
    Name: 'name',
    Offset: 'offset',
    Path: 'path',
    StatusOptions: 'status_options',
    StatusOptionsColor: 'status_options.color',
    StatusOptionsCompletionState: 'status_options.completion_state',
    StatusOptionsEnabled: 'status_options.enabled',
    StatusOptionsName: 'status_options.name',
    Uri: 'uri'
} as const;
export type GetCustomTypesOptFieldsEnum = typeof GetCustomTypesOptFieldsEnum[keyof typeof GetCustomTypesOptFieldsEnum];
