/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GetProjectMembership200Response,
  GetProjectMembershipsForProject200Response,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetProjectMembership200ResponseFromJSON,
    GetProjectMembership200ResponseToJSON,
    GetProjectMembershipsForProject200ResponseFromJSON,
    GetProjectMembershipsForProject200ResponseToJSON,
} from '../models/index.js';

export interface GetProjectMembershipRequest {
    projectMembershipGid: string;
    optPretty?: boolean;
    optFields?: Array<GetProjectMembershipOptFieldsEnum>;
}

export interface GetProjectMembershipsForProjectRequest {
    projectGid: string;
    user?: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetProjectMembershipsForProjectOptFieldsEnum>;
}

/**
 * 
 */
export class ProjectMembershipsApi extends runtime.BaseAPI {

    /**
     * Returns the complete project record for a single project membership.
     * Get a project membership
     */
    async getProjectMembershipRaw(requestParameters: GetProjectMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectMembership200Response>> {
        if (requestParameters['projectMembershipGid'] == null) {
            throw new runtime.RequiredError(
                'projectMembershipGid',
                'Required parameter "projectMembershipGid" was null or undefined when calling getProjectMembership().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/project_memberships/{project_membership_gid}`;
        urlPath = urlPath.replace(`{${"project_membership_gid"}}`, encodeURIComponent(String(requestParameters['projectMembershipGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectMembership200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete project record for a single project membership.
     * Get a project membership
     */
    async getProjectMembership(requestParameters: GetProjectMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectMembership200Response> {
        const response = await this.getProjectMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the compact project membership records for the project.
     * Get memberships from a project
     */
    async getProjectMembershipsForProjectRaw(requestParameters: GetProjectMembershipsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProjectMembershipsForProject200Response>> {
        if (requestParameters['projectGid'] == null) {
            throw new runtime.RequiredError(
                'projectGid',
                'Required parameter "projectGid" was null or undefined when calling getProjectMembershipsForProject().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/projects/{project_gid}/project_memberships`;
        urlPath = urlPath.replace(`{${"project_gid"}}`, encodeURIComponent(String(requestParameters['projectGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProjectMembershipsForProject200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the compact project membership records for the project.
     * Get memberships from a project
     */
    async getProjectMembershipsForProject(requestParameters: GetProjectMembershipsForProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProjectMembershipsForProject200Response> {
        const response = await this.getProjectMembershipsForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetProjectMembershipOptFieldsEnum = {
    AccessLevel: 'access_level',
    Member: 'member',
    MemberName: 'member.name',
    Parent: 'parent',
    ParentName: 'parent.name',
    Project: 'project',
    ProjectName: 'project.name',
    User: 'user',
    UserName: 'user.name',
    WriteAccess: 'write_access'
} as const;
export type GetProjectMembershipOptFieldsEnum = typeof GetProjectMembershipOptFieldsEnum[keyof typeof GetProjectMembershipOptFieldsEnum];
/**
 * @export
 */
export const GetProjectMembershipsForProjectOptFieldsEnum = {
    AccessLevel: 'access_level',
    Member: 'member',
    MemberName: 'member.name',
    Offset: 'offset',
    Parent: 'parent',
    ParentName: 'parent.name',
    Path: 'path',
    Uri: 'uri'
} as const;
export type GetProjectMembershipsForProjectOptFieldsEnum = typeof GetProjectMembershipsForProjectOptFieldsEnum[keyof typeof GetProjectMembershipsForProjectOptFieldsEnum];
