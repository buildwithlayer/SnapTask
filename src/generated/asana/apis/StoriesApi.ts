/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  ErrorResponse,
  GetStoriesForTask200Response,
  GetStory200Response,
  UpdateStoryRequest,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetStoriesForTask200ResponseFromJSON,
    GetStoriesForTask200ResponseToJSON,
    GetStory200ResponseFromJSON,
    GetStory200ResponseToJSON,
    UpdateStoryRequestFromJSON,
    UpdateStoryRequestToJSON,
} from '../models/index.js';

export interface CreateStoryForTaskRequest {
    taskGid: string;
    updateStoryRequest: UpdateStoryRequest;
    optPretty?: boolean;
    optFields?: Array<CreateStoryForTaskOptFieldsEnum>;
}

export interface DeleteStoryRequest {
    storyGid: string;
    optPretty?: boolean;
}

export interface GetStoriesForTaskRequest {
    taskGid: string;
    optPretty?: boolean;
    limit?: number;
    offset?: string;
    optFields?: Array<GetStoriesForTaskOptFieldsEnum>;
}

export interface GetStoryRequest {
    storyGid: string;
    optPretty?: boolean;
    optFields?: Array<GetStoryOptFieldsEnum>;
}

export interface UpdateStoryOperationRequest {
    storyGid: string;
    updateStoryRequest: UpdateStoryRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateStoryOperationOptFieldsEnum>;
}

/**
 * 
 */
export class StoriesApi extends runtime.BaseAPI {

    /**
     * <b>Required scope: </b><code>stories:write</code>  Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
     * Create a story on a task
     */
    async createStoryForTaskRaw(requestParameters: CreateStoryForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStory200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling createStoryForTask().'
            );
        }

        if (requestParameters['updateStoryRequest'] == null) {
            throw new runtime.RequiredError(
                'updateStoryRequest',
                'Required parameter "updateStoryRequest" was null or undefined when calling createStoryForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["stories:write"]);
        }


        let urlPath = `/tasks/{task_gid}/stories`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStoryRequestToJSON(requestParameters['updateStoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStory200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>stories:write</code>  Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
     * Create a story on a task
     */
    async createStoryForTask(requestParameters: CreateStoryForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStory200Response> {
        const response = await this.createStoryForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
     * Delete a story
     */
    async deleteStoryRaw(requestParameters: DeleteStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['storyGid'] == null) {
            throw new runtime.RequiredError(
                'storyGid',
                'Required parameter "storyGid" was null or undefined when calling deleteStory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/stories/{story_gid}`;
        urlPath = urlPath.replace(`{${"story_gid"}}`, encodeURIComponent(String(requestParameters['storyGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
     * Delete a story
     */
    async deleteStory(requestParameters: DeleteStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>stories:read</code>  Returns the compact records for all stories on the task.
     * Get stories from a task
     */
    async getStoriesForTaskRaw(requestParameters: GetStoriesForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStoriesForTask200Response>> {
        if (requestParameters['taskGid'] == null) {
            throw new runtime.RequiredError(
                'taskGid',
                'Required parameter "taskGid" was null or undefined when calling getStoriesForTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["stories:read"]);
        }


        let urlPath = `/tasks/{task_gid}/stories`;
        urlPath = urlPath.replace(`{${"task_gid"}}`, encodeURIComponent(String(requestParameters['taskGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStoriesForTask200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>stories:read</code>  Returns the compact records for all stories on the task.
     * Get stories from a task
     */
    async getStoriesForTask(requestParameters: GetStoriesForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStoriesForTask200Response> {
        const response = await this.getStoriesForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>stories:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>previews</code></td>     <td><code>attachments:read</code></td>   </tr>   <tr>     <td><code>attachments</code></td>     <td><code>attachments:read</code></td>   </tr> </table>  Returns the full record for a single story.
     * Get a story
     */
    async getStoryRaw(requestParameters: GetStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStory200Response>> {
        if (requestParameters['storyGid'] == null) {
            throw new runtime.RequiredError(
                'storyGid',
                'Required parameter "storyGid" was null or undefined when calling getStory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["stories:read"]);
        }


        let urlPath = `/stories/{story_gid}`;
        urlPath = urlPath.replace(`{${"story_gid"}}`, encodeURIComponent(String(requestParameters['storyGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStory200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>stories:read</code>  <table>   <tr>     <th>Field</th>     <th>Required Scope</th>   </tr>   <tr>     <td><code>previews</code></td>     <td><code>attachments:read</code></td>   </tr>   <tr>     <td><code>attachments</code></td>     <td><code>attachments:read</code></td>   </tr> </table>  Returns the full record for a single story.
     * Get a story
     */
    async getStory(requestParameters: GetStoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStory200Response> {
        const response = await this.getStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <b>Required scope: </b><code>stories:write</code>  Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
     * Update a story
     */
    async updateStoryRaw(requestParameters: UpdateStoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStory200Response>> {
        if (requestParameters['storyGid'] == null) {
            throw new runtime.RequiredError(
                'storyGid',
                'Required parameter "storyGid" was null or undefined when calling updateStory().'
            );
        }

        if (requestParameters['updateStoryRequest'] == null) {
            throw new runtime.RequiredError(
                'updateStoryRequest',
                'Required parameter "updateStoryRequest" was null or undefined when calling updateStory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", ["stories:write"]);
        }


        let urlPath = `/stories/{story_gid}`;
        urlPath = urlPath.replace(`{${"story_gid"}}`, encodeURIComponent(String(requestParameters['storyGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStoryRequestToJSON(requestParameters['updateStoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStory200ResponseFromJSON(jsonValue));
    }

    /**
     * <b>Required scope: </b><code>stories:write</code>  Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
     * Update a story
     */
    async updateStory(requestParameters: UpdateStoryOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStory200Response> {
        const response = await this.updateStoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateStoryForTaskOptFieldsEnum = {
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CustomField: 'custom_field',
    CustomFieldDateValue: 'custom_field.date_value',
    CustomFieldDateValueDate: 'custom_field.date_value.date',
    CustomFieldDateValueDateTime: 'custom_field.date_value.date_time',
    CustomFieldDisplayValue: 'custom_field.display_value',
    CustomFieldEnabled: 'custom_field.enabled',
    CustomFieldEnumOptions: 'custom_field.enum_options',
    CustomFieldEnumOptionsColor: 'custom_field.enum_options.color',
    CustomFieldEnumOptionsEnabled: 'custom_field.enum_options.enabled',
    CustomFieldEnumOptionsName: 'custom_field.enum_options.name',
    CustomFieldEnumValue: 'custom_field.enum_value',
    CustomFieldEnumValueColor: 'custom_field.enum_value.color',
    CustomFieldEnumValueEnabled: 'custom_field.enum_value.enabled',
    CustomFieldEnumValueName: 'custom_field.enum_value.name',
    CustomFieldIdPrefix: 'custom_field.id_prefix',
    CustomFieldIsFormulaField: 'custom_field.is_formula_field',
    CustomFieldMultiEnumValues: 'custom_field.multi_enum_values',
    CustomFieldMultiEnumValuesColor: 'custom_field.multi_enum_values.color',
    CustomFieldMultiEnumValuesEnabled: 'custom_field.multi_enum_values.enabled',
    CustomFieldMultiEnumValuesName: 'custom_field.multi_enum_values.name',
    CustomFieldName: 'custom_field.name',
    CustomFieldNumberValue: 'custom_field.number_value',
    CustomFieldRepresentationType: 'custom_field.representation_type',
    CustomFieldTextValue: 'custom_field.text_value',
    CustomFieldType: 'custom_field.type',
    Dependency: 'dependency',
    DependencyCreatedBy: 'dependency.created_by',
    DependencyName: 'dependency.name',
    DependencyResourceSubtype: 'dependency.resource_subtype',
    DuplicateOf: 'duplicate_of',
    DuplicateOfCreatedBy: 'duplicate_of.created_by',
    DuplicateOfName: 'duplicate_of.name',
    DuplicateOfResourceSubtype: 'duplicate_of.resource_subtype',
    DuplicatedFrom: 'duplicated_from',
    DuplicatedFromCreatedBy: 'duplicated_from.created_by',
    DuplicatedFromName: 'duplicated_from.name',
    DuplicatedFromResourceSubtype: 'duplicated_from.resource_subtype',
    Follower: 'follower',
    FollowerName: 'follower.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlText: 'html_text',
    IsEditable: 'is_editable',
    IsEdited: 'is_edited',
    IsPinned: 'is_pinned',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    NewApprovalStatus: 'new_approval_status',
    NewDateValue: 'new_date_value',
    NewDates: 'new_dates',
    NewDatesDueAt: 'new_dates.due_at',
    NewDatesDueOn: 'new_dates.due_on',
    NewDatesStartOn: 'new_dates.start_on',
    NewEnumValue: 'new_enum_value',
    NewEnumValueColor: 'new_enum_value.color',
    NewEnumValueEnabled: 'new_enum_value.enabled',
    NewEnumValueName: 'new_enum_value.name',
    NewMultiEnumValues: 'new_multi_enum_values',
    NewMultiEnumValuesColor: 'new_multi_enum_values.color',
    NewMultiEnumValuesEnabled: 'new_multi_enum_values.enabled',
    NewMultiEnumValuesName: 'new_multi_enum_values.name',
    NewName: 'new_name',
    NewNumberValue: 'new_number_value',
    NewPeopleValue: 'new_people_value',
    NewPeopleValueName: 'new_people_value.name',
    NewResourceSubtype: 'new_resource_subtype',
    NewSection: 'new_section',
    NewSectionName: 'new_section.name',
    NewTextValue: 'new_text_value',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    OldApprovalStatus: 'old_approval_status',
    OldDateValue: 'old_date_value',
    OldDates: 'old_dates',
    OldDatesDueAt: 'old_dates.due_at',
    OldDatesDueOn: 'old_dates.due_on',
    OldDatesStartOn: 'old_dates.start_on',
    OldEnumValue: 'old_enum_value',
    OldEnumValueColor: 'old_enum_value.color',
    OldEnumValueEnabled: 'old_enum_value.enabled',
    OldEnumValueName: 'old_enum_value.name',
    OldMultiEnumValues: 'old_multi_enum_values',
    OldMultiEnumValuesColor: 'old_multi_enum_values.color',
    OldMultiEnumValuesEnabled: 'old_multi_enum_values.enabled',
    OldMultiEnumValuesName: 'old_multi_enum_values.name',
    OldName: 'old_name',
    OldNumberValue: 'old_number_value',
    OldPeopleValue: 'old_people_value',
    OldPeopleValueName: 'old_people_value.name',
    OldResourceSubtype: 'old_resource_subtype',
    OldSection: 'old_section',
    OldSectionName: 'old_section.name',
    OldTextValue: 'old_text_value',
    Previews: 'previews',
    PreviewsFallback: 'previews.fallback',
    PreviewsFooter: 'previews.footer',
    PreviewsHeader: 'previews.header',
    PreviewsHeaderLink: 'previews.header_link',
    PreviewsHtmlText: 'previews.html_text',
    PreviewsText: 'previews.text',
    PreviewsTitle: 'previews.title',
    PreviewsTitleLink: 'previews.title_link',
    Project: 'project',
    ProjectName: 'project.name',
    ResourceSubtype: 'resource_subtype',
    Source: 'source',
    StickerName: 'sticker_name',
    Story: 'story',
    StoryCreatedAt: 'story.created_at',
    StoryCreatedBy: 'story.created_by',
    StoryCreatedByName: 'story.created_by.name',
    StoryResourceSubtype: 'story.resource_subtype',
    StoryText: 'story.text',
    Tag: 'tag',
    TagName: 'tag.name',
    Target: 'target',
    TargetCreatedBy: 'target.created_by',
    TargetName: 'target.name',
    TargetResourceSubtype: 'target.resource_subtype',
    Task: 'task',
    TaskCreatedBy: 'task.created_by',
    TaskName: 'task.name',
    TaskResourceSubtype: 'task.resource_subtype',
    Text: 'text',
    Type: 'type'
} as const;
export type CreateStoryForTaskOptFieldsEnum = typeof CreateStoryForTaskOptFieldsEnum[keyof typeof CreateStoryForTaskOptFieldsEnum];
/**
 * @export
 */
export const GetStoriesForTaskOptFieldsEnum = {
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CustomField: 'custom_field',
    CustomFieldDateValue: 'custom_field.date_value',
    CustomFieldDateValueDate: 'custom_field.date_value.date',
    CustomFieldDateValueDateTime: 'custom_field.date_value.date_time',
    CustomFieldDisplayValue: 'custom_field.display_value',
    CustomFieldEnabled: 'custom_field.enabled',
    CustomFieldEnumOptions: 'custom_field.enum_options',
    CustomFieldEnumOptionsColor: 'custom_field.enum_options.color',
    CustomFieldEnumOptionsEnabled: 'custom_field.enum_options.enabled',
    CustomFieldEnumOptionsName: 'custom_field.enum_options.name',
    CustomFieldEnumValue: 'custom_field.enum_value',
    CustomFieldEnumValueColor: 'custom_field.enum_value.color',
    CustomFieldEnumValueEnabled: 'custom_field.enum_value.enabled',
    CustomFieldEnumValueName: 'custom_field.enum_value.name',
    CustomFieldIdPrefix: 'custom_field.id_prefix',
    CustomFieldIsFormulaField: 'custom_field.is_formula_field',
    CustomFieldMultiEnumValues: 'custom_field.multi_enum_values',
    CustomFieldMultiEnumValuesColor: 'custom_field.multi_enum_values.color',
    CustomFieldMultiEnumValuesEnabled: 'custom_field.multi_enum_values.enabled',
    CustomFieldMultiEnumValuesName: 'custom_field.multi_enum_values.name',
    CustomFieldName: 'custom_field.name',
    CustomFieldNumberValue: 'custom_field.number_value',
    CustomFieldRepresentationType: 'custom_field.representation_type',
    CustomFieldTextValue: 'custom_field.text_value',
    CustomFieldType: 'custom_field.type',
    Dependency: 'dependency',
    DependencyCreatedBy: 'dependency.created_by',
    DependencyName: 'dependency.name',
    DependencyResourceSubtype: 'dependency.resource_subtype',
    DuplicateOf: 'duplicate_of',
    DuplicateOfCreatedBy: 'duplicate_of.created_by',
    DuplicateOfName: 'duplicate_of.name',
    DuplicateOfResourceSubtype: 'duplicate_of.resource_subtype',
    DuplicatedFrom: 'duplicated_from',
    DuplicatedFromCreatedBy: 'duplicated_from.created_by',
    DuplicatedFromName: 'duplicated_from.name',
    DuplicatedFromResourceSubtype: 'duplicated_from.resource_subtype',
    Follower: 'follower',
    FollowerName: 'follower.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlText: 'html_text',
    IsEditable: 'is_editable',
    IsEdited: 'is_edited',
    IsPinned: 'is_pinned',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    NewApprovalStatus: 'new_approval_status',
    NewDateValue: 'new_date_value',
    NewDates: 'new_dates',
    NewDatesDueAt: 'new_dates.due_at',
    NewDatesDueOn: 'new_dates.due_on',
    NewDatesStartOn: 'new_dates.start_on',
    NewEnumValue: 'new_enum_value',
    NewEnumValueColor: 'new_enum_value.color',
    NewEnumValueEnabled: 'new_enum_value.enabled',
    NewEnumValueName: 'new_enum_value.name',
    NewMultiEnumValues: 'new_multi_enum_values',
    NewMultiEnumValuesColor: 'new_multi_enum_values.color',
    NewMultiEnumValuesEnabled: 'new_multi_enum_values.enabled',
    NewMultiEnumValuesName: 'new_multi_enum_values.name',
    NewName: 'new_name',
    NewNumberValue: 'new_number_value',
    NewPeopleValue: 'new_people_value',
    NewPeopleValueName: 'new_people_value.name',
    NewResourceSubtype: 'new_resource_subtype',
    NewSection: 'new_section',
    NewSectionName: 'new_section.name',
    NewTextValue: 'new_text_value',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    Offset: 'offset',
    OldApprovalStatus: 'old_approval_status',
    OldDateValue: 'old_date_value',
    OldDates: 'old_dates',
    OldDatesDueAt: 'old_dates.due_at',
    OldDatesDueOn: 'old_dates.due_on',
    OldDatesStartOn: 'old_dates.start_on',
    OldEnumValue: 'old_enum_value',
    OldEnumValueColor: 'old_enum_value.color',
    OldEnumValueEnabled: 'old_enum_value.enabled',
    OldEnumValueName: 'old_enum_value.name',
    OldMultiEnumValues: 'old_multi_enum_values',
    OldMultiEnumValuesColor: 'old_multi_enum_values.color',
    OldMultiEnumValuesEnabled: 'old_multi_enum_values.enabled',
    OldMultiEnumValuesName: 'old_multi_enum_values.name',
    OldName: 'old_name',
    OldNumberValue: 'old_number_value',
    OldPeopleValue: 'old_people_value',
    OldPeopleValueName: 'old_people_value.name',
    OldResourceSubtype: 'old_resource_subtype',
    OldSection: 'old_section',
    OldSectionName: 'old_section.name',
    OldTextValue: 'old_text_value',
    Path: 'path',
    Previews: 'previews',
    PreviewsFallback: 'previews.fallback',
    PreviewsFooter: 'previews.footer',
    PreviewsHeader: 'previews.header',
    PreviewsHeaderLink: 'previews.header_link',
    PreviewsHtmlText: 'previews.html_text',
    PreviewsText: 'previews.text',
    PreviewsTitle: 'previews.title',
    PreviewsTitleLink: 'previews.title_link',
    Project: 'project',
    ProjectName: 'project.name',
    ResourceSubtype: 'resource_subtype',
    Source: 'source',
    StickerName: 'sticker_name',
    Story: 'story',
    StoryCreatedAt: 'story.created_at',
    StoryCreatedBy: 'story.created_by',
    StoryCreatedByName: 'story.created_by.name',
    StoryResourceSubtype: 'story.resource_subtype',
    StoryText: 'story.text',
    Tag: 'tag',
    TagName: 'tag.name',
    Target: 'target',
    TargetCreatedBy: 'target.created_by',
    TargetName: 'target.name',
    TargetResourceSubtype: 'target.resource_subtype',
    Task: 'task',
    TaskCreatedBy: 'task.created_by',
    TaskName: 'task.name',
    TaskResourceSubtype: 'task.resource_subtype',
    Text: 'text',
    Type: 'type',
    Uri: 'uri'
} as const;
export type GetStoriesForTaskOptFieldsEnum = typeof GetStoriesForTaskOptFieldsEnum[keyof typeof GetStoriesForTaskOptFieldsEnum];
/**
 * @export
 */
export const GetStoryOptFieldsEnum = {
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CustomField: 'custom_field',
    CustomFieldDateValue: 'custom_field.date_value',
    CustomFieldDateValueDate: 'custom_field.date_value.date',
    CustomFieldDateValueDateTime: 'custom_field.date_value.date_time',
    CustomFieldDisplayValue: 'custom_field.display_value',
    CustomFieldEnabled: 'custom_field.enabled',
    CustomFieldEnumOptions: 'custom_field.enum_options',
    CustomFieldEnumOptionsColor: 'custom_field.enum_options.color',
    CustomFieldEnumOptionsEnabled: 'custom_field.enum_options.enabled',
    CustomFieldEnumOptionsName: 'custom_field.enum_options.name',
    CustomFieldEnumValue: 'custom_field.enum_value',
    CustomFieldEnumValueColor: 'custom_field.enum_value.color',
    CustomFieldEnumValueEnabled: 'custom_field.enum_value.enabled',
    CustomFieldEnumValueName: 'custom_field.enum_value.name',
    CustomFieldIdPrefix: 'custom_field.id_prefix',
    CustomFieldIsFormulaField: 'custom_field.is_formula_field',
    CustomFieldMultiEnumValues: 'custom_field.multi_enum_values',
    CustomFieldMultiEnumValuesColor: 'custom_field.multi_enum_values.color',
    CustomFieldMultiEnumValuesEnabled: 'custom_field.multi_enum_values.enabled',
    CustomFieldMultiEnumValuesName: 'custom_field.multi_enum_values.name',
    CustomFieldName: 'custom_field.name',
    CustomFieldNumberValue: 'custom_field.number_value',
    CustomFieldRepresentationType: 'custom_field.representation_type',
    CustomFieldTextValue: 'custom_field.text_value',
    CustomFieldType: 'custom_field.type',
    Dependency: 'dependency',
    DependencyCreatedBy: 'dependency.created_by',
    DependencyName: 'dependency.name',
    DependencyResourceSubtype: 'dependency.resource_subtype',
    DuplicateOf: 'duplicate_of',
    DuplicateOfCreatedBy: 'duplicate_of.created_by',
    DuplicateOfName: 'duplicate_of.name',
    DuplicateOfResourceSubtype: 'duplicate_of.resource_subtype',
    DuplicatedFrom: 'duplicated_from',
    DuplicatedFromCreatedBy: 'duplicated_from.created_by',
    DuplicatedFromName: 'duplicated_from.name',
    DuplicatedFromResourceSubtype: 'duplicated_from.resource_subtype',
    Follower: 'follower',
    FollowerName: 'follower.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlText: 'html_text',
    IsEditable: 'is_editable',
    IsEdited: 'is_edited',
    IsPinned: 'is_pinned',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    NewApprovalStatus: 'new_approval_status',
    NewDateValue: 'new_date_value',
    NewDates: 'new_dates',
    NewDatesDueAt: 'new_dates.due_at',
    NewDatesDueOn: 'new_dates.due_on',
    NewDatesStartOn: 'new_dates.start_on',
    NewEnumValue: 'new_enum_value',
    NewEnumValueColor: 'new_enum_value.color',
    NewEnumValueEnabled: 'new_enum_value.enabled',
    NewEnumValueName: 'new_enum_value.name',
    NewMultiEnumValues: 'new_multi_enum_values',
    NewMultiEnumValuesColor: 'new_multi_enum_values.color',
    NewMultiEnumValuesEnabled: 'new_multi_enum_values.enabled',
    NewMultiEnumValuesName: 'new_multi_enum_values.name',
    NewName: 'new_name',
    NewNumberValue: 'new_number_value',
    NewPeopleValue: 'new_people_value',
    NewPeopleValueName: 'new_people_value.name',
    NewResourceSubtype: 'new_resource_subtype',
    NewSection: 'new_section',
    NewSectionName: 'new_section.name',
    NewTextValue: 'new_text_value',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    OldApprovalStatus: 'old_approval_status',
    OldDateValue: 'old_date_value',
    OldDates: 'old_dates',
    OldDatesDueAt: 'old_dates.due_at',
    OldDatesDueOn: 'old_dates.due_on',
    OldDatesStartOn: 'old_dates.start_on',
    OldEnumValue: 'old_enum_value',
    OldEnumValueColor: 'old_enum_value.color',
    OldEnumValueEnabled: 'old_enum_value.enabled',
    OldEnumValueName: 'old_enum_value.name',
    OldMultiEnumValues: 'old_multi_enum_values',
    OldMultiEnumValuesColor: 'old_multi_enum_values.color',
    OldMultiEnumValuesEnabled: 'old_multi_enum_values.enabled',
    OldMultiEnumValuesName: 'old_multi_enum_values.name',
    OldName: 'old_name',
    OldNumberValue: 'old_number_value',
    OldPeopleValue: 'old_people_value',
    OldPeopleValueName: 'old_people_value.name',
    OldResourceSubtype: 'old_resource_subtype',
    OldSection: 'old_section',
    OldSectionName: 'old_section.name',
    OldTextValue: 'old_text_value',
    Previews: 'previews',
    PreviewsFallback: 'previews.fallback',
    PreviewsFooter: 'previews.footer',
    PreviewsHeader: 'previews.header',
    PreviewsHeaderLink: 'previews.header_link',
    PreviewsHtmlText: 'previews.html_text',
    PreviewsText: 'previews.text',
    PreviewsTitle: 'previews.title',
    PreviewsTitleLink: 'previews.title_link',
    Project: 'project',
    ProjectName: 'project.name',
    ResourceSubtype: 'resource_subtype',
    Source: 'source',
    StickerName: 'sticker_name',
    Story: 'story',
    StoryCreatedAt: 'story.created_at',
    StoryCreatedBy: 'story.created_by',
    StoryCreatedByName: 'story.created_by.name',
    StoryResourceSubtype: 'story.resource_subtype',
    StoryText: 'story.text',
    Tag: 'tag',
    TagName: 'tag.name',
    Target: 'target',
    TargetCreatedBy: 'target.created_by',
    TargetName: 'target.name',
    TargetResourceSubtype: 'target.resource_subtype',
    Task: 'task',
    TaskCreatedBy: 'task.created_by',
    TaskName: 'task.name',
    TaskResourceSubtype: 'task.resource_subtype',
    Text: 'text',
    Type: 'type'
} as const;
export type GetStoryOptFieldsEnum = typeof GetStoryOptFieldsEnum[keyof typeof GetStoryOptFieldsEnum];
/**
 * @export
 */
export const UpdateStoryOperationOptFieldsEnum = {
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    CreatedAt: 'created_at',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    CustomField: 'custom_field',
    CustomFieldDateValue: 'custom_field.date_value',
    CustomFieldDateValueDate: 'custom_field.date_value.date',
    CustomFieldDateValueDateTime: 'custom_field.date_value.date_time',
    CustomFieldDisplayValue: 'custom_field.display_value',
    CustomFieldEnabled: 'custom_field.enabled',
    CustomFieldEnumOptions: 'custom_field.enum_options',
    CustomFieldEnumOptionsColor: 'custom_field.enum_options.color',
    CustomFieldEnumOptionsEnabled: 'custom_field.enum_options.enabled',
    CustomFieldEnumOptionsName: 'custom_field.enum_options.name',
    CustomFieldEnumValue: 'custom_field.enum_value',
    CustomFieldEnumValueColor: 'custom_field.enum_value.color',
    CustomFieldEnumValueEnabled: 'custom_field.enum_value.enabled',
    CustomFieldEnumValueName: 'custom_field.enum_value.name',
    CustomFieldIdPrefix: 'custom_field.id_prefix',
    CustomFieldIsFormulaField: 'custom_field.is_formula_field',
    CustomFieldMultiEnumValues: 'custom_field.multi_enum_values',
    CustomFieldMultiEnumValuesColor: 'custom_field.multi_enum_values.color',
    CustomFieldMultiEnumValuesEnabled: 'custom_field.multi_enum_values.enabled',
    CustomFieldMultiEnumValuesName: 'custom_field.multi_enum_values.name',
    CustomFieldName: 'custom_field.name',
    CustomFieldNumberValue: 'custom_field.number_value',
    CustomFieldRepresentationType: 'custom_field.representation_type',
    CustomFieldTextValue: 'custom_field.text_value',
    CustomFieldType: 'custom_field.type',
    Dependency: 'dependency',
    DependencyCreatedBy: 'dependency.created_by',
    DependencyName: 'dependency.name',
    DependencyResourceSubtype: 'dependency.resource_subtype',
    DuplicateOf: 'duplicate_of',
    DuplicateOfCreatedBy: 'duplicate_of.created_by',
    DuplicateOfName: 'duplicate_of.name',
    DuplicateOfResourceSubtype: 'duplicate_of.resource_subtype',
    DuplicatedFrom: 'duplicated_from',
    DuplicatedFromCreatedBy: 'duplicated_from.created_by',
    DuplicatedFromName: 'duplicated_from.name',
    DuplicatedFromResourceSubtype: 'duplicated_from.resource_subtype',
    Follower: 'follower',
    FollowerName: 'follower.name',
    Hearted: 'hearted',
    Hearts: 'hearts',
    HeartsUser: 'hearts.user',
    HeartsUserName: 'hearts.user.name',
    HtmlText: 'html_text',
    IsEditable: 'is_editable',
    IsEdited: 'is_edited',
    IsPinned: 'is_pinned',
    Liked: 'liked',
    Likes: 'likes',
    LikesUser: 'likes.user',
    LikesUserName: 'likes.user.name',
    NewApprovalStatus: 'new_approval_status',
    NewDateValue: 'new_date_value',
    NewDates: 'new_dates',
    NewDatesDueAt: 'new_dates.due_at',
    NewDatesDueOn: 'new_dates.due_on',
    NewDatesStartOn: 'new_dates.start_on',
    NewEnumValue: 'new_enum_value',
    NewEnumValueColor: 'new_enum_value.color',
    NewEnumValueEnabled: 'new_enum_value.enabled',
    NewEnumValueName: 'new_enum_value.name',
    NewMultiEnumValues: 'new_multi_enum_values',
    NewMultiEnumValuesColor: 'new_multi_enum_values.color',
    NewMultiEnumValuesEnabled: 'new_multi_enum_values.enabled',
    NewMultiEnumValuesName: 'new_multi_enum_values.name',
    NewName: 'new_name',
    NewNumberValue: 'new_number_value',
    NewPeopleValue: 'new_people_value',
    NewPeopleValueName: 'new_people_value.name',
    NewResourceSubtype: 'new_resource_subtype',
    NewSection: 'new_section',
    NewSectionName: 'new_section.name',
    NewTextValue: 'new_text_value',
    NumHearts: 'num_hearts',
    NumLikes: 'num_likes',
    OldApprovalStatus: 'old_approval_status',
    OldDateValue: 'old_date_value',
    OldDates: 'old_dates',
    OldDatesDueAt: 'old_dates.due_at',
    OldDatesDueOn: 'old_dates.due_on',
    OldDatesStartOn: 'old_dates.start_on',
    OldEnumValue: 'old_enum_value',
    OldEnumValueColor: 'old_enum_value.color',
    OldEnumValueEnabled: 'old_enum_value.enabled',
    OldEnumValueName: 'old_enum_value.name',
    OldMultiEnumValues: 'old_multi_enum_values',
    OldMultiEnumValuesColor: 'old_multi_enum_values.color',
    OldMultiEnumValuesEnabled: 'old_multi_enum_values.enabled',
    OldMultiEnumValuesName: 'old_multi_enum_values.name',
    OldName: 'old_name',
    OldNumberValue: 'old_number_value',
    OldPeopleValue: 'old_people_value',
    OldPeopleValueName: 'old_people_value.name',
    OldResourceSubtype: 'old_resource_subtype',
    OldSection: 'old_section',
    OldSectionName: 'old_section.name',
    OldTextValue: 'old_text_value',
    Previews: 'previews',
    PreviewsFallback: 'previews.fallback',
    PreviewsFooter: 'previews.footer',
    PreviewsHeader: 'previews.header',
    PreviewsHeaderLink: 'previews.header_link',
    PreviewsHtmlText: 'previews.html_text',
    PreviewsText: 'previews.text',
    PreviewsTitle: 'previews.title',
    PreviewsTitleLink: 'previews.title_link',
    Project: 'project',
    ProjectName: 'project.name',
    ResourceSubtype: 'resource_subtype',
    Source: 'source',
    StickerName: 'sticker_name',
    Story: 'story',
    StoryCreatedAt: 'story.created_at',
    StoryCreatedBy: 'story.created_by',
    StoryCreatedByName: 'story.created_by.name',
    StoryResourceSubtype: 'story.resource_subtype',
    StoryText: 'story.text',
    Tag: 'tag',
    TagName: 'tag.name',
    Target: 'target',
    TargetCreatedBy: 'target.created_by',
    TargetName: 'target.name',
    TargetResourceSubtype: 'target.resource_subtype',
    Task: 'task',
    TaskCreatedBy: 'task.created_by',
    TaskName: 'task.name',
    TaskResourceSubtype: 'task.resource_subtype',
    Text: 'text',
    Type: 'type'
} as const;
export type UpdateStoryOperationOptFieldsEnum = typeof UpdateStoryOperationOptFieldsEnum[keyof typeof UpdateStoryOperationOptFieldsEnum];
