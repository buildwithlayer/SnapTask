/* tslint:disable */
/* eslint-disable */
/**
 * Asana
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApproveAccessRequest200Response,
  CreateAllocationRequest,
  ErrorResponse,
  GetAllocation200Response,
  GetAllocations200Response,
  UpdateAllocationRequest,
} from '../models/index.js';
import {
    ApproveAccessRequest200ResponseFromJSON,
    ApproveAccessRequest200ResponseToJSON,
    CreateAllocationRequestFromJSON,
    CreateAllocationRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetAllocation200ResponseFromJSON,
    GetAllocation200ResponseToJSON,
    GetAllocations200ResponseFromJSON,
    GetAllocations200ResponseToJSON,
    UpdateAllocationRequestFromJSON,
    UpdateAllocationRequestToJSON,
} from '../models/index.js';

export interface CreateAllocationOperationRequest {
    createAllocationRequest: CreateAllocationRequest;
    optPretty?: boolean;
    optFields?: Array<CreateAllocationOperationOptFieldsEnum>;
}

export interface DeleteAllocationRequest {
    allocationGid: string;
    optPretty?: boolean;
}

export interface GetAllocationRequest {
    allocationGid: string;
    optPretty?: boolean;
    optFields?: Array<GetAllocationOptFieldsEnum>;
}

export interface GetAllocationsRequest {
    optPretty?: boolean;
    parent?: string;
    assignee?: string;
    workspace?: string;
    limit?: number;
    offset?: string;
    optFields?: Array<GetAllocationsOptFieldsEnum>;
}

export interface UpdateAllocationOperationRequest {
    allocationGid: string;
    updateAllocationRequest: UpdateAllocationRequest;
    optPretty?: boolean;
    optFields?: Array<UpdateAllocationOperationOptFieldsEnum>;
}

/**
 * 
 */
export class AllocationsApi extends runtime.BaseAPI {

    /**
     * Creates a new allocation.  Returns the full record of the newly created allocation.
     * Create an allocation
     */
    async createAllocationRaw(requestParameters: CreateAllocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllocation200Response>> {
        if (requestParameters['createAllocationRequest'] == null) {
            throw new runtime.RequiredError(
                'createAllocationRequest',
                'Required parameter "createAllocationRequest" was null or undefined when calling createAllocation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/allocations`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAllocationRequestToJSON(requestParameters['createAllocationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllocation200ResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new allocation.  Returns the full record of the newly created allocation.
     * Create an allocation
     */
    async createAllocation(requestParameters: CreateAllocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllocation200Response> {
        const response = await this.createAllocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A specific, existing allocation can be deleted by making a DELETE request on the URL for that allocation.  Returns an empty data record.
     * Delete an allocation
     */
    async deleteAllocationRaw(requestParameters: DeleteAllocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApproveAccessRequest200Response>> {
        if (requestParameters['allocationGid'] == null) {
            throw new runtime.RequiredError(
                'allocationGid',
                'Required parameter "allocationGid" was null or undefined when calling deleteAllocation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/allocations/{allocation_gid}`;
        urlPath = urlPath.replace(`{${"allocation_gid"}}`, encodeURIComponent(String(requestParameters['allocationGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApproveAccessRequest200ResponseFromJSON(jsonValue));
    }

    /**
     * A specific, existing allocation can be deleted by making a DELETE request on the URL for that allocation.  Returns an empty data record.
     * Delete an allocation
     */
    async deleteAllocation(requestParameters: DeleteAllocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApproveAccessRequest200Response> {
        const response = await this.deleteAllocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the complete allocation record for a single allocation.
     * Get an allocation
     */
    async getAllocationRaw(requestParameters: GetAllocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllocation200Response>> {
        if (requestParameters['allocationGid'] == null) {
            throw new runtime.RequiredError(
                'allocationGid',
                'Required parameter "allocationGid" was null or undefined when calling getAllocation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/allocations/{allocation_gid}`;
        urlPath = urlPath.replace(`{${"allocation_gid"}}`, encodeURIComponent(String(requestParameters['allocationGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllocation200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns the complete allocation record for a single allocation.
     * Get an allocation
     */
    async getAllocation(requestParameters: GetAllocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllocation200Response> {
        const response = await this.getAllocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of allocations filtered to a specific project, user or placeholder.
     * Get multiple allocations
     */
    async getAllocationsRaw(requestParameters: GetAllocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllocations200Response>> {
        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['parent'] != null) {
            queryParameters['parent'] = requestParameters['parent'];
        }

        if (requestParameters['assignee'] != null) {
            queryParameters['assignee'] = requestParameters['assignee'];
        }

        if (requestParameters['workspace'] != null) {
            queryParameters['workspace'] = requestParameters['workspace'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/allocations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllocations200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of allocations filtered to a specific project, user or placeholder.
     * Get multiple allocations
     */
    async getAllocations(requestParameters: GetAllocationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllocations200Response> {
        const response = await this.getAllocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * An existing allocation can be updated by making a PUT request on the URL for that allocation. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated allocation record.
     * Update an allocation
     */
    async updateAllocationRaw(requestParameters: UpdateAllocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAllocation200Response>> {
        if (requestParameters['allocationGid'] == null) {
            throw new runtime.RequiredError(
                'allocationGid',
                'Required parameter "allocationGid" was null or undefined when calling updateAllocation().'
            );
        }

        if (requestParameters['updateAllocationRequest'] == null) {
            throw new runtime.RequiredError(
                'updateAllocationRequest',
                'Required parameter "updateAllocationRequest" was null or undefined when calling updateAllocation().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['optPretty'] != null) {
            queryParameters['opt_pretty'] = requestParameters['optPretty'];
        }

        if (requestParameters['optFields'] != null) {
            queryParameters['opt_fields'] = requestParameters['optFields']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("personalAccessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth2", []);
        }


        let urlPath = `/allocations/{allocation_gid}`;
        urlPath = urlPath.replace(`{${"allocation_gid"}}`, encodeURIComponent(String(requestParameters['allocationGid'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAllocationRequestToJSON(requestParameters['updateAllocationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAllocation200ResponseFromJSON(jsonValue));
    }

    /**
     * An existing allocation can be updated by making a PUT request on the URL for that allocation. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated allocation record.
     * Update an allocation
     */
    async updateAllocation(requestParameters: UpdateAllocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAllocation200Response> {
        const response = await this.updateAllocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateAllocationOperationOptFieldsEnum = {
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    Effort: 'effort',
    EffortType: 'effort.type',
    EffortValue: 'effort.value',
    EndDate: 'end_date',
    Parent: 'parent',
    ParentName: 'parent.name',
    ResourceSubtype: 'resource_subtype',
    StartDate: 'start_date'
} as const;
export type CreateAllocationOperationOptFieldsEnum = typeof CreateAllocationOperationOptFieldsEnum[keyof typeof CreateAllocationOperationOptFieldsEnum];
/**
 * @export
 */
export const GetAllocationOptFieldsEnum = {
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    Effort: 'effort',
    EffortType: 'effort.type',
    EffortValue: 'effort.value',
    EndDate: 'end_date',
    Parent: 'parent',
    ParentName: 'parent.name',
    ResourceSubtype: 'resource_subtype',
    StartDate: 'start_date'
} as const;
export type GetAllocationOptFieldsEnum = typeof GetAllocationOptFieldsEnum[keyof typeof GetAllocationOptFieldsEnum];
/**
 * @export
 */
export const GetAllocationsOptFieldsEnum = {
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    Effort: 'effort',
    EffortType: 'effort.type',
    EffortValue: 'effort.value',
    EndDate: 'end_date',
    Offset: 'offset',
    Parent: 'parent',
    ParentName: 'parent.name',
    Path: 'path',
    ResourceSubtype: 'resource_subtype',
    StartDate: 'start_date',
    Uri: 'uri'
} as const;
export type GetAllocationsOptFieldsEnum = typeof GetAllocationsOptFieldsEnum[keyof typeof GetAllocationsOptFieldsEnum];
/**
 * @export
 */
export const UpdateAllocationOperationOptFieldsEnum = {
    Assignee: 'assignee',
    AssigneeName: 'assignee.name',
    CreatedBy: 'created_by',
    CreatedByName: 'created_by.name',
    Effort: 'effort',
    EffortType: 'effort.type',
    EffortValue: 'effort.value',
    EndDate: 'end_date',
    Parent: 'parent',
    ParentName: 'parent.name',
    ResourceSubtype: 'resource_subtype',
    StartDate: 'start_date'
} as const;
export type UpdateAllocationOperationOptFieldsEnum = typeof UpdateAllocationOperationOptFieldsEnum[keyof typeof UpdateAllocationOperationOptFieldsEnum];
